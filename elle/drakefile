import drake
import drake.cxx

config = None
lib_static = None
lib_dynamic = None

def configure(cxx_toolkit, cxx_config, curl = None):

  global config, lib_static, lib_dynamic

  config = drake.cxx.Config()
  config.standard = drake.cxx.Config.cxx_0x
# XXX  config.add_local_include_path('..')
  config.lib_path('lib')

  # OS
  if cxx_toolkit.os == drake.os.linux:
    config.define('INFINIT_LINUX')
  elif cxx_toolkit.os == drake.os.macos:
    config.define('INFINIT_MACOSX')
  elif cxx_toolkit.os == drake.os.windows:
    config.define('INFINIT_WINDOWS')
  else:
    raise Exception('unsupported os')

  config.define('HAVE_SETXATTR')

  if cxx_toolkit.os == drake.os.macos:
    config.define('HAVE_STATFS')

  # Curl
  curl = drake.cxx.find_library('curl/curl.h', curl)
  cxx_config += curl
  cxx_config.lib('curl')

  cxx_config = cxx_config + config

  sources = drake.nodes(
    'Buffer.cc',
    'Buffer.hh',
    'CrashReporter.cc',
    'CrashReporter.hh',
    'Exception.hh',
    'Exception.hxx',
    'IOStream.cc',
    'IOStream.hh',
    'Printable.cc',
    'Printable.hh',
    'assert.cc',
    'assert.hh',
    'compiler.hh',
    'concept/Fileable.hh',
    'concept/Fileable.hxx',
    'concept/Uniquable.hh',
    'concept/Uniquable.hxx',
    'concept/fwd.hh',
    'concurrency/Program.cc',
    'concurrency/Program.hh',
    'concurrency/Scheduler.cc',
    'concurrency/Scheduler.hh',
    'concurrency/fwd.hh',
    'container/fwd.hh',
    'container/timeline/Bucket.hh',
    'container/timeline/Bucket.hxx',
    'container/timeline/Timeline.hh',
    'container/timeline/Timeline.hxx',
    'container/timeline/fwd.hh',
    'elle.hh',
    'format/fwd.hh',
    'format/hexadecimal.cc',
    'format/hexadecimal.hh',
    'format/ini/File.cc',
    'format/ini/File.hh',
    'format/ini/Section.cc',
    'format/ini/Section.hh',
    'format/ini/Section.hxx',
    'format/ini/fwd.hh',
    'format/json.hh',
    'format/json/Array.cc',
    'format/json/Array.hh',
    'format/json/Array.hxx',
    'format/json/Bool.cc',
    'format/json/Bool.hh',
    'format/json/Dictionary.cc',
    'format/json/Dictionary.hh',
    'format/json/Dictionary.hxx',
    'format/json/Factory.cc',
    'format/json/Factory.hh',
    'format/json/Factory.hxx',
    'format/json/Float.cc',
    'format/json/Float.hh',
    'format/json/Integer.cc',
    'format/json/Integer.hh',
    'format/json/Null.cc',
    'format/json/Null.hh',
    'format/json/Object.cc',
    'format/json/Object.hh',
    'format/json/Object.hxx',
    'format/json/Parser.cc',
    'format/json/Parser.hh',
    'format/json/String.cc',
    'format/json/String.hh',
    'format/json/_detail.hh',
    'format/json/fwd.hh',
    'fwd.hh',
    'io/Console.cc',
    'io/Console.hh',
    'io/Directory.cc',
    'io/Directory.hh',
    'io/Dumpable.cc',
    'io/Dumpable.hh',
    'io/File.cc',
    'io/File.hh',
    'io/Link.cc',
    'io/Link.hh',
    'io/Path.cc',
    'io/Path.hh',
    'io/Path.hxx',
    'io/Pattern.cc',
    'io/Pattern.hh',
    'io/Piece.cc',
    'io/Piece.hh',
    'io/Unique.hh',
    'io/fwd.hh',
    'log.hh',
    'log/Logger.cc',
    'log/Logger.hh',
    'log/Send.cc',
    'log/Send.hh',
    'log/Send.hxx',
    'log/TextLogger.cc',
    'log/TextLogger.hh',
    'nat/Nat.cc',
    'network/Host.cc',
    'network/Host.hh',
    'network/Host.hxx',
    'network/Interface.cc',
    'network/Interface.hh',
    'network/Interface.hxx',
    'network/Locus.cc',
    'network/Locus.hh',
    'network/Locus.hxx',
    'network/Port.hh',
    'network/fwd.hh',
    'os.hh',
    'os/getenv.cc',
    'os/getenv.hh',
    'os/path.cc',
    'os/path.hh',
    'os/path.hxx',
    'print.cc',
    'print.hh',
    'print.hxx',
    'printf.hh',
    'printf.hxx',
    'serialize/Serializable.hh',
    'serialize/Serializable.hxx',
    )

  sources += drake.nodes(
    'Authority.cc',
    'Authority.hh',
    'Authority.hxx',
    'Passport.cc',
    'Passport.hh',
    'Passport.hxx',
    'Version.cc',
    'serialize/ArchiveMode.cc',
    'serialize/ArchiveMode.hh',
    'serialize/ArraySerializer.hxx',
    'serialize/Base64Archive.cc',
    'serialize/Base64Archive.hh',
    'serialize/BaseArchive.hh',
    'serialize/BaseArchive.hxx',
    'serialize/BinaryArchive.hh',
    'serialize/BinaryArchive.hxx',
    'serialize/Format.hh',
    'serialize/HexadecimalArchive.hh',
    'serialize/IniArchive.cc',
    'serialize/IniArchive.hh',
    'serialize/JSONArchive.cc',
    'serialize/JSONArchive.hh',
    'serialize/JSONArchive.hxx',
    'serialize/ListSerializer.hxx',
    'serialize/MapSerializer.hxx',
    'serialize/PairSerializer.hxx',
    'serialize/Pointer.hh',
    'serialize/Pointer.hxx',
    'serialize/Serializable.hh',
    'serialize/Serializable.hxx',
    'serialize/Serializer.hh',
    'serialize/SetSerializer.hxx',
    'serialize/StaticFormat.hh',
    'serialize/TupleSerializer.hxx',
    'serialize/VectorSerializer.hxx',
    'serialize/detail/AssociativeSerializer.hh',
    'serialize/detail/MergeArchive.hh',
    'serialize/detail/SequenceSerializer.hh',
    'serialize/extract.cc',
    'serialize/extract.hh',
    'serialize/extract.hxx',
    'serialize/footprint.hh',
    'serialize/footprint.hxx',
    'serialize/insert.cc',
    'serialize/insert.hh',
    'serialize/insert.hxx',
    'serialize/fwd.hh',
    'system/platform.hh',
    'system/system.hh',
    'types.hh',
    'utility/Duration.cc',
    'utility/Duration.hh',
    'utility/Duration.hxx',
    'utility/HTTP.cc',
    'utility/HTTP.hh',
    'utility/Parser.cc',
    'utility/Parser.hh',
    'utility/Parser.hxx',
    'utility/Product.hh',
    'utility/Settings.cc',
    'utility/Settings.hh',
    'utility/Time.cc',
    'utility/Time.hh',
    'utility/Time.hxx',
    'utility/URI.hh',
    'utility/Unicode-unix.cc',
    'utility/Unicode.hh',
    'utility/Utility.hh',
    'utility/fwd.hh',
    'HttpClient.cc',
    'HttpClient.hh',
    'HttpClient.hxx',
   )

  lib_static = drake.cxx.StaticLib('lib/elle', sources, cxx_toolkit, cxx_config)
  lib_dynamic = drake.cxx.DynLib('lib/elle', sources, cxx_toolkit, cxx_config)
