#!/usr/bin/env python3

import os
import sys
root = os.path.dirname(__file__)
drake = os.path.abspath(os.path.join(root, '../../elle/drake/src'))
sys.path.insert(0, drake)

import resource
resource.setrlimit(resource.RLIMIT_NOFILE, (500, -1))

import drake
import drake.cxx
import drake.cxx.boost

# Must set environment variables before setting up toolkit.
# /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS8.1.sdk
os.environ['DEVELOPER_DIR'] = '/Applications/Xcode.app/Contents/Developer'
os.environ['CROSS_TOP'] = '%s/Platforms/iPhoneOS.platform/Developer' % os.environ['DEVELOPER_DIR']
os.environ['CROSS_SDK'] = 'iPhoneOS8.1.sdk'
os.environ['SDKROOT'] = '%s/SDKs/%s' % (os.environ['CROSS_TOP'], os.environ['CROSS_SDK'])
os.environ['TOOLCHAINS'] = ''
os.environ['IOS_DEPLOYMENT_TARGET'] = '7.0'

with drake.Drake('../..') as d:
  cxx_compiler = os.getenv('CXX', 'clang++')
  c_compiler = os.getenv('CC', 'clang')
  cxx_toolkit = drake.cxx.GccToolkit(compiler = cxx_compiler,
                                     compiler_c = c_compiler,
                                     archiver = 'libtool',
                                     archiver_flags = ['-static', '-o'],
                                     ranlib = False)
  archs = ['armv7']
  cxx_config = drake.cxx.Config()
  cxx_config.enable_debug_symbols()
  cxx_config.enable_optimization(False)
  for arch in archs:
    cxx_config.flag('-arch')
    cxx_config.flag('%s' % arch)
  cxx_config.flag('-ftemplate-depth=512')
  cxx_config.flag('-std=c++11')
  cxx_config.flag('-stdlib=libc++')
  cxx_config.flag('-miphoneos-version-min=7.0')
  cxx_config.flag('--sysroot=%s' % os.environ['SDKROOT'])
  cxx_config.warnings.overloaded_virtual = False

  d.run(cxx_toolkit,
        cxx_config,
        archs = archs,
        python3 = False,
  )
