#! /usr/bin/env python3

import infinit.oracles.servers
import os
import state
import utils
import unittest
import time
import datetime
import reactor
import shutil
import filecmp
import tempfile
import traceback
import sys
import threading

from utils import expect_raise

ELLE_LOG_COMPONENT = 'test'

def exiter():
  print('#################### EXIT #############')
  os._exit(1)
# Setup emergency timeout in case teardown gets stuck
abort_timer = threading.Timer(600, exiter)

def transaction_callback(notification, state, rules, default_action,
                         statuses=None):
  """ Receives a transaction notification and potentially reply with an action
  Rules is of the form [{'condition':{'key': NOTIF_FIELD, 'value': EXPECTED_VALUE}, 'action': ACTION_NAME}]
  ACTION_NAME is a transaction action among accept,reject,join,cancel,pause,interrupt,reset
  NOTIF_FIELD is one of the keys in the notification
  @param statuses: updated with id->status
  """
  if statuses is not None:
    # in case messages are async, ensure we do not overwrite a final state
    if statuses.get(notification['transaction_id'], '') not in final_statuses:
      statuses[notification['transaction_id']] = notification['status']
  #print('TRANSACTION_CB %s transaction_id=%s status=%s' % (len(statuses), notification['transaction_id'], notification['status']))
  action = default_action
  for r in rules:
    for cond in r['conditions']:
      k = cond['key']
      v = cond['value']
      if notification.get(k, '<unset>') != v:
        break
      action = r['action']
  if action:
    #print('TRANSACTION_CB replying %s' % action)
    getattr(state, 'transaction_' + action)(notification['transaction_id'])


class TemporaryData:
  """ Create temporary file(s) with given names and sizes

  @param name,names: File names (may contain directory elements)

  Will make the following properties available:
  full_path : full path of first file
  full_pathes: full path of all files
  directory: Directory containing generated files (and nothing else)
  """
  def __init__(self, name=None, size=None, names = []):
    self.size = size
    self.names = names
    if name is not None:
      self.names = [name] + self.names
    self.full_path = None
    self.full_pathes = []
    if size is None:
      raise Exception('Size must be set')
  def __enter__(self):
    self.directory = tempfile.mkdtemp('infinit-test-files')
    for n in self.names:
      path = os.path.join(self.directory, n)
      d = os.path.dirname(path)
      # Makedirs fail if last component exists with incorrect mode
      if len(os.path.dirname(n)):
        os.makedirs(d,  exist_ok = True)
      self.full_pathes.append(path)
      with open(path, 'wb') as f:
        f.write(bytes('a'* self.size,'ascii'))
    self.full_path = self.full_pathes[0]
    return self
  def __exit__(self, *args, **kvargs):
    shutil.rmtree(self.directory)

# Callable that compares two files or directories for identical content.
class FileMatch:
  def __init__(self, f1, f2):
    self.f1 = f1
    self.f2 = f2
  def explain(self):
    for p in [self.f1, self.f2]:
      print('------- %s (%s)' % (p, os.path.exists(p)))
      for (dirpath, dirnames, filenames) in os.walk(p):
        for f in filenames:
          full = os.path.join(dirpath, f)
          print('%s: %s' % (full, os.path.getsize(full)))
    print('--------')
  def __call__(self):
    try:
      if os.path.isdir(self.f1):
        # Join the relative content file names in both dirs
        content = set()
        for p in [self.f1, self.f2]:
          for (dirpath, dirnames, filenames) in os.walk(p):
            rel = os.path.relpath(dirpath, p)
            for f in filenames:
              content.add(os.path.join(rel, f))
        (ok, fail, err) = filecmp.cmpfiles(self.f1, self.f2, list(content), shallow = False)
        return len(fail) == 0 and len(err) == 0
      else:
        return filecmp.cmp(self.f1, self.f2, list(content), shallow = False)
    except Exception as e:
      return False # Probably one of them do not exist

def check_explain(checker):
  """ Run the checker in verbose mode if possible
  """
  val = checker()
  if not val and hasattr(checker, 'explain'):
    checker.explain()
  return val

def wait_helper(timeout, condition, raise_on_timeout = True):
  result = advance([], timeout, condition)
  if not result and raise_on_timeout:
    raise Exception('timeout of %s reached' % timeout)

# Run the test until timeout in seconds or condition becomes true
def advance(states, timeout, condition):
  i = 0
  while i < timeout * 10 and not condition():
    for s in states:
      s.poll()
    reactor.sleep(datetime.timedelta(milliseconds = 100))
    i = i +1
  return condition()

final_statuses = ['transaction_finished', 'transaction_failed',
                  'transaction_canceled', 'transaction_rejected']

accept_rules = [{'conditions':[{'key': 'status',
                                'value': 'transaction_waiting_accept'}],
                 'action': 'accept'}]

reject_rules = [{'conditions':[{'key': 'status',
                                'value': 'transaction_waiting_accept'}],
                 'action': 'reject'}]

test_credentials = [('mefyl@infinit.io', 'mefyl'), ('mefyl2@infinit.io', 'mefyl2')]

class TransferPeer:
  """ Handles one peer, expecting only one transaction at most.
  """
  def __init__(self, oracles, credentials):
    self.oracles = oracles
    self.credentials = credentials
    self.state = None
    self.statuses = dict() # transaction_id -> status
    self.rules = []
    self.poll_thread = None
    self.interrupt = False
  def create(self, force=True):
    if self.state is not None and not force:
      return
    self.delete()
    self.state = self.oracles.state()
    self.state.attach_transaction_callback(
      lambda t: transaction_callback(t, self.state, self.rules, '',
                                     self.statuses))
    def poller():
      while not self.interrupt:
        self.state.poll()
        reactor.sleep(datetime.timedelta(milliseconds = 100))
    self.poll_thread = reactor.Thread('state_poller', poller)
  def delete(self):
    if self.state is None:
      return
    self.state.logout()
    self.interrupt = True
    self.poll_thread.wait()
    self.interrupt = False
    self.poll_thread = None
    self.state = None
  def set_rules(self, rules):
    """ Set event reply rules as per attach_transaction_callback()"""
    self.rules[:] = rules # modify in place
  def login(self):
    self.create(force=False)
    self.state.login(self.credentials[0],
      state.hash_password(self.credentials[0], self.credentials[1]))
  def logout(self):
    if self.state is None:
      return
    self.state.logout()
  def wait_transaction_id(self, timeout=10):
    """ Wait for a transaction id to be available or throw"""
    wait_helper(timeout, lambda: len(self.statuses))
    return list(self.statuses.keys())[0]
  def wait_transaction_progress(self, progress, timeout=1000):
    """ Wait for transaction progress to be above given threshold or throw"""
    tid = self.wait_transaction_id(timeout)
    return wait_helper(timeout, lambda: self.state.transaction_progress(tid) >= progress)
  def wait_transaction_status(self, status, timeout=1000):
    tid = self.wait_transaction_id(timeout)
    return wait_helper(timeout, lambda: self.statuses[tid] == status)
  def wait_transaction_final(self, timeout=1000):
    tid = self.wait_transaction_id(timeout)
    return wait_helper(timeout, lambda: self.statuses[tid] in final_statuses)
  @property
  def status(self):
    tid = self.wait_transaction_id(1000)
    return self.statuses[tid]
    #Note: we could also fetch from state.transaction_status(tid)
  @property
  def transaction(self):
    """ Return the transaction metadata"""
    tid = self.wait_transaction_id(1000)
    return self.state.transaction(tid)

class Transfer:
  def __init__(self, credentials, files, *args, **kvargs):
    self.files = files
    self.data_args = args
    self.data_kvargs = kvargs
    self.peers = [None, None]
    self.credentials = credentials
  def __enter__(self):
    self.oracles = infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS'])
    self.oracles.__enter__()
    self.data = TemporaryData(*self.data_args, **self.data_kvargs)
    self.data.__enter__()
    self.files = list(map(lambda x: os.path.join(self.data.directory, x), self.files))
    self.peers = [TransferPeer(self.oracles, self.credentials[0]),
                  TransferPeer(self.oracles, self.credentials[1])]
    self.peers[0].create()
    self.peers[1].create()
    return self
  def __exit__(self, *args, **kvargs):
    self.data.__exit__()
    self.oracles.__exit__()
  def start(self):
    self.sender.state.send_files(self.credentials[1][0], self.files, "Receive this.")
  @property
  def sender(self):
    return self.peers[0]
  @property
  def recipient(self):
    return self.peers[1]
  def wait_transaction_final(self, timeout):
    """ Wait for a final state on both ends"""
    self.sender.wait_transaction_final(timeout)
    self.recipient.wait_transaction_final(timeout)
    # We can get the final state notification with still transaction threads
    # running, and they don't like beings asploded. Yes its a bug of some sort.
    reactor.sleep(datetime.timedelta(milliseconds = 300))
  def assertSuccess(self, test, total_size = None, is_directory = None,
                    files_count = None, files = None):
    test.assertEqual(self.recipient.status, 'transaction_finished')
    test.assertEqual(self.sender.status, 'transaction_finished')
    ts = self.sender.transaction
    tr = self.recipient.transaction
    expect = {
      'message': 'Receive this.',
      'recipient_fullname': test_credentials[1][0].split('@')[0],
      'sender_fullname': test_credentials[0][0].split('@')[0],
    };
    if total_size is not None:
      expect['total_size'] = total_size
    if is_directory is not None:
      expect['is_directory'] = is_directory
    if files_count is not None:
      expect['files_count'] = files_count
    if files is not None:
      expect['files'] = files
    # Filter out unexpected keys
    ts = { k: ts[k] for k in expect.keys() }
    tr = { k: tr[k] for k in expect.keys() }
    test.assertEqual(ts, expect)
    test.assertEqual(tr, expect)
    test.assertTrue(check_explain(
      FileMatch(self.data.directory, self.oracles.download_dir)))

class TestTransfer(unittest.TestCase):
  def transfer_test(self, files, files_data,
                    total_size = None, is_directory = None,
                    files_count = None):
    with Transfer(test_credentials, files,
                  **files_data) as transfer:
      transfer.recipient.login()
      transfer.sender.login()
      wait_helper(3, lambda: False, False)
      transfer.recipient.set_rules(accept_rules)
      transfer.start()
      transfer.wait_transaction_final(30)
      transfer.assertSuccess(self, total_size, is_directory, files_count)

  def test_p2p_basic(self):
    return self.transfer_test(['100k'], {'name': '100k','size': 100000},
                              total_size=100000, files_count=1,
                              is_directory = False
                              )
  def test_p2p_multiples(self):
    return self.transfer_test([''], {'names': list(map(str, range(10))), 'size':100})
  def test_p2p_multiples_2(self): # Pass file names instead of dir to send_files
    names = list(map(str, range(10)))
    return self.transfer_test(names, {'names': names, 'size':100})
  def test_p2p_many_files(self):
    names = list(map(str, range(200)))
    return self.transfer_test(names, {'names': names, 'size':100})
  def test_p2p_empty_files(self):
    names = list(map(str, range(10)))
    return self.transfer_test(names, {'names': names, 'size':0})
utils.run(unittest.main)

