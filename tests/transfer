#! /usr/bin/env python3

import infinit.oracles.servers
import reactor
import elle.log

import os
import state
import utils
import unittest
import time
import datetime
import tempfile
import traceback
import sys
import threading

from utils import expect_raise, TemporaryData, FileMatch

ELLE_LOG_COMPONENT = 'test'

def exiter():
  print('#################### EXIT #############')
  os._exit(1)
# Setup emergency timeout in case teardown gets stuck
abort_timer = threading.Timer(600, exiter)

def transaction_callback(notification, state, rules, default_action,
                         statuses=None):
  """ Receives a transaction notification and potentially reply with an action
  Rules is of the form [{'condition':{'key': NOTIF_FIELD, 'value': EXPECTED_VALUE}, 'action': ACTION_NAME}]
  ACTION_NAME is a transaction action among accept,reject,join,cancel,pause,interrupt,reset
  NOTIF_FIELD is one of the keys in the notification
  @param statuses: updated with id->status
  """
  if statuses is not None:
    # in case messages are async, ensure we do not overwrite a final state
    if statuses.get(notification['transaction_id'], '') not in final_statuses:
      statuses[notification['transaction_id']] = notification['status']
  #print('TRANSACTION_CB %s transaction_id=%s status=%s' % (len(statuses), notification['transaction_id'], notification['status']))
  action = default_action
  for r in rules:
    for cond in r['conditions']:
      k = cond['key']
      v = cond['value']
      if notification.get(k, '<unset>') != v:
        break
      action = r['action']
  if action:
    #print('TRANSACTION_CB replying %s' % action)
    getattr(state, 'transaction_' + action)(notification['transaction_id'])



def check_explain(checker):
  """ Run the checker in verbose mode if possible
  """
  val = checker()
  if not val and hasattr(checker, 'explain'):
    checker.explain()
  return val

def wait_helper(timeout, condition, raise_on_timeout = True):
  result = advance([], timeout, condition)
  if not result and raise_on_timeout:
    raise Exception('timeout of %s reached' % timeout)

# Run the test until timeout in seconds or condition becomes true
def advance(states, timeout, condition):
  if timeout is None:
    timeout = 10000 # whatever, global test timeout will kill us
  i = 0
  while i < timeout * 10 and not condition():
    for s in states:
      s.poll()
    reactor.sleep(datetime.timedelta(milliseconds = 100))
    i = i +1
  return condition()

final_statuses = ['transaction_finished', 'transaction_failed',
                  'transaction_canceled', 'transaction_rejected']

accept_rules = [{'conditions':[{'key': 'status',
                                'value': 'transaction_waiting_accept'}],
                 'action': 'accept'}]

reject_rules = [{'conditions':[{'key': 'status',
                                'value': 'transaction_waiting_accept'}],
                 'action': 'reject'}]

test_credentials = [('mefyl@infinit.io', 'mefyl', 'mefyl'), ('mefyl2@infinit.io', 'mefyl2', 'mefyl2')]

if os.environ.get('TEST_CREDENTIALS', None) is not None:
  c = os.environ['TEST_CREDENTIALS']
  c = c.split(',')
  test_credentials = [(c[0], c[1], c[2]), (c[3], c[4], c[5])]

class TransferPeer:
  """ Handles one peer, expecting only one transaction at most.
  """
  def __init__(self, oracles, credentials, timeout = None, device_count = 1):
    self.oracles = oracles
    self.credentials = credentials
    self.states = [None] * device_count # Per device states.
    self.statuses = dict() # transaction_id -> status
    self.rules = [[]] * device_count # Per device rules.
    self.poll_threads = [None] * device_count # Per device polling thread.
    self.interrupt = [False] * device_count # Interrupts for polling threads.
    self.logged_in = [] # List of devices logged in.
    self.transaction_uid = None # unique id of transaction
    self.timeout = timeout
    self.device_count = device_count
  def create(self, force = True, device = 0):
    if self.states[device] is not None and not force:
      return
    self.delete(device)
    self.states[device] = self.oracles.state()
    self.states[device].attach_transaction_callback(
      lambda t: transaction_callback(t, self.states[device], self.rules[device], '',
                                     self.statuses))
    def poller():
      while not self.interrupt[device]:
        self.states[device].poll()
        reactor.sleep(datetime.timedelta(milliseconds = 100))
    self.poll_threads[device] = reactor.Thread('state_poller[%s]' % device, poller)
  def delete(self, device):
    if self.states[device] is None:
      return
    self.states[device].logout()
    self.interrupt[device] = True
    self.poll_threads[device].wait()
    self.interrupt[device] = False
    self.poll_threads[device] = None
    self.states[device] = None
  def set_rules(self, rules, device = 0):
    """ Set event reply rules as per attach_transaction_callback()"""
    self.rules[device] = rules # modify in place
  def login(self, device = 0):
    if device in self.logged_in:
      return
    self.create(force = False, device = device)
    self.statuses = dict() #old transaction_id no longuer has sense
    self.states[device].login(self.credentials[0],
      state.hash_password(self.credentials[0], self.credentials[1]))
    self.logged_in.append(device)
  def logout(self, device = 0):
    if device not in logged_in:
      return
    if len(self.statuses) and self.transaction_uid is None:
      # store transaction uid so that we can recover transaction even
      # without any notification
      self.transaction_uid = self.transaction['id']
    self.states[device].logout()
    self.logged_in.remove(device)
  def check_progress(self, tid, progress, device = 0):
    """ Check if progress greater than value, throw if it can never be"""
    if self.status == 'transaction_finished' or self.states[device].transaction_progress(tid) >= progress:
      return True
    elle.log.trace('Progress is %s' % self.state.transaction_progress(tid))
    if self.status in final_statuses:
      raise Exception('Progress unreachable: state=%s, at %s, expect %s'
        % (self.status, self.states[device].transaction_progress(tid), progress))
    return False
  def fetch_transaction_id(self, device = 0):
    """ Try to obtain tid or None"""
    if len(self.statuses):
      return list(self.statuses.keys())[0]
    if self.transaction_uid:
      id = self.states[device].find_transaction(self.transaction_uid)
      if id != -1:
        return id
    return None
  def wait_transaction_id(self, timeout = 10, device = 0):
    """ Wait for a transaction id to be available or throw"""
    wait_helper(timeout, lambda: self.fetch_transaction_id(device) is not None)
    return self.fetch_transaction_id(device)
  def wait_transaction_progress(self, progress, timeout = None, device = 0):
    """ Wait for transaction progress to be above given threshold or throw"""
    tid = self.wait_transaction_id(timeout = timeout or self.timeout, device = device)
    return wait_helper(timeout or self.timeout, lambda: self.check_progress(tid, progress, device))
  def wait_transaction_status(self, status, timeout = None):
    return wait_helper(timeout or self.timeout, lambda: self.status == status)
  def wait_transaction_final(self, timeout = None):
    return wait_helper(timeout or self.timeout, lambda: self.status in final_statuses)
  @property
  def status(self, device = 0):
    """ Transaction status string (transaction_{canceled, finished, started...)"""
    tid = self.wait_transaction_id(device = device)
    if device in self.logged_in:
      return self.states[device].transaction_status(tid)
    else:
      return self.statuses[tid]
  @property
  def transaction(self, device = 0):
    """ Return the transaction metadata"""
    tid = self.wait_transaction_id(device)
    return self.states[device].transaction(tid)

class Transfer:
  def __init__(self,
               credentials,
               files,
               files_data,
               message = None,
               timeout = None,
               sender_devices = 1,
               recipient_devices = 1):
    self.files = files
    self.data_kvargs = files_data
    self.peers = [None, None]
    self.credentials = credentials
    self.message = message or 'Receive this.'
    self.timeout = timeout
    self.sender_devices = sender_devices
    self.recipient_devices = recipient_devices
  def __enter__(self):
    self.oracles = infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS'])
    self.oracles.__enter__()
    # WARNING: 0 delay occurred at this stage: trophonius is not logged in yet
    reactor.sleep(datetime.timedelta(milliseconds = 1000))
    self.data = TemporaryData(**self.data_kvargs)
    self.data.__enter__()
    self.files = list(map(lambda x: os.path.join(self.data.directory, x), self.files))
    self.peers = [
      TransferPeer(self.oracles, self.credentials[0], timeout = self.timeout, device_count = self.sender_devices),
      TransferPeer(self.oracles, self.credentials[1], timeout = self.timeout, device_count = self.recipient_devices)]
    for i in range(0, self.sender_devices):
      self.peers[0].create(device = i)
    for i in range(0, self.recipient_devices):
      self.peers[1].create(device = i)
    return self
  def __exit__(self, *args, **kvargs):
    self.data.__exit__()
    self.oracles.__exit__()
  def start(self, device = 0):
    self.sender.states[device].send_files(self.credentials[1][0],
                                          self.files,
                                          self.message)
  @property
  def sender(self):
    return self.peers[0]
  @property
  def recipient(self):
    return self.peers[1]
  def trophonius_stop(self):
    elle.log.trace('stopping tropho')
    self.oracles.trophonius_stop()
  def trophonius_start(self):
    self.oracles.trophonius_start()
  def wait_transaction_final(self, timeout):
    """ Wait for a final state on both ends"""
    if self.sender.logged_in:
      self.sender.wait_transaction_final(timeout)
    if self.recipient.logged_in:
      self.recipient.wait_transaction_final(timeout)
    # We can get the final state notification with still transaction threads
    # running, and they don't like beings asploded. Yes its a bug of some sort.
    reactor.sleep(datetime.timedelta(milliseconds = 300))
  def assertSuccess(self, test, total_size = None, is_directory = None,
                    files_count = None, files = None,
                    validate_content = True):
    """ Validates transaction success, metadata content, disk file data"""
    ts = None
    tr = None
    if self.recipient.logged_in:
      test.assertEqual(self.recipient.status, 'transaction_finished')
      tr = self.recipient.transaction
    if self.sender.logged_in:
      test.assertEqual(self.sender.status, 'transaction_finished')
      ts = self.sender.transaction
    expect = {
      'message': self.message,
      'recipient_fullname': test_credentials[1][2],
      'sender_fullname': test_credentials[0][2],
    };
    if total_size is not None:
      expect['total_size'] = total_size
    if is_directory is not None:
      expect['is_directory'] = is_directory
    if files_count is not None:
      expect['files_count'] = files_count
    if files is not None:
      expect['files'] = files
    # Filter out unexpected keys
    if ts is not None:
      ts = { k: ts[k] for k in expect.keys() }
      test.assertEqual(ts, expect)
    if tr is not None:
      tr = { k: tr[k] for k in expect.keys() }
      test.assertEqual(tr, expect)
    if validate_content:
      test.assertTrue(check_explain(
        FileMatch(self.data.directory, self.oracles.download_dir)))
    elle.log.log('assertSuccess succeeded (%s)' %
      len(list(os.walk(self.oracles.download_dir))[0][2]))

class TestBasicTransfer(unittest.TestCase):
  def transfer_test(self, files, files_data,
                    expect_total_size = None, expect_is_directory = None,
                    expect_files_count = None, expect_files = None):
    """ Run one test transfer
    @param files: files to announce to send_files (relative)
    @param files_data: arguments to TemporaryData ctor
    Rest of parameters are stuff that will be validated in transaction metadata
    """
    with Transfer(test_credentials, files,
                  files_data) as transfer:
      transfer.recipient.login()
      transfer.sender.login()
      wait_helper(3, lambda: False, False)
      transfer.recipient.set_rules(accept_rules)
      transfer.start()
      transfer.wait_transaction_final(30)
      transfer.assertSuccess(self, expect_total_size, expect_is_directory,
                             expect_files_count, expect_files)

  def test_p2p_basic(self):
    return self.transfer_test(['100k'], {'name': '100k','size': 100000},
                              expect_total_size=100000, expect_files_count=1,
                              expect_is_directory = False
                              )
  def test_p2p_utf8(self):
    #  ['with spaces', 'accentséèà', 'weirdù©€£ ╕⡏']
    names = [b'with spaces', b'accents\xc3\xa9\xc3\xa8\xc3\xa0', b'weird\xc3\xb9\xc2\xa9\xe2\x82\xac\xc2\xa3 \xe2\x95\x95\xe2\xa1\x8f']
    names = list(map(lambda x: x.decode('utf-8'), names))
    return self.transfer_test([''], {'names': ['with spaces', 'accentséèà', 'weirdù©€£ ╕⡏'], 'size':100})
  def test_p2p_utf8_2(self):
    names = [b'with spaces', b'accents\xc3\xa9\xc3\xa8\xc3\xa0', b'weird\xc3\xb9\xc2\xa9\xe2\x82\xac\xc2\xa3 \xe2\x95\x95\xe2\xa1\x8f']
    names = list(map(lambda x: x.decode('utf-8'), names))
    return self.transfer_test(names, {'names': names, 'size': 100})
  def test_p2p_multiples(self):
    return self.transfer_test([''], {'names': list(map(str, range(10))), 'size':100})
  def test_p2p_multiples_2(self): # Pass file names instead of dir to send_files
    names = list(map(str, range(10)))
    return self.transfer_test(names, {'names': names, 'size':100})
  def test_p2p_many_files(self):
    names = list(map(str, range(200)))
    return self.transfer_test(names, {'names': names, 'size':100})
  def test_p2p_complex_layout(self):
    names = ['f1', 'd1/f2', 'd1/f1', 'd2/d3/f4', 'f2']
    return self.transfer_test([''], {'names': names, 'size':100})
  def test_p2p_complex_layout_2(self):
    names = ['f1', 'd1/f2', 'd1/f1', 'd2/d3/f4', 'f2']
    return self.transfer_test(['f1', 'd1', 'd2', 'f2'], {'names': names, 'size':100})
  def test_p2p_empty_files(self):
    names = list(map(str, range(10)))
    return self.transfer_test(names, {'names': names, 'size':0})
  def _test_p2p_apertus(self):
    # Fun fact, apertus is only accessible after it reported its bandwidth
    # for the first time (30s after start), so this test can't work without
    # some kind of hack
    os.environ['INFINIT_LOCAL_ADDRESS'] = '10.0.0.1'
    try:
      return self.transfer_test(['100k'], {'name': '100k','size': 100000},
                              expect_total_size=100000, expect_files_count=1,
                              expect_is_directory = False
                              )
    finally:
      del os.environ['INFINIT_LOCAL_ADDRESS']

class TestBasicTransferBig(TestBasicTransfer):
  def test_big_file(self):
    return self.transfer_test('big', {'names': ['big'], 'size': 5000000000}, timeout=500)

class TestResumeTransfer(unittest.TestCase):
  def parse_sequence(self, sequence):
    """ Parse a string with parse_sequence_string(), or a list made
        of strings and actions.
    """
    elle.log.trace('processing instruction sequence %s' % sequence)
    if isinstance(sequence, str):
      return self.parse_sequence_string(sequence)
    else:
      res = []
      for elem in sequence:
        elle.log.trace('list processing elem %s' % (elem))
        if isinstance(elem, str):
          res += self.parse_sequence_string(elem)
        else:
          res.append(('action', elem))
      return res
  def parse_sequence_string(self, sequence):
    """ Parse string and generate sequence of test instructions:
    s,r,S,R: logout/login for sender/recipient
    t,T: stop/start trophonius
    {s,r}<PERCENTAGE>: wait until given progress (ex: s100)
    d<MILLISECONDS>: delay given time
    start: start transfer (call send_files)

    Note: file size must be big enough for waits to be accurate
    Note: Starting point is sender logged in, recipient is not
    """
    s = sequence.split(' ')
    result = []
    e = ''
    lastWait = True # was last action pushed a wait
    def action(isWait, a): # append an action
      nonlocal lastWait
      if not isWait and not lastWait:
        result.append(('d', lambda t: wait_helper(1, lambda: False, False)))
      result.append((e, a))
      lastWait = isWait
    def isFloat(s):
      """ Integral value of argument or None"""
      try:
        return float(s)
      except:
        return None
    # Wrapper for proper argument capture
    def call(method_get, *args):
      return lambda t: method_get(t)(*args)
    for e in s:
      elle.log.trace('processing "%s"' % e)
      if e == 's':
        action(False, lambda t: t.sender.logout())
      elif e == 'r':
        action(False, lambda t: t.recipient.logout())
      elif e == 'S':
        action(False, lambda t: t.sender.login())
      elif e == 'R':
        action(False, lambda t: t.recipient.login())
      elif e == 'T':
        action(False, lambda t: t.trophonius_start())
      elif e == 't':
        action(False, lambda t: t.trophonius_stop())
      elif e == 'start':
        action(False, lambda t: t.start())
      elif isFloat(e) is not None:
        action(True, call(lambda t: t.sender.wait_transaction_progress, float(e) / 100.0))
      elif e[0] == 's' and isFloat(e[1:]) is not None:
        action(True, call(lambda t: t.sender.wait_transaction_progress, float(e[1:]) / 100.0))
      elif e[0] == 'r' and isFloat(e[1:]) is not None:
        action(True, call(lambda t: t.recipient.wait_transaction_progress, float(e[1:]) / 100.0))
      elif e[0] == 'd' and isFloat(e[1:]) is not None:
        action(True, call(lambda t: reactor.sleep, datetime.timedelta(milliseconds = int(e[1:]))))
      else:
        raise Exception('Unknown entry "%s"' % e)
    return result
  def transfer_test(self, files, files_data, sequence,
                    expect_total_size = None, expect_is_directory = None,
                    expect_files_count = None, expect_files = None,
                    message = None, timeout = None, assert_status = 'success',
                    validate_content = True):
    sequence = self.parse_sequence(sequence)
    with Transfer(test_credentials, files,
                  files_data, timeout=timeout, message=message) as transfer:
      transfer.sender.login()
      wait_helper(3, lambda: False, False) #FIXME reduce/remove this
      transfer.recipient.set_rules(accept_rules)
      for e in sequence:
        elle.log.trace('Executing %s(%s)' % (e[0], e[1]))
        e[1](transfer)
        elle.log.trace('Finished %s' % e[0])
      transfer.wait_transaction_final(timeout or 30)
      if assert_status == 'success':
        transfer.assertSuccess(self, expect_total_size, expect_is_directory,
                               expect_files_count, expect_files,
                               validate_content)
      elif assert_status == 'failed':
        self.assertEqual(transfer.sender.status, 'transaction_failed')
        self.assertEqual(transfer.recipient.status, 'transaction_failed')
      elif assert_status == 'canceled':
        if transfer.sender.logged_in:
          self.assertEqual(transfer.sender.status, 'transaction_canceled')
        if transfer.recipient.logged_in:
          self.assertEqual(transfer.recipient.status, 'transaction_canceled')
  #def test_self(self): # tests the test system
  #  return self.transfer_test(['100k'], {'name': '100k','size': 100000},
  #                            'R start 10 20 30 100',
  #                            expect_total_size=100000, expect_files_count=1)
  def fail_test_cloud_offline(self):
    # test with cloud subsystem not working
    # Test that both peers handle it gracefuly without failing the trasnaction
    return self.transfer_test(['tco'], {'name': 'tco','size': 1000000},
                              'start d5 s R S r50 r s R S',
                              message = 'infinit_test_fail_cloud',
                              expect_total_size=1000000, expect_files_count=1)
  def test_all_cloud(self): # sender and recipient are never logged in together
    return self.transfer_test(['100k'], {'name': '100k','size': 100000},
                              'start s100 s R r100 r S',
                              expect_total_size=100000, expect_files_count=1)
  def test_all_cloud_2(self): # final state variant
    return self.transfer_test(['100k'], {'name': '100k','size': 100000},
                              'start s100 s R r100 r S R',
                              expect_total_size=100000, expect_files_count=1)
  def test_all_cloud_3(self): # final state variant
    return self.transfer_test(['100k'], {'name': '100k','size': 100000},
                              'start s100 s R r100 r S R s',
                              expect_total_size=100000, expect_files_count=1)
  def test_all_cloud_many(self):
    names = list(map(str, range(50)))
    return self.transfer_test([''], {'names':  names, 'size': 100},
                              'start s100 s R r100 r S R',
                              expect_total_size=50*100, expect_files_count=1)
  def test_all_cloud_bigger(self):
    names = list(map(str, range(3)))
    return self.transfer_test([''], {'names':  names, 'size': 513000},
                              'start s100 s R r100 r S R',
                              expect_total_size=513000*3, expect_files_count=1)
  # Testing mode switch between p2p and cloud, requires bigger files
  # WARNING FIXME: depends heavily on available bandwith with cloud!
  def test_switch_recipient(self): #sender on, recipient flickers
    return self.transfer_test(['big'], {'name': 'big','size': 1000000},
                              'start s10 R s20 r s30 R s40 r s50 R s60 r s70 R s80 r s90 R')
  def test_switch_send_cloud(self):
    #sender all cloud, recipient on, sender flickers
    # recipient should get all from cloud and not be disturbed
    return self.transfer_test(['big'], {'name': 'big','size': 1000000},
                              'start s100 R r20 s r30 S r40 s r50 S r60 s r70 S r80 s r90 S')
  def test_switch_send_p2p(self):
    # sender flickers, recipient always on, no cloud
    # Note: cannot finish with S, sS sequence does not get the finished notification
    # because transaction goes to history and our python binding doesn't have that
    return self.transfer_test(['big'], {'name': 'big','size': 1000000},
                              'R start r10 s S r20 s S r30 s S r40 s S r50 s S r60 s S r70 s S r80 s S r90 s S r100 s',
                              timeout = 60)
  def test_switch_both(self):
    return self.transfer_test(['big'], {'name': 'big','size': 1000000},
                              'start s40 R r10 r s R r20 r R r30 r R r40 r S s80 s R r50 S')

  def _test_cancel_remove_sender_file(self, files, remove, pre_seq, timeout=10):
    """ Remove a file mid-test on sender side, and expects a cancelled state
    """
    def remove_file(t):
      filepath = os.path.join(t.data.directory, remove)
      os.remove(filepath)
    def disable_mirror(t): #Disable file mirroring feature, or delete will have no effect
      t.sender.state.configuration_set_max_mirror_size(1)
    # Use a file big enough so we dont miss a progress >0 and <1 with our polling
    return self.transfer_test(files, {'names': files,'size': 50000000},
                              [disable_mirror, pre_seq, remove_file],
                              timeout = timeout,
                              assert_status = 'canceled')
  def test_cancel_remove_sender_file_1(self): #remove currently being transfered
    self._test_cancel_remove_sender_file(['v1'], 'v1', 'R d500 start r0.000001')
  def test_cancel_remove_sender_file_2(self): #remove file further down
    self._test_cancel_remove_sender_file(['v1', 'v2'], 'v2', 'R d500 start r0.0001')
  def test_cancel_remove_sender_file_cloud_1(self): #remove currently being transfered
    self._test_cancel_remove_sender_file(['v1'], 'v1', 'start s0.0000001', timeout=100)
  def test_cancel_remove_sender_file_cloud_2(self): #remove file further down
    self._test_cancel_remove_sender_file(['v1', 'v2'], 'v2', 'start s0.0000001', timeout=100)
  def test_cancel_remove_after_buffered_ok(self):
    def remove_file(t):
      filepath = os.path.join(t.data.directory, remove)
      os.remove(filepath)
    return self.transfer_test(['v1'], {'names': ['v1'], 'size' : 100},
                              ['start s100',
                              lambda t: os.remove(os.path.join(t.data.directory, 'v1')),
                              'R'],
                              validate_content = False
                              )
  def _test_cancel_remove_recipient_file(self, files, remove, pre_seq, timeout=10, size=None):
    def remove_file(t):
      filepath = os.path.join(t.oracles.download_dir, remove)
      os.remove(filepath)
    # Use a file big enough so we dont miss a progress >0 and <1 with our polling
    return self.transfer_test(files, {'names': files,'size': size or 50000000},
                              [pre_seq, remove_file],
                              timeout = timeout,
                              assert_status = 'canceled')
  def test_cancel_remove_recipient_file_1(self):
    self._test_cancel_remove_recipient_file(['v1'], 'v1', 'R d500 start r0.000001')
  def test_cancel_remove_recipient_file_cloud(self):
    self._test_cancel_remove_recipient_file(['v1'], 'v1', 'start s100 R r0.000001', size=5000000)
  def test_cancel_no_such_file(self):
    return self.transfer_test(['canard'], {'names': ['coin'], 'size': 1},
                              'start',
                              assert_status = 'canceled')
  def test_cancel_no_such_path(self):
    return self.transfer_test(['canard/coin'], {'names': ['coin'], 'size': 1},
                              'start',
                              assert_status = 'canceled')
  def test_mirror_sender_file(self): # check sender file mirroring feature
    def remove_file(t):
      filepath = os.path.join(t.data.directory, 'foo')
      os.remove(filepath)
    def ensure_mirror(t):
      t.sender.state.configuration_set_max_mirror_size(60000000)
    return self.transfer_test(['foo'], {'name': 'foo','size': 50000000},
                              [ensure_mirror, 'R start r0.001', remove_file],
                              validate_content = False)

class TestNoTropho(TestResumeTransfer):
  def test_no_tropho_beg_1(self): #login then tropho down
    return self.transfer_test(['tnt1'], {'name': 'tnt1','size': 100000},
                              'R t start d1000 T')
  def login_fail(self, t):
    #login throws if no trophonius is available
    self.assertRaises(Exception, t.recipient.login)
    self.assertRaises(Exception, t.sender.login)
  def test_no_tropho_beg_2(self): #login fails when tropho down
    return self.transfer_test(['tnt2'], {'name': 'tnt2','size': 100000},
                              ['s t', self.login_fail, 'T S R start d1000 T'])
  def test_no_tropho_mid(self): # start then tropho down
    return self.transfer_test(['tnt3'], {'name': 'tnt3','size': 10000000},
                              'R start r20 t T r30 t T r40 t T r50 t T r60 t T r70 t T r80 t T')

class MutiDeviceBasicTransfer(unittest.TestCase):
  def transfer_test(self, files, files_data,
                    expect_total_size = None, expect_is_directory = None,
                    expect_files_count = None, expect_files = None):
    """ Run one test transfer
    @param files: files to announce to send_files (relative)
    @param files_data: arguments to TemporaryData ctor
    Rest of parameters are stuff that will be validated in transaction metadata
    """
    with Transfer(test_credentials,
                  files,
                  files_data,
                  sender_devices = 2,
                  recipient_devices = 2) as transfer:
      transfer.recipient.login(device = 0)
      # transfer.recipient.login(device = 1)
      transfer.sender.login(device = 0)
      transfer.sender.login(device = 1)
      wait_helper(3, lambda: False, False)
      transfer.recipient.set_rules(accept_rules, device = 0)
      transfer.start(device = 0)
      transfer.wait_transaction_final(30)
      transfer.assertSuccess(self, expect_total_size, expect_is_directory,
                             expect_files_count, expect_files)

  def test_p2p_basic(self):
    return self.transfer_test(['100k'], {'name': '100k','size': 100000},
                              expect_total_size=100000, expect_files_count=1,
                              expect_is_directory = False
                              )

utils.run(unittest.main)

