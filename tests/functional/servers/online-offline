#!/usr/bin/env python3.2

import hashlib
import utils
import time
import plasma
import pythia
import itertools

ADMIN_TOKEN = pythia.constants.ADMIN_TOKEN

count = 0

def hash_password(login, password):
    to_hash = login + "MEGABIET" + password + login + "MEGABIET"
    return hashlib.sha256(to_hash.encode()).hexdigest()

def new_swagger_callback(expected, user_id):
    assert(expected == user_id)
    global count
    count += 1

trophonius_control_port = 39075

with utils.Servers() as (meta, tropho):

    proto, addr, port = meta.url.split(":")
    addr = addr.replace('/', '')
    port = port.replace('/', '')

    admin = plasma.Meta("127.0.0.1", int(port))
    print(ADMIN_TOKEN)
    admin.token = ADMIN_TOKEN
    def register(i):
        meta_client = plasma.Meta("127.0.0.1", int(port))
        email = 'user{}@infinit.io'.format(i)
        password = hash_password(email, 'user')
        res = meta_client.register(email, "User Name",
                password, "bitebite")
        assert res.success
        login = meta_client.login(email, password)
        assert login.success
        return meta_client

    def create_users(number):
        users = []
        for i in range(number):
            users.append(register(i))
        return users

    user_list = create_users(2)
    for u1, u2 in itertools.combinations(user_list, 2):
        admin.add_swaggers(u1.self().id, u2.self().id)

    def create_device(user):
        res = user.create_device("device");
        return res.id

    def connect_tropho(user, device_id):
        res = plasma.Trophonius(tropho.host, tropho.port, lambda: None)
        res.connect(user.self().id, user.token, device_id)
        return res

    tropho_connections = []
    for user in user_list:
        device = create_device(user)
        tropho_connections.append(connect_tropho(user, device))

    def poll(client):
        notifications = []
        notif = client.poll()
        while notif is not None:
            notifications.append(notif)
            notif = client.poll()
        return notifications

    import time
    user_status = 0
    import itertools as it
    for i in range(10):
        notifs = list(map(poll, tropho_connections))
        print(*notifs)
        for n in it.chain(*notifs):
            if n.type == 'user_status' and n.status == True:
                user_status += 1
        time.sleep(.5)

    print(user_status)
    assert user_status == 2
