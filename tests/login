#! /usr/bin/env python3

import infinit.oracles.servers
import os
import state
import utils
import unittest

import reactor
import datetime

import requests
import json

import pymongo
import pymongo.collection
import pymongo.database
import pymongo.errors

from utils import expect_raise

class TestLogin(unittest.TestCase):

  def test_login(self):
    with infinit.oracles.servers.Oracles(
        mongo_dump = '%s/one-user' % os.environ['DUMPS']) as o:
      s = o.state()
      expect_raise(lambda: s.login('mefyl@infinit.io', 'lol'))
      expect_raise(lambda: s.login('mefyl@infinit.com', 'mefyl'))
      s.login('mefyl@infinit.io', 'mefyl')
      self.assertTrue(s.logged_in())
      users = s.users();
      self.assertEqual(len(users), 1)
      me = iter(users.values()).__next__()
      self.assertEqual(me['fullname'], 'mefyl')
      self.assertEqual(me['handle'], 'mefyl')

  def test_login_abort(self):
    import state
    import reactor
    del os.environ['INFINIT_DOWNLOAD_DIR']
    s = state.State('http', '127.0.0.1', 42)
    rresult = []
    def login():
      try:
        # this login call will block forever on its own
        try:
          result = s.login('foo', 'bar')
        except:
          result = False
        rresult.append(result)
      except Exception as e:
        print(e)
    t = reactor.Thread('login', login)
    reactor.sleep(datetime.timedelta(milliseconds = 500))
    self.assertEqual([], rresult)
    s.logout() # should make login abort
    reactor.sleep(datetime.timedelta(milliseconds = 500))
    self.assertEqual([False], rresult)

  def test_login_retry(self):
    # test automatic retry on trophonius down
    with infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS']) as o:
      s1 = o.state()
      s1.reconnection_cooldown(datetime.timedelta(milliseconds=100))
      last_statuses = []
      def status(s):
        print('Status update: %s' % s)
        last_statuses.append(s)
      s1.attach_connection_callback(status)
      s1.login('mefyl@infinit.io', 'mefyl')
      self.assertTrue(s1.logged_in())
      o.kill_trophonius()
      reactor.sleep(datetime.timedelta(milliseconds = 500))
      for i in range(10):
        s1.poll()
      self.assertFalse(last_statuses[-1]['status'])
      self.assertTrue(last_statuses[-1]['still_trying'])
      o.resurect_trophonius()
      reactor.sleep(datetime.timedelta(seconds = 5))
      for i in range(10):
        s1.poll()
      self.assertTrue(s1.logged_in())
      self.assertTrue(last_statuses[-1]['status'])

  def test_login_retry2(self):
    # test automatic retry on everything down
    with infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS'],
      with_apertus = False) as o:
      s1 = o.state()
      s1.reconnection_cooldown(datetime.timedelta(milliseconds=100))
      last_statuses = []
      def status(s):
        print('Status update: %s' % s)
        last_statuses.append(s)
      s1.attach_connection_callback(status)
      s1.login('mefyl@infinit.io', 'mefyl')
      self.assertTrue(s1.logged_in())
      o.kill_trophonius()
      o.kill_meta()
      reactor.sleep(datetime.timedelta(milliseconds = 500))
      for i in range(10):
        s1.poll()
      self.assertFalse(last_statuses[-1]['status'])
      self.assertTrue(last_statuses[-1]['still_trying'])
      o.resurect_meta()
      o.resurect_trophonius()
      reactor.sleep(datetime.timedelta(seconds = 5))
      for i in range(10):
        s1.poll()
      self.assertTrue(s1.logged_in())
      self.assertTrue(last_statuses[-1]['status'])

  def test_login2(self):
    with infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS']) as o:
      #Remove abtests
      mongo = pymongo.MongoClient(host='127.0.0.1', port=o._mongo.port)
      mongo.meta.abtest.remove({})
      s1 = o.state()
      s1.login('mefyl@infinit.io', 'mefyl')
      s2 = o.state()
      s2.login('mefyl2@infinit.io', 'mefyl2')
      self.assertEqual(s1.features(), {'test_feature': '1'})
      self.assertEqual(s2.features(), {})
      self.assertEqual(s1.features(), {'test_feature': '1'})
      users1 = s1.users()
      self.assertEqual(len(users1), 1)
      self.assertEqual(len(s1.swaggers()), 0)
      users2 = s2.users()
      self.assertEqual(len(users2), 1)

  def test_login_fail(self):
    with infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS']) as o:
      s = o.state()
      expect_raise(lambda: s.login("nosuchuser@infinit.io", 'foobar'))

  def test_login_change_password(self):
    with infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS']) as o:
      s = o.state()
      last_statuses = []
      def status(s):
        print('Status update: %s' % s)
        last_statuses.append(s)
      s.attach_connection_callback(status)
      s.login('mefyl@infinit.io', 'mefyl')
      for i in range(10):
        s.poll()
      self.assertTrue(last_statuses[-1]['status'])
      s.change_password(state.hash_password('mefyl@infinit.io', 'mefyl'),
                        state.hash_password('mefyl@infinit.io', 'newpassword'))
      for i in range(10):
        s.poll()
        reactor.sleep(datetime.timedelta(milliseconds = 100))
      self.assertFalse(last_statuses[-1]['status'])
      self.assertFalse(s.logged_in())
      s.login('mefyl@infinit.io', 'newpassword')
      for i in range(10):
        s.poll()
      self.assertTrue(last_statuses[-1]['status'])
      self.assertTrue(s.logged_in())

  def test_login_tropho_disconnect(self):
    import platform
    if platform.system() == 'Windows':
      return
    os.environ['TROPHONIUS_LISTEN_SIGNALS'] = '1'
    with infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS']) as o:
      s = o.state()
      last_statuses = []
      def status(s):
        print('Status update: %s' % s)
        last_statuses.append(s)
      s.attach_connection_callback(status)
      s.login('mefyl@infinit.io', 'mefyl')
      for i in range(10):
        s.poll()
      self.assertTrue(last_statuses[-1]['status'])
      last_statuses.clear()
      import signal
      import threading
      #send SIGUSR1 to tropho
      signal.pthread_kill(threading.get_ident(), signal.SIGUSR1)
      for i in range(10):
        s.poll()
        reactor.sleep(datetime.timedelta(milliseconds = 100))
      self.assertEqual(len(last_statuses), 2)
      self.assertTrue(last_statuses[0]['still_trying'])
      self.assertFalse(last_statuses[0]['status'])
      self.assertTrue(last_statuses[1]['status'])
    os.environ['TROPHONIUS_LISTEN_SIGNALS'] = ''
  def test_register(self):
    with infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS']) as o:
      s1 = o.state()
      s1.register('mefyl3', 'mefyl3@infinit.io', 'mefyl3')
      s1.logout()
      s2 = o.state()
      s2.login('mefyl3@infinit.io', 'mefyl3')
      f = s2.features()
      keys = list(f.keys())
      keys.sort()
      self.assertEqual(keys, ['testa', 'testb', 'testl'])
      self.assertEqual(f['testb'], 'val')
      self.assertTrue(f['testa'] in ['v1', 'v2'])
      self.assertEqual(f['testl'], 'ok')

  def test_features(self):
    with infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS']) as o:
      # test that features are injected at login
      s2 = o.state()
      s2.login('mefyl2@infinit.io', 'mefyl2')
      f = s2.features()
      keys = list(f.keys())
      keys.sort()
      self.assertEqual(keys, ['testa', 'testb']) # no testl
      self.assertEqual(f['testb'], 'val')
      self.assertTrue(f['testa'] in ['v1', 'v2'])

  def test_features_reroll(self):
    """ Check we eventually get both possible values when rerolling."""
    with infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS']) as o:
      vals = set()
      for i in range(20):
        s = o.state()
        # Invoke the features roller, in force mode
        r = requests.post('%s://%s:%s/features' % o.meta,
                        data=json.dumps({'reroll': '1'}),
                        headers = {'content-type': 'application/json'})
        self.assertEqual(r.status_code, 200)
        s.login('mefyl2@infinit.io', 'mefyl2')
        f = s.features()
        self.assertTrue('testa' in f.keys())
        vals.add(f['testa'])
        if len(vals) == 2:
          break;
        s.logout()
      self.assertEqual(vals, set(['v1', 'v2']))

  def test_features_reroll_custom(self):
    with infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS']) as o:
      r = requests.post('%s://%s:%s/features' % o.meta,
                        data=json.dumps({'reroll': '1',
                                        'abtests': [{'key': 'testc', 'value': '1'},
                                                    {'key':'testa', 'value':'v3'}]}),
                        headers = {'content-type': 'application/json'})
      self.assertEqual(r.status_code, 200)
      s = o.state()
      s.login('mefyl2@infinit.io', 'mefyl2')
      f = s.features()
      self.assertTrue('testc' in f.keys())
      self.assertEqual(f['testa'], 'v3')

  def test_features_remove(self):
    with infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS']) as o:
      r = requests.delete('%s://%s:%s/features/testa' % o.meta)
      self.assertEqual(r.status_code, 200)
      s2 = o.state()
      s2.login('mefyl2@infinit.io', 'mefyl2')
      f2 = s2.features()
      self.assertTrue('testa' not in f2.keys())

  def test_features_add(self):
    with infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS']) as o:
      r = requests.put('%s://%s:%s/features/testc' % o.meta,
                       data = json.dumps({'value': 'v3'}),
                       headers = {'content-type': 'application/json'})
      self.assertEqual(r.status_code, 200)
      r = requests.put('%s://%s:%s/features/testd' % o.meta,
                       data = json.dumps({'values': {'v1' : 0.5, 'v2': 0.5}}),
                       headers = {'content-type': 'application/json'})
      self.assertEqual(r.status_code, 200)
      s2 = o.state()
      s2.login('mefyl2@infinit.io', 'mefyl2')
      f = s2.features()
      self.assertTrue('testc' in f.keys())
      self.assertTrue('testd' in f.keys())
      self.assertEqual(f['testc'], 'v3')
      self.assertTrue(f['testd'] in ['v1', 'v2'])
      r = requests.delete('%s://%s:%s/features/testc' % o.meta)
      self.assertEqual(r.status_code, 200)
      r = requests.delete('%s://%s:%s/features/testd' % o.meta)
      self.assertEqual(r.status_code, 200)
      s2.logout()
      reactor.sleep(datetime.timedelta(milliseconds = 200))
      s2.login('mefyl2@infinit.io', 'mefyl2')
      reactor.sleep(datetime.timedelta(milliseconds = 200))
      f = s2.features()
      self.assertTrue('testc' in f.keys())
      s3 = o.state()
      s3.register('mefyl3', 'mefyl3@infinit.io', 'mefyl3')
      reactor.sleep(datetime.timedelta(milliseconds = 200))
      f = s3.features()
      self.assertTrue('testc' not in f.keys())
utils.run(unittest.main)
