#! /usr/bin/env python3

import infinit.oracles.servers
import os
import state
import utils
import unittest

import reactor
import datetime

import requests
import json

import pymongo
import pymongo.collection
import pymongo.database
import pymongo.errors

from utils import expect_raise

class TestLogin(unittest.TestCase):

  def test_login(self):
    with infinit.oracles.servers.Oracles(
        mongo_dump = '%s/one-user' % os.environ['DUMPS']) as o:
      s = o.state()
      expect_raise(lambda: s.login('mefyl@infinit.io', 'lol'))
      expect_raise(lambda: s.login('mefyl@infinit.com', 'mefyl'))
      s.login('mefyl@infinit.io',
              state.hash_password('mefyl@infinit.io', 'mefyl'))
      self.assertTrue(s.logged_in())
      users = s.users();
      self.assertEqual(len(users), 1)
      me = iter(users.values()).__next__()
      self.assertEqual(me['fullname'], 'mefyl')
      self.assertEqual(me['handle'], 'mefyl')

  def test_login2(self):
    with infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS']) as o:
      #Remove abtests
      mongo = pymongo.MongoClient(host='127.0.0.1', port=o._mongo.port)
      mongo.meta.abtest.remove({})
      s1 = o.state()
      s1.login('mefyl@infinit.io',
              state.hash_password('mefyl@infinit.io', 'mefyl'))
      s2 = o.state()
      s2.login('mefyl2@infinit.io',
              state.hash_password('mefyl2@infinit.io', 'mefyl2'))
      self.assertEqual(s1.features(), {'test_feature': '1'})
      self.assertEqual(s2.features(), {})
      users1 = s1.users()
      self.assertEqual(len(users1), 1)
      self.assertEqual(len(s1.swaggers()), 0)
      users2 = s2.users()
      self.assertEqual(len(users2), 1)

  def test_register(self):
    with infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS']) as o:
      s1 = o.state()
      s1.register('mefyl3', 'mefyl3@infinit.io',
                  state.hash_password('mefyl3@infinit.io', 'mefyl3'))
      s1.logout()
      s2 = o.state()
      s2.login('mefyl3@infinit.io',
              state.hash_password('mefyl3@infinit.io', 'mefyl3'))
      f = s2.features()
      keys = list(f.keys())
      keys.sort()
      self.assertEqual(keys, ['testa', 'testb'])
      self.assertEqual(f['testb'], 'val')
      self.assertTrue(f['testa'] in ['v1', 'v2'])

  def test_features(self):
    with infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS']) as o:
      # test that features are injected at login
      s2 = o.state()
      s2.login('mefyl2@infinit.io',
              state.hash_password('mefyl2@infinit.io', 'mefyl2'))
      reactor.sleep(datetime.timedelta(milliseconds = 200))
      f = s2.features()
      keys = list(f.keys())
      keys.sort()
      self.assertEqual(keys, ['testa', 'testb'])
      self.assertEqual(f['testb'], 'val')
      self.assertTrue(f['testa'] in ['v1', 'v2'])

  def test_features_reroll(self):
    """ Check we eventually get both possible values when rerolling."""
    with infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS']) as o:
      vals = set()
      for i in range(20):
        s = o.state()
        # Invoke the features roller, in force mode
        r = requests.post('%s://%s:%s/users/features' % o.meta,
                        data=json.dumps({'reroll': '1'}),
                        headers = {'content-type': 'application/json'})
        self.assertEqual(r.status_code, 200)
        s.login('mefyl2@infinit.io',
              state.hash_password('mefyl2@infinit.io', 'mefyl2'))
        reactor.sleep(datetime.timedelta(milliseconds = 200))
        f = s.features()
        self.assertTrue('testa' in f.keys())
        vals.add(f['testa'])
        if len(vals) == 2:
          break;
        s.logout()
      self.assertEqual(vals, set(['v1', 'v2']))

  def test_features_reroll_custom(self):
    with infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS']) as o:
      r = requests.post('%s://%s:%s/users/features' % o.meta,
                        data=json.dumps({'reroll': '1',
                                        'abtests': [{'key': 'testc', 'value': '1'},
                                                    {'key':'testa', 'value':'v3'}]}),
                        headers = {'content-type': 'application/json'})
      s = o.state()
      s.login('mefyl2@infinit.io',
              state.hash_password('mefyl2@infinit.io', 'mefyl2'))
      reactor.sleep(datetime.timedelta(milliseconds = 200))
      f = s.features()
      self.assertTrue('testc' in f.keys())
      self.assertEqual(f['testa'], 'v3')

  def test_features_remove(self):
    with infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS']) as o:
      mongo = pymongo.MongoClient(host='127.0.0.1', port=o._mongo.port)
      mongo.meta.abtest.remove({})
      r = requests.delete('%s://%s:%s/users/feature/testa' % o.meta)
      self.assertEqual(r.status_code, 200)
      s2 = o.state()
      s2.login('mefyl2@infinit.io',
              state.hash_password('mefyl2@infinit.io', 'mefyl2'))
      reactor.sleep(datetime.timedelta(milliseconds = 200))
      f2 = s2.features()
      self.assertTrue('testa' not in f2.keys())

utils.run(unittest.main)
