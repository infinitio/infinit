#! /usr/bin/env python3

import infinit.oracles.servers
import os
import state
import utils
import unittest

import reactor

from utils import expect_raise

class TestLogin(unittest.TestCase):

  def test_login(self):
    with infinit.oracles.servers.Oracles(
        mongo_dump = '%s/one-user' % os.environ['DUMPS']) as o:
      s = o.state()
      expect_raise(lambda: s.login('mefyl@infinit.io', 'lol'))
      expect_raise(lambda: s.login('mefyl@infinit.com', 'mefyl'))
      s.login('mefyl@infinit.io',
              state.hash_password('mefyl@infinit.io', 'mefyl'))
      self.assertTrue(s.logged_in())
      users = s.users();
      self.assertEqual(len(users), 1)
      me = iter(users.values()).__next__()
      self.assertEqual(me['fullname'], 'mefyl')
      self.assertEqual(me['handle'], 'mefyl')

  def test_login2(self):
    with infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS']) as o:
      s1 = o.state()
      s1.login('mefyl@infinit.io',
              state.hash_password('mefyl@infinit.io', 'mefyl'))
      s2 = o.state()
      s2.login('mefyl2@infinit.io',
              state.hash_password('mefyl2@infinit.io', 'mefyl2'))
      self.assertEqual(s1.features(), {'test_feature': '1'})
      self.assertEqual(s2.features(), {})
      users1 = s1.users()
      self.assertEqual(len(users1), 1)
      self.assertEqual(len(s1.swaggers()), 0)
      users2 = s2.users()
      self.assertEqual(len(users2), 1)

  def test_register(self):
    with infinit.oracles.servers.Oracles(
      mongo_dump = '%s/two-users' % os.environ['DUMPS']) as o:
      s1 = o.state()
      s1.register('mefyl3', 'mefyl3@infinit.io',
                  state.hash_password('mefyl3@infinit.io', 'mefyl3'))
      s1.logout()
      s2 = o.state()
      s2.login('mefyl3@infinit.io',
              state.hash_password('mefyl3@infinit.io', 'mefyl3'))
      f = s2.features()
      keys = list(f.keys())
      keys.sort()
      self.assertEqual(keys, ['testa', 'testb'])
      self.assertEqual(f['testb'], 'val')
      self.assertTrue(f['testa'] in ['v1', 'v2'])

utils.run(unittest.main)
