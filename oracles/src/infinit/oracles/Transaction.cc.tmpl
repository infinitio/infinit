# include <infinit/oracles/Transaction.hh>
# include <iostream>

namespace infinit
{
  namespace oracles
  {
    Transaction::Transaction(std::string const& sender_id,
                             std::string const& sender_fullname,
                             std::string const& sender_device_id):
      id(),
      sender_id(sender_id),
      sender_fullname(sender_fullname),
      sender_device_id(sender_device_id),
      recipient_id(),
      recipient_fullname(),
      recipient_device_id(),
      recipient_device_name(),
      message(),
      files(),
      files_count(),
      total_size(),
      is_directory(),
      status(Status::created),
      ctime(),
      mtime()
    {}

    bool
    Transaction::empty() const
    {
      return this->id.empty();
    }

    void
    Transaction::print(std::ostream& stream) const
    {
      stream << *this;
    }

    std::ostream&
    operator <<(std::ostream& out,
                Transaction::Status t)
    {
      switch (t)
      {
        <%! from infinit.oracles.transaction import statuses %>
        %for name, value in statuses.items():
          case Transaction::Status::${name}:
            out << "${name}";
            break;
        %endfor
      }

      return out;
    }

    std::ostream&
    operator <<(std::ostream& out,
                Transaction const& t)
    {
      out << "Transaction(" << t.id << ", " << t.status
          << " from " << t.sender_fullname
          << " to " << t.recipient_fullname << ")";
      return out;
    }
  }
}
