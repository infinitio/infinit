#include <iostream>

#include <infinit/oracles/Transaction.hh>

namespace infinit
{
  namespace oracles
  {
    /*-------------.
    | Construction |
    `-------------*/

    Transaction::Transaction(std::string const& sender_id,
                             elle::UUID sender_device_id)
      : id()
      , sender_id(sender_id)
      , sender_device_id(sender_device_id)
      , status(Status::created)
      , ctime()
      , mtime()
      , is_ghost()
    {}

    Transaction::Transaction()
      : id()
      , sender_id()
      , sender_device_id()
      , status(Status::created)
      , ctime()
      , mtime()
      , is_ghost()
    {}

    /*-----------.
    | Properties |
    `-----------*/

    bool
    Transaction::empty() const
    {
      return this->id.empty();
    }

    /*----------.
    | Printable |
    `----------*/

    void
    Transaction::print(std::ostream& stream) const
    {
      stream << *this;
    }

    /*--------------.
    | Serialization |
    `--------------*/

    std::ostream&
    operator <<(std::ostream& out,
                Transaction::Status t)
    {
      switch (t)
      {
        <%! from infinit.oracles.transaction import statuses %>
        %for name, value in statuses.items():
          case Transaction::Status::${name}:
            out << "${name}";
            break;
        %endfor
      }
      return out;
    }

    std::ostream&
    operator <<(std::ostream& out, boost::optional<Transaction::Status> t)
    {
      if (t)
        out << t.get();
      else
        out << "no status";
      return out;
    }

    std::ostream&
    operator <<(std::ostream& out,
                Transaction const& t)
    {
      out << "Transaction(";
      if (!t.id.empty())
        out << t.id << ", ";
      out << t.status << ")";
      return out;
    }
  }
}
