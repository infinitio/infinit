#include <infinit/oracles/apertus/Apertus.hh>

#include <infinit/oracles/apertus/Accepter.hh>
#include <infinit/oracles/apertus/Transfer.hh>

#include <reactor/exception.hh>
#include <reactor/http/exceptions.hh>
#include <reactor/network/exception.hh>

#include <elle/Error.hh>
#include <elle/Exception.hh>
#include <elle/HttpClient.hh> // XXX: Remove that. Only for exception.
#include <elle/log.hh>
#include <elle/network/Interface.hh>
#include <elle/network/hostname.hh>

#include <boost/uuid/uuid_io.hpp>

#include <algorithm>
#include <tuple>
#include <utility>

extern const std::vector<char> server_certificate;
extern const std::vector<char> server_key;
extern const std::vector<char> server_dh1024;

static
boost::uuids::uuid
generate_uuid()
{
  boost::mt19937 rng;
  rng.seed(std::time(0));
  boost::uuids::basic_random_generator<boost::mt19937> gen(&rng);
  return gen();
}

ELLE_LOG_COMPONENT("infinit.oracles.apertus.Apertus");
namespace infinit
{
  namespace oracles
  {
    namespace apertus
    {
      Apertus::Apertus(std::string const& meta_protocol,
                       std::string const& meta_host,
                       int meta_port,
                       std::string const& host, int port_ssl, int port_tcp,
                       boost::posix_time::time_duration const& tick_rate,
                       boost::posix_time::time_duration const& timeout)
        : Waitable("apertus")
        , _unregistered(false)
        , _accepter_ssl(nullptr)
        , _accepter_tcp(nullptr)
        , _meta_enabled(meta_host != "")
        , _meta(meta_protocol, meta_host, meta_port)
        , _uuid(generate_uuid())
        , _host(host)
        , _port_ssl(port_ssl)
        , _port_tcp(port_tcp)
        , _certificate(nullptr)
        , _server_ssl(nullptr)
        , _server_tcp(nullptr)
        , _bandwidth(0)
        , _tick_rate(tick_rate)
        , _timeout(timeout)
        , _monitor(*reactor::Scheduler::scheduler(),
                   "apertus_monitor",
                   std::bind(&Apertus::_run_monitor, std::ref(*this)))
      {
        try
        {
          this->_certificate.reset(new reactor::network::SSLCertificate(
                                     server_certificate, server_key, server_dh1024));
          ELLE_DEBUG("%s: loaded SSL certificate", *this);

          this->_server_ssl.reset(new reactor::network::SSLServer(
                                    std::move(this->_certificate)));
          this->_server_ssl->listen(this->_port_ssl);
          this->_port_ssl = this->_server_ssl->port();
          ELLE_LOG("%s: SSL Apertus listening on %s:%s",
                   *this, this->_host, this->_port_ssl);
          this->_accepter_ssl.reset(new reactor::Thread(
                                      *reactor::Scheduler::scheduler(),
                                      "apertus_ssl_accepter",
                                      std::bind(&Apertus::_serve,
                                                std::ref(*this),
                                                std::ref(*this->_server_ssl))));

          this->_server_tcp.reset(new reactor::network::TCPServer());
          this->_server_tcp->listen(this->_port_tcp);
          this->_port_tcp = this->_server_tcp->port();
          ELLE_LOG("%s: TCP Apertus listening on %s:%s",
                   *this, this->_host, this->_port_tcp);
          this->_accepter_tcp.reset(new reactor::Thread(
                                      *reactor::Scheduler::scheduler(),
                                      "apertus_tcp_accepter",
                                      std::bind(&Apertus::_serve,
                                                std::ref(*this),
                                                std::ref(*this->_server_tcp))));

          this->_register();
        }
        catch (...)
        {
          this->_accepter_ssl->terminate_now();
          this->_accepter_tcp->terminate_now();
          this->_monitor.terminate_now();
          throw;
        }
      }

      Apertus::~Apertus()
      {
        this->_monitor.terminate_now();
        if (this->_accepter_ssl)
          this->_accepter_ssl->terminate_now();
        if (this->_accepter_tcp)
          this->_accepter_tcp->terminate_now();

        while (!this->_workers.empty())
        {
          ELLE_TRACE_SCOPE("%s: kick running transfer", *this);

          auto const& worker = *this->_workers.begin();
          ELLE_DEBUG("%s: transfer %s", *this, worker.first)
          {
            ELLE_ASSERT(worker.second != nullptr);
            ELLE_DEBUG("%s: to remove: %s", *this, worker.first)
              this->_transfer_remove(*worker.second);
          }
        }

        ELLE_ASSERT(this->_workers.empty());
      }


      void
      Apertus::_register()
      {
        if (this->_meta_enabled)
          this->_meta.register_apertus(this->_uuid,
                                       elle::network::hostname(),
                                       this->_port_ssl,
                                       this->_port_tcp);
      }

      void
      Apertus::_unregister()
      {
        if (!this->_unregistered)
        {
          this->_unregistered = true;
          if (this->_meta_enabled)
            this->_meta.unregister_apertus(this->_uuid);
        }
        else
        {
          ELLE_DEBUG(
            "%s: already unregistered, will not unregister apertus again",
            *this);
        }
      }

      void
      Apertus::_serve(reactor::network::Server& server)
      {

        elle::With<elle::Finally>([this] { this->_unregister(); }) << [&]
        {
          while (true)
          {
            ELLE_TRACE("%s: waiting for new client", *this);
            auto client = server.accept();
            ELLE_DEBUG("%s: socket opened", *this);

            AccepterPtr accepter(new Accepter(*this, std::move(client), _timeout));
            this->_accepters[accepter.get()] = std::move(accepter);
          }
        };
      }

      void
      Apertus::stop()
      {
        ELLE_LOG_SCOPE("%s: stop", *this);
        this->_accepter_ssl->terminate_now();
        this->_accepter_tcp->terminate_now();
        this->_monitor.terminate_now();
        this->_unregister();
        this->_accepters.clear();
        this->_clients.clear();
        reactor::Waitables currently_working;
        for (auto const& worker: this->_workers)
        {
          ELLE_DEBUG("%s: add worker to wait list: %s", *this, *worker.second);
          currently_working << worker.second.get();
        }
        ELLE_TRACE("%s: waiting for workers to finish", *this);
        reactor::wait(currently_working);
        ELLE_TRACE("%s: done waiting for workers", *this);
        this->_signal();
      }

      void
      Apertus::_connect(TID tid,
                        std::unique_ptr<reactor::network::Socket> client1,
                        std::unique_ptr<reactor::network::Socket> client2)
      {
        if (this->_workers.find(tid) != this->_workers.end())
          this->_workers.erase(tid);

        ELLE_ASSERT(client1 != nullptr);
        ELLE_ASSERT(client2 != nullptr);

        this->_workers[tid] =
          std::move(std::unique_ptr<Transfer>(
            new Transfer(*this, tid, std::move(client1), std::move(client2))));
      }

      void
      Apertus::_transfer_remove(Transfer const& transfer)
      {
        // ELLE_ASSERT_CONTAINS(this->_workers, transfer.tid());
        ELLE_ASSERT(this->_workers[transfer.tid()] != nullptr);

        ELLE_DEBUG("remove %s", transfer.tid());
        Transfer* worker = this->_workers[transfer.tid()].release();
        ELLE_DEBUG("released %s", worker->tid());
        this->_workers.erase(transfer.tid());
        ELLE_DEBUG("erased %s", worker->tid());

        reactor::run_later(
          elle::sprintf("delete transfer %s", *worker),
          [worker]
          {
            ELLE_DEBUG("about to delete transfer: %s", *worker);
            delete worker;
          });
      }

      /*----------.
      | Printable |
      `----------*/
      void
      Apertus::print(std::ostream& stream) const
      {
        stream << "Apertus(" << this->_uuid << ")";
      }

      /*-----------.
      | Monitoring |
      `-----------*/
      void
      Apertus::add_to_bandwidth(uint32_t data)
      {
        _bandwidth += data;
      }

      void
      Apertus::_run_monitor()
      {
        while (true)
        {
          reactor::sleep(_tick_rate);

          uint32_t bdwps = _bandwidth / _tick_rate.total_seconds();
          ELLE_TRACE("%s: bandwidth is currently estimated at %sB/s",
            *this, bdwps);

          if (this->_meta_enabled)
            try
            {
              this->_meta.apertus_update_bandwidth(
                this->_uuid, bdwps, this->_workers.size());
            }
            catch (reactor::http::RequestError const&)
            {
              ELLE_WARN("%s: unable to update bandwidth on meta: %s",
                        *this, elle::exception_string());
            }
            catch (elle::http::Exception const&)
            {
              ELLE_WARN("%s: unable to update bandwidth on meta: %s",
                        *this, elle::exception_string());
            }
          _bandwidth = 0;
        }
      }

      auto
      Apertus::_take_from_accepters(Accepter* ptr)
      -> AccepterPtr
      {
        auto it = _accepters.find(ptr);
        ELLE_ASSERT(it != _accepters.end());
        AccepterPtr res = std::move(it->second);
        _accepters.erase(it);
        return std::move(res);
      }
    }
  }
}

const std::vector<char> server_certificate =
{
  0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43,
  0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d,
  0x2d, 0x2d, 0x2d, 0x0a, 0x4d, 0x49, 0x49, 0x47, 0x35, 0x54, 0x43, 0x43,
  0x42, 0x4d, 0x32, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x4a,
  0x41, 0x4a, 0x74, 0x56, 0x42, 0x39, 0x37, 0x35, 0x36, 0x68, 0x35, 0x69,
  0x4d, 0x41, 0x30, 0x47, 0x43, 0x53, 0x71, 0x47, 0x53, 0x49, 0x62, 0x33,
  0x44, 0x51, 0x45, 0x42, 0x42, 0x51, 0x55, 0x41, 0x4d, 0x49, 0x47, 0x6e,
  0x4d, 0x51, 0x73, 0x77, 0x43, 0x51, 0x59, 0x44, 0x0a, 0x56, 0x51, 0x51,
  0x47, 0x45, 0x77, 0x4a, 0x47, 0x55, 0x6a, 0x45, 0x57, 0x4d, 0x42, 0x51,
  0x47, 0x41, 0x31, 0x55, 0x45, 0x43, 0x42, 0x4d, 0x4e, 0x53, 0x57, 0x78,
  0x6c, 0x4c, 0x57, 0x52, 0x6c, 0x4c, 0x55, 0x5a, 0x79, 0x59, 0x57, 0x35,
  0x6a, 0x5a, 0x54, 0x45, 0x4f, 0x4d, 0x41, 0x77, 0x47, 0x41, 0x31, 0x55,
  0x45, 0x42, 0x78, 0x4d, 0x46, 0x55, 0x47, 0x46, 0x79, 0x61, 0x58, 0x4d,
  0x78, 0x0a, 0x45, 0x7a, 0x41, 0x52, 0x42, 0x67, 0x4e, 0x56, 0x42, 0x41,
  0x6f, 0x54, 0x43, 0x6b, 0x6c, 0x75, 0x5a, 0x6d, 0x6c, 0x75, 0x61, 0x58,
  0x51, 0x75, 0x61, 0x57, 0x38, 0x78, 0x4c, 0x6a, 0x41, 0x73, 0x42, 0x67,
  0x4e, 0x56, 0x42, 0x41, 0x4d, 0x55, 0x4a, 0x57, 0x46, 0x77, 0x5a, 0x58,
  0x4a, 0x30, 0x64, 0x58, 0x4d, 0x75, 0x4b, 0x69, 0x34, 0x71, 0x4c, 0x6d,
  0x46, 0x77, 0x61, 0x53, 0x35, 0x77, 0x0a, 0x63, 0x6d, 0x39, 0x6b, 0x64,
  0x57, 0x4e, 0x30, 0x61, 0x57, 0x39, 0x75, 0x4c, 0x6d, 0x6c, 0x75, 0x5a,
  0x6d, 0x6c, 0x75, 0x61, 0x58, 0x51, 0x75, 0x61, 0x57, 0x38, 0x78, 0x4b,
  0x7a, 0x41, 0x70, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39,
  0x77, 0x30, 0x42, 0x43, 0x51, 0x45, 0x57, 0x48, 0x47, 0x46, 0x6b, 0x62,
  0x57, 0x6c, 0x75, 0x4b, 0x32, 0x4e, 0x6c, 0x63, 0x6e, 0x52, 0x70, 0x0a,
  0x5a, 0x6d, 0x6c, 0x6a, 0x59, 0x58, 0x52, 0x6c, 0x51, 0x47, 0x6c, 0x75,
  0x5a, 0x6d, 0x6c, 0x75, 0x61, 0x58, 0x51, 0x75, 0x61, 0x57, 0x38, 0x77,
  0x48, 0x68, 0x63, 0x4e, 0x4d, 0x54, 0x51, 0x77, 0x4d, 0x54, 0x49, 0x35,
  0x4d, 0x54, 0x59, 0x79, 0x4d, 0x6a, 0x49, 0x34, 0x57, 0x68, 0x63, 0x4e,
  0x4d, 0x6a, 0x51, 0x77, 0x4d, 0x54, 0x49, 0x35, 0x4d, 0x54, 0x59, 0x79,
  0x4d, 0x6a, 0x49, 0x34, 0x0a, 0x57, 0x6a, 0x43, 0x42, 0x70, 0x7a, 0x45,
  0x4c, 0x4d, 0x41, 0x6b, 0x47, 0x41, 0x31, 0x55, 0x45, 0x42, 0x68, 0x4d,
  0x43, 0x52, 0x6c, 0x49, 0x78, 0x46, 0x6a, 0x41, 0x55, 0x42, 0x67, 0x4e,
  0x56, 0x42, 0x41, 0x67, 0x54, 0x44, 0x55, 0x6c, 0x73, 0x5a, 0x53, 0x31,
  0x6b, 0x5a, 0x53, 0x31, 0x47, 0x63, 0x6d, 0x46, 0x75, 0x59, 0x32, 0x55,
  0x78, 0x44, 0x6a, 0x41, 0x4d, 0x42, 0x67, 0x4e, 0x56, 0x0a, 0x42, 0x41,
  0x63, 0x54, 0x42, 0x56, 0x42, 0x68, 0x63, 0x6d, 0x6c, 0x7a, 0x4d, 0x52,
  0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x4b, 0x45, 0x77,
  0x70, 0x4a, 0x62, 0x6d, 0x5a, 0x70, 0x62, 0x6d, 0x6c, 0x30, 0x4c, 0x6d,
  0x6c, 0x76, 0x4d, 0x53, 0x34, 0x77, 0x4c, 0x41, 0x59, 0x44, 0x56, 0x51,
  0x51, 0x44, 0x46, 0x43, 0x56, 0x68, 0x63, 0x47, 0x56, 0x79, 0x64, 0x48,
  0x56, 0x7a, 0x0a, 0x4c, 0x69, 0x6f, 0x75, 0x4b, 0x69, 0x35, 0x68, 0x63,
  0x47, 0x6b, 0x75, 0x63, 0x48, 0x4a, 0x76, 0x5a, 0x48, 0x56, 0x6a, 0x64,
  0x47, 0x6c, 0x76, 0x62, 0x69, 0x35, 0x70, 0x62, 0x6d, 0x5a, 0x70, 0x62,
  0x6d, 0x6c, 0x30, 0x4c, 0x6d, 0x6c, 0x76, 0x4d, 0x53, 0x73, 0x77, 0x4b,
  0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41,
  0x51, 0x6b, 0x42, 0x46, 0x68, 0x78, 0x68, 0x0a, 0x5a, 0x47, 0x31, 0x70,
  0x62, 0x69, 0x74, 0x6a, 0x5a, 0x58, 0x4a, 0x30, 0x61, 0x57, 0x5a, 0x70,
  0x59, 0x32, 0x46, 0x30, 0x5a, 0x55, 0x42, 0x70, 0x62, 0x6d, 0x5a, 0x70,
  0x62, 0x6d, 0x6c, 0x30, 0x4c, 0x6d, 0x6c, 0x76, 0x4d, 0x49, 0x49, 0x43,
  0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47,
  0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43,
  0x0a, 0x41, 0x67, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x43, 0x43, 0x67, 0x4b,
  0x43, 0x41, 0x67, 0x45, 0x41, 0x73, 0x57, 0x4d, 0x31, 0x53, 0x6c, 0x64,
  0x31, 0x33, 0x34, 0x6e, 0x67, 0x4e, 0x38, 0x41, 0x66, 0x51, 0x35, 0x43,
  0x59, 0x35, 0x31, 0x38, 0x56, 0x74, 0x46, 0x6e, 0x4a, 0x6f, 0x50, 0x38,
  0x45, 0x34, 0x39, 0x72, 0x70, 0x78, 0x52, 0x52, 0x4b, 0x62, 0x65, 0x63,
  0x48, 0x6e, 0x47, 0x77, 0x4e, 0x0a, 0x56, 0x4c, 0x34, 0x43, 0x6e, 0x74,
  0x41, 0x6e, 0x79, 0x47, 0x6e, 0x32, 0x2b, 0x55, 0x46, 0x77, 0x69, 0x51,
  0x41, 0x68, 0x53, 0x32, 0x48, 0x33, 0x74, 0x43, 0x58, 0x77, 0x6b, 0x73,
  0x68, 0x66, 0x41, 0x71, 0x63, 0x61, 0x63, 0x71, 0x39, 0x4b, 0x37, 0x74,
  0x52, 0x2f, 0x42, 0x48, 0x56, 0x72, 0x2f, 0x66, 0x4c, 0x4d, 0x59, 0x31,
  0x34, 0x32, 0x61, 0x47, 0x4a, 0x58, 0x41, 0x78, 0x71, 0x62, 0x0a, 0x46,
  0x6c, 0x42, 0x33, 0x67, 0x58, 0x4a, 0x4d, 0x54, 0x56, 0x46, 0x44, 0x77,
  0x77, 0x58, 0x66, 0x38, 0x59, 0x76, 0x72, 0x57, 0x6c, 0x57, 0x38, 0x69,
  0x75, 0x64, 0x74, 0x48, 0x57, 0x46, 0x49, 0x6a, 0x79, 0x7a, 0x6c, 0x76,
  0x61, 0x59, 0x6e, 0x51, 0x4f, 0x4a, 0x37, 0x53, 0x4f, 0x2b, 0x55, 0x36,
  0x50, 0x4e, 0x34, 0x45, 0x6e, 0x7a, 0x2f, 0x45, 0x48, 0x41, 0x6b, 0x63,
  0x64, 0x46, 0x77, 0x0a, 0x47, 0x69, 0x31, 0x55, 0x56, 0x78, 0x6d, 0x76,
  0x64, 0x38, 0x5a, 0x52, 0x52, 0x36, 0x64, 0x79, 0x48, 0x4b, 0x6b, 0x42,
  0x70, 0x49, 0x76, 0x68, 0x67, 0x63, 0x6d, 0x4f, 0x50, 0x59, 0x53, 0x46,
  0x76, 0x58, 0x5a, 0x6a, 0x6a, 0x79, 0x77, 0x6e, 0x34, 0x6e, 0x66, 0x67,
  0x39, 0x43, 0x5a, 0x77, 0x49, 0x49, 0x35, 0x37, 0x57, 0x39, 0x66, 0x62,
  0x6c, 0x62, 0x48, 0x6a, 0x5a, 0x31, 0x52, 0x6e, 0x0a, 0x54, 0x2f, 0x79,
  0x7a, 0x61, 0x6a, 0x30, 0x4c, 0x61, 0x65, 0x62, 0x4e, 0x31, 0x43, 0x7a,
  0x58, 0x43, 0x6c, 0x73, 0x52, 0x35, 0x71, 0x50, 0x35, 0x4e, 0x49, 0x4e,
  0x78, 0x37, 0x2b, 0x33, 0x46, 0x30, 0x44, 0x59, 0x4c, 0x6b, 0x49, 0x59,
  0x77, 0x38, 0x51, 0x6a, 0x6f, 0x51, 0x31, 0x59, 0x5a, 0x54, 0x63, 0x51,
  0x45, 0x64, 0x70, 0x47, 0x50, 0x68, 0x35, 0x58, 0x69, 0x62, 0x67, 0x65,
  0x48, 0x0a, 0x44, 0x73, 0x31, 0x58, 0x57, 0x39, 0x4e, 0x33, 0x62, 0x57,
  0x6f, 0x63, 0x62, 0x76, 0x47, 0x49, 0x50, 0x35, 0x4f, 0x36, 0x4d, 0x48,
  0x64, 0x34, 0x51, 0x48, 0x31, 0x4a, 0x72, 0x32, 0x69, 0x4b, 0x44, 0x79,
  0x72, 0x37, 0x36, 0x44, 0x49, 0x65, 0x6d, 0x2f, 0x77, 0x32, 0x30, 0x4e,
  0x35, 0x52, 0x68, 0x76, 0x35, 0x72, 0x34, 0x78, 0x4a, 0x39, 0x6e, 0x47,
  0x6d, 0x4c, 0x73, 0x77, 0x31, 0x61, 0x0a, 0x54, 0x42, 0x6a, 0x35, 0x4b,
  0x30, 0x46, 0x32, 0x34, 0x78, 0x4d, 0x5a, 0x30, 0x67, 0x76, 0x41, 0x45,
  0x38, 0x71, 0x50, 0x57, 0x4a, 0x36, 0x49, 0x52, 0x61, 0x6e, 0x71, 0x41,
  0x56, 0x72, 0x57, 0x6f, 0x75, 0x58, 0x47, 0x54, 0x4c, 0x33, 0x65, 0x58,
  0x44, 0x61, 0x30, 0x52, 0x56, 0x33, 0x6d, 0x63, 0x65, 0x42, 0x5a, 0x43,
  0x6e, 0x39, 0x73, 0x50, 0x4f, 0x72, 0x4d, 0x5a, 0x61, 0x74, 0x68, 0x0a,
  0x77, 0x68, 0x67, 0x55, 0x77, 0x31, 0x78, 0x6d, 0x73, 0x63, 0x7a, 0x2b,
  0x33, 0x2b, 0x6f, 0x70, 0x4f, 0x79, 0x72, 0x41, 0x44, 0x73, 0x37, 0x63,
  0x61, 0x39, 0x6e, 0x42, 0x56, 0x75, 0x78, 0x64, 0x4f, 0x4e, 0x76, 0x34,
  0x77, 0x6b, 0x53, 0x4d, 0x65, 0x63, 0x68, 0x6f, 0x34, 0x61, 0x48, 0x76,
  0x36, 0x56, 0x75, 0x48, 0x4f, 0x51, 0x33, 0x61, 0x49, 0x77, 0x39, 0x58,
  0x4a, 0x35, 0x35, 0x34, 0x0a, 0x79, 0x54, 0x50, 0x4d, 0x35, 0x4e, 0x38,
  0x56, 0x6f, 0x49, 0x41, 0x56, 0x54, 0x4d, 0x78, 0x50, 0x47, 0x69, 0x65,
  0x69, 0x46, 0x4d, 0x6e, 0x55, 0x43, 0x4a, 0x51, 0x45, 0x7a, 0x33, 0x73,
  0x34, 0x72, 0x69, 0x50, 0x6e, 0x38, 0x61, 0x4f, 0x75, 0x6a, 0x4b, 0x73,
  0x48, 0x59, 0x6f, 0x70, 0x43, 0x62, 0x39, 0x68, 0x58, 0x38, 0x47, 0x67,
  0x5a, 0x4f, 0x79, 0x76, 0x6b, 0x76, 0x36, 0x64, 0x77, 0x0a, 0x7a, 0x72,
  0x49, 0x37, 0x47, 0x4b, 0x4e, 0x52, 0x57, 0x72, 0x4c, 0x5a, 0x50, 0x61,
  0x52, 0x67, 0x4a, 0x77, 0x4e, 0x47, 0x51, 0x37, 0x70, 0x48, 0x6d, 0x4e,
  0x49, 0x37, 0x34, 0x43, 0x33, 0x38, 0x2b, 0x31, 0x78, 0x67, 0x6e, 0x67,
  0x4c, 0x54, 0x5a, 0x31, 0x4d, 0x59, 0x34, 0x32, 0x39, 0x79, 0x77, 0x52,
  0x76, 0x61, 0x76, 0x64, 0x53, 0x71, 0x34, 0x47, 0x44, 0x77, 0x43, 0x46,
  0x34, 0x69, 0x0a, 0x30, 0x73, 0x4b, 0x66, 0x39, 0x33, 0x5a, 0x66, 0x45,
  0x31, 0x53, 0x2f, 0x38, 0x55, 0x51, 0x75, 0x6c, 0x4d, 0x38, 0x55, 0x41,
  0x58, 0x2b, 0x4a, 0x38, 0x4e, 0x34, 0x67, 0x52, 0x44, 0x51, 0x4f, 0x65,
  0x47, 0x2f, 0x64, 0x43, 0x41, 0x76, 0x69, 0x39, 0x73, 0x56, 0x63, 0x6a,
  0x7a, 0x67, 0x52, 0x72, 0x7a, 0x71, 0x4d, 0x2b, 0x58, 0x66, 0x42, 0x7a,
  0x53, 0x63, 0x43, 0x41, 0x77, 0x45, 0x41, 0x0a, 0x41, 0x61, 0x4f, 0x43,
  0x41, 0x52, 0x41, 0x77, 0x67, 0x67, 0x45, 0x4d, 0x4d, 0x42, 0x30, 0x47,
  0x41, 0x31, 0x55, 0x64, 0x44, 0x67, 0x51, 0x57, 0x42, 0x42, 0x51, 0x65,
  0x31, 0x6b, 0x4e, 0x6c, 0x39, 0x57, 0x42, 0x55, 0x36, 0x6c, 0x38, 0x6f,
  0x48, 0x59, 0x52, 0x73, 0x4c, 0x38, 0x33, 0x48, 0x61, 0x79, 0x75, 0x67,
  0x78, 0x7a, 0x43, 0x42, 0x33, 0x41, 0x59, 0x44, 0x56, 0x52, 0x30, 0x6a,
  0x0a, 0x42, 0x49, 0x48, 0x55, 0x4d, 0x49, 0x48, 0x52, 0x67, 0x42, 0x51,
  0x65, 0x31, 0x6b, 0x4e, 0x6c, 0x39, 0x57, 0x42, 0x55, 0x36, 0x6c, 0x38,
  0x6f, 0x48, 0x59, 0x52, 0x73, 0x4c, 0x38, 0x33, 0x48, 0x61, 0x79, 0x75,
  0x67, 0x78, 0x36, 0x47, 0x42, 0x72, 0x61, 0x53, 0x42, 0x71, 0x6a, 0x43,
  0x42, 0x70, 0x7a, 0x45, 0x4c, 0x4d, 0x41, 0x6b, 0x47, 0x41, 0x31, 0x55,
  0x45, 0x42, 0x68, 0x4d, 0x43, 0x0a, 0x52, 0x6c, 0x49, 0x78, 0x46, 0x6a,
  0x41, 0x55, 0x42, 0x67, 0x4e, 0x56, 0x42, 0x41, 0x67, 0x54, 0x44, 0x55,
  0x6c, 0x73, 0x5a, 0x53, 0x31, 0x6b, 0x5a, 0x53, 0x31, 0x47, 0x63, 0x6d,
  0x46, 0x75, 0x59, 0x32, 0x55, 0x78, 0x44, 0x6a, 0x41, 0x4d, 0x42, 0x67,
  0x4e, 0x56, 0x42, 0x41, 0x63, 0x54, 0x42, 0x56, 0x42, 0x68, 0x63, 0x6d,
  0x6c, 0x7a, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x0a, 0x56,
  0x51, 0x51, 0x4b, 0x45, 0x77, 0x70, 0x4a, 0x62, 0x6d, 0x5a, 0x70, 0x62,
  0x6d, 0x6c, 0x30, 0x4c, 0x6d, 0x6c, 0x76, 0x4d, 0x53, 0x34, 0x77, 0x4c,
  0x41, 0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x46, 0x43, 0x56, 0x68, 0x63,
  0x47, 0x56, 0x79, 0x64, 0x48, 0x56, 0x7a, 0x4c, 0x69, 0x6f, 0x75, 0x4b,
  0x69, 0x35, 0x68, 0x63, 0x47, 0x6b, 0x75, 0x63, 0x48, 0x4a, 0x76, 0x5a,
  0x48, 0x56, 0x6a, 0x0a, 0x64, 0x47, 0x6c, 0x76, 0x62, 0x69, 0x35, 0x70,
  0x62, 0x6d, 0x5a, 0x70, 0x62, 0x6d, 0x6c, 0x30, 0x4c, 0x6d, 0x6c, 0x76,
  0x4d, 0x53, 0x73, 0x77, 0x4b, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49,
  0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x6b, 0x42, 0x46, 0x68, 0x78, 0x68,
  0x5a, 0x47, 0x31, 0x70, 0x62, 0x69, 0x74, 0x6a, 0x5a, 0x58, 0x4a, 0x30,
  0x61, 0x57, 0x5a, 0x70, 0x59, 0x32, 0x46, 0x30, 0x0a, 0x5a, 0x55, 0x42,
  0x70, 0x62, 0x6d, 0x5a, 0x70, 0x62, 0x6d, 0x6c, 0x30, 0x4c, 0x6d, 0x6c,
  0x76, 0x67, 0x67, 0x6b, 0x41, 0x6d, 0x31, 0x55, 0x48, 0x33, 0x76, 0x6e,
  0x71, 0x48, 0x6d, 0x49, 0x77, 0x44, 0x41, 0x59, 0x44, 0x56, 0x52, 0x30,
  0x54, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41,
  0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30,
  0x42, 0x0a, 0x41, 0x51, 0x55, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x67,
  0x45, 0x41, 0x6c, 0x45, 0x65, 0x52, 0x69, 0x31, 0x39, 0x4b, 0x4a, 0x78,
  0x43, 0x4c, 0x38, 0x72, 0x32, 0x6e, 0x50, 0x71, 0x2f, 0x6f, 0x4f, 0x6b,
  0x4e, 0x56, 0x56, 0x6c, 0x34, 0x58, 0x77, 0x4c, 0x78, 0x6d, 0x42, 0x42,
  0x6a, 0x73, 0x57, 0x71, 0x45, 0x33, 0x57, 0x72, 0x49, 0x38, 0x71, 0x33,
  0x6d, 0x2b, 0x61, 0x32, 0x38, 0x68, 0x0a, 0x65, 0x51, 0x50, 0x4a, 0x42,
  0x79, 0x6d, 0x73, 0x59, 0x48, 0x4d, 0x63, 0x42, 0x33, 0x4d, 0x50, 0x66,
  0x38, 0x58, 0x2b, 0x32, 0x48, 0x2f, 0x6d, 0x37, 0x51, 0x66, 0x51, 0x66,
  0x32, 0x61, 0x68, 0x4e, 0x69, 0x48, 0x30, 0x77, 0x69, 0x51, 0x42, 0x39,
  0x38, 0x61, 0x79, 0x54, 0x65, 0x76, 0x4e, 0x7a, 0x31, 0x64, 0x35, 0x4d,
  0x47, 0x64, 0x66, 0x61, 0x4c, 0x44, 0x6e, 0x64, 0x54, 0x34, 0x32, 0x0a,
  0x48, 0x6a, 0x48, 0x74, 0x34, 0x56, 0x75, 0x66, 0x71, 0x68, 0x72, 0x51,
  0x4e, 0x58, 0x49, 0x73, 0x4c, 0x6e, 0x41, 0x55, 0x76, 0x54, 0x73, 0x30,
  0x76, 0x4a, 0x73, 0x62, 0x42, 0x50, 0x50, 0x79, 0x38, 0x52, 0x4c, 0x38,
  0x61, 0x57, 0x4d, 0x76, 0x63, 0x4e, 0x50, 0x66, 0x4e, 0x53, 0x7a, 0x73,
  0x77, 0x33, 0x41, 0x52, 0x39, 0x76, 0x2f, 0x58, 0x54, 0x2b, 0x6f, 0x49,
  0x71, 0x4f, 0x44, 0x36, 0x0a, 0x78, 0x51, 0x46, 0x31, 0x31, 0x63, 0x62,
  0x31, 0x49, 0x47, 0x2f, 0x68, 0x34, 0x32, 0x5a, 0x31, 0x66, 0x74, 0x55,
  0x4f, 0x71, 0x68, 0x66, 0x68, 0x4e, 0x69, 0x6e, 0x71, 0x4c, 0x48, 0x51,
  0x76, 0x4b, 0x62, 0x6b, 0x54, 0x59, 0x6d, 0x57, 0x65, 0x66, 0x44, 0x77,
  0x43, 0x59, 0x65, 0x61, 0x4e, 0x65, 0x33, 0x39, 0x53, 0x6a, 0x6d, 0x2f,
  0x6b, 0x57, 0x41, 0x34, 0x7a, 0x39, 0x34, 0x32, 0x64, 0x0a, 0x6f, 0x38,
  0x6a, 0x7a, 0x65, 0x73, 0x6f, 0x58, 0x42, 0x43, 0x49, 0x59, 0x7a, 0x54,
  0x61, 0x35, 0x53, 0x4d, 0x33, 0x50, 0x2f, 0x32, 0x47, 0x38, 0x79, 0x49,
  0x73, 0x55, 0x31, 0x70, 0x53, 0x35, 0x45, 0x39, 0x42, 0x35, 0x72, 0x39,
  0x2b, 0x6e, 0x76, 0x54, 0x6c, 0x50, 0x7a, 0x70, 0x5a, 0x34, 0x36, 0x63,
  0x39, 0x78, 0x58, 0x5a, 0x6e, 0x73, 0x39, 0x32, 0x56, 0x33, 0x41, 0x6c,
  0x66, 0x77, 0x0a, 0x58, 0x58, 0x42, 0x47, 0x66, 0x54, 0x55, 0x2b, 0x69,
  0x56, 0x39, 0x2f, 0x37, 0x52, 0x65, 0x52, 0x2b, 0x73, 0x31, 0x67, 0x62,
  0x67, 0x6c, 0x46, 0x6c, 0x68, 0x68, 0x50, 0x35, 0x59, 0x31, 0x77, 0x36,
  0x43, 0x70, 0x53, 0x69, 0x38, 0x41, 0x49, 0x62, 0x72, 0x48, 0x4a, 0x73,
  0x42, 0x4c, 0x4b, 0x5a, 0x4a, 0x38, 0x43, 0x4a, 0x67, 0x6a, 0x68, 0x6e,
  0x43, 0x50, 0x57, 0x63, 0x49, 0x78, 0x4a, 0x0a, 0x44, 0x4b, 0x42, 0x46,
  0x7a, 0x61, 0x78, 0x30, 0x69, 0x30, 0x42, 0x6a, 0x4c, 0x6f, 0x44, 0x4d,
  0x66, 0x77, 0x58, 0x6d, 0x56, 0x68, 0x39, 0x4a, 0x42, 0x4e, 0x4c, 0x6b,
  0x50, 0x31, 0x79, 0x38, 0x35, 0x65, 0x6f, 0x5a, 0x47, 0x6b, 0x47, 0x30,
  0x62, 0x71, 0x35, 0x48, 0x52, 0x36, 0x76, 0x51, 0x35, 0x64, 0x55, 0x49,
  0x52, 0x6f, 0x74, 0x51, 0x6c, 0x4e, 0x4f, 0x37, 0x6b, 0x6e, 0x63, 0x36,
  0x0a, 0x6d, 0x34, 0x6a, 0x58, 0x65, 0x63, 0x53, 0x4a, 0x63, 0x2f, 0x46,
  0x2f, 0x4d, 0x2b, 0x76, 0x6d, 0x71, 0x4f, 0x4d, 0x63, 0x39, 0x49, 0x52,
  0x41, 0x67, 0x4d, 0x6f, 0x46, 0x68, 0x33, 0x72, 0x78, 0x32, 0x7a, 0x72,
  0x46, 0x46, 0x42, 0x73, 0x36, 0x32, 0x53, 0x2f, 0x6d, 0x2b, 0x74, 0x67,
  0x70, 0x72, 0x7a, 0x71, 0x55, 0x49, 0x34, 0x4c, 0x49, 0x67, 0x51, 0x4e,
  0x36, 0x33, 0x46, 0x70, 0x70, 0x0a, 0x31, 0x35, 0x48, 0x65, 0x6f, 0x6e,
  0x50, 0x31, 0x6d, 0x2b, 0x4e, 0x4a, 0x37, 0x59, 0x6c, 0x35, 0x54, 0x35,
  0x43, 0x35, 0x2b, 0x31, 0x2b, 0x45, 0x6c, 0x57, 0x31, 0x6f, 0x2b, 0x42,
  0x71, 0x4b, 0x2f, 0x48, 0x52, 0x6c, 0x2f, 0x64, 0x6c, 0x61, 0x39, 0x53,
  0x77, 0x55, 0x4b, 0x75, 0x75, 0x75, 0x4e, 0x33, 0x53, 0x58, 0x37, 0x67,
  0x67, 0x4c, 0x6e, 0x45, 0x71, 0x71, 0x2b, 0x7a, 0x72, 0x41, 0x0a, 0x55,
  0x6c, 0x7a, 0x6f, 0x51, 0x42, 0x4b, 0x36, 0x71, 0x4b, 0x67, 0x31, 0x2f,
  0x59, 0x52, 0x32, 0x37, 0x6c, 0x6c, 0x35, 0x57, 0x46, 0x6f, 0x77, 0x48,
  0x49, 0x62, 0x32, 0x32, 0x41, 0x30, 0x74, 0x38, 0x69, 0x79, 0x6c, 0x41,
  0x72, 0x6d, 0x33, 0x44, 0x4e, 0x46, 0x66, 0x38, 0x38, 0x32, 0x77, 0x45,
  0x73, 0x56, 0x71, 0x75, 0x69, 0x79, 0x68, 0x69, 0x2f, 0x6d, 0x38, 0x76,
  0x42, 0x6d, 0x46, 0x0a, 0x43, 0x77, 0x4f, 0x74, 0x48, 0x58, 0x70, 0x78,
  0x59, 0x78, 0x76, 0x6f, 0x45, 0x44, 0x4b, 0x6f, 0x69, 0x7a, 0x57, 0x4e,
  0x69, 0x32, 0x72, 0x4d, 0x70, 0x32, 0x2b, 0x5a, 0x58, 0x34, 0x78, 0x46,
  0x63, 0x52, 0x77, 0x57, 0x52, 0x4a, 0x57, 0x43, 0x34, 0x67, 0x39, 0x64,
  0x69, 0x70, 0x5a, 0x78, 0x70, 0x2f, 0x63, 0x46, 0x7a, 0x78, 0x6f, 0x3d,
  0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45,
  0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d,
  0x2d, 0x2d, 0x0a
};

const std::vector<char> server_key =
{
  0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x52,
  0x53, 0x41, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4b,
  0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a, 0x4d, 0x49, 0x49, 0x4a,
  0x4b, 0x51, 0x49, 0x42, 0x41, 0x41, 0x4b, 0x43, 0x41, 0x67, 0x45, 0x41,
  0x73, 0x57, 0x4d, 0x31, 0x53, 0x6c, 0x64, 0x31, 0x33, 0x34, 0x6e, 0x67,
  0x4e, 0x38, 0x41, 0x66, 0x51, 0x35, 0x43, 0x59, 0x35, 0x31, 0x38, 0x56,
  0x74, 0x46, 0x6e, 0x4a, 0x6f, 0x50, 0x38, 0x45, 0x34, 0x39, 0x72, 0x70,
  0x78, 0x52, 0x52, 0x4b, 0x62, 0x65, 0x63, 0x48, 0x6e, 0x47, 0x77, 0x4e,
  0x0a, 0x56, 0x4c, 0x34, 0x43, 0x6e, 0x74, 0x41, 0x6e, 0x79, 0x47, 0x6e,
  0x32, 0x2b, 0x55, 0x46, 0x77, 0x69, 0x51, 0x41, 0x68, 0x53, 0x32, 0x48,
  0x33, 0x74, 0x43, 0x58, 0x77, 0x6b, 0x73, 0x68, 0x66, 0x41, 0x71, 0x63,
  0x61, 0x63, 0x71, 0x39, 0x4b, 0x37, 0x74, 0x52, 0x2f, 0x42, 0x48, 0x56,
  0x72, 0x2f, 0x66, 0x4c, 0x4d, 0x59, 0x31, 0x34, 0x32, 0x61, 0x47, 0x4a,
  0x58, 0x41, 0x78, 0x71, 0x62, 0x0a, 0x46, 0x6c, 0x42, 0x33, 0x67, 0x58,
  0x4a, 0x4d, 0x54, 0x56, 0x46, 0x44, 0x77, 0x77, 0x58, 0x66, 0x38, 0x59,
  0x76, 0x72, 0x57, 0x6c, 0x57, 0x38, 0x69, 0x75, 0x64, 0x74, 0x48, 0x57,
  0x46, 0x49, 0x6a, 0x79, 0x7a, 0x6c, 0x76, 0x61, 0x59, 0x6e, 0x51, 0x4f,
  0x4a, 0x37, 0x53, 0x4f, 0x2b, 0x55, 0x36, 0x50, 0x4e, 0x34, 0x45, 0x6e,
  0x7a, 0x2f, 0x45, 0x48, 0x41, 0x6b, 0x63, 0x64, 0x46, 0x77, 0x0a, 0x47,
  0x69, 0x31, 0x55, 0x56, 0x78, 0x6d, 0x76, 0x64, 0x38, 0x5a, 0x52, 0x52,
  0x36, 0x64, 0x79, 0x48, 0x4b, 0x6b, 0x42, 0x70, 0x49, 0x76, 0x68, 0x67,
  0x63, 0x6d, 0x4f, 0x50, 0x59, 0x53, 0x46, 0x76, 0x58, 0x5a, 0x6a, 0x6a,
  0x79, 0x77, 0x6e, 0x34, 0x6e, 0x66, 0x67, 0x39, 0x43, 0x5a, 0x77, 0x49,
  0x49, 0x35, 0x37, 0x57, 0x39, 0x66, 0x62, 0x6c, 0x62, 0x48, 0x6a, 0x5a,
  0x31, 0x52, 0x6e, 0x0a, 0x54, 0x2f, 0x79, 0x7a, 0x61, 0x6a, 0x30, 0x4c,
  0x61, 0x65, 0x62, 0x4e, 0x31, 0x43, 0x7a, 0x58, 0x43, 0x6c, 0x73, 0x52,
  0x35, 0x71, 0x50, 0x35, 0x4e, 0x49, 0x4e, 0x78, 0x37, 0x2b, 0x33, 0x46,
  0x30, 0x44, 0x59, 0x4c, 0x6b, 0x49, 0x59, 0x77, 0x38, 0x51, 0x6a, 0x6f,
  0x51, 0x31, 0x59, 0x5a, 0x54, 0x63, 0x51, 0x45, 0x64, 0x70, 0x47, 0x50,
  0x68, 0x35, 0x58, 0x69, 0x62, 0x67, 0x65, 0x48, 0x0a, 0x44, 0x73, 0x31,
  0x58, 0x57, 0x39, 0x4e, 0x33, 0x62, 0x57, 0x6f, 0x63, 0x62, 0x76, 0x47,
  0x49, 0x50, 0x35, 0x4f, 0x36, 0x4d, 0x48, 0x64, 0x34, 0x51, 0x48, 0x31,
  0x4a, 0x72, 0x32, 0x69, 0x4b, 0x44, 0x79, 0x72, 0x37, 0x36, 0x44, 0x49,
  0x65, 0x6d, 0x2f, 0x77, 0x32, 0x30, 0x4e, 0x35, 0x52, 0x68, 0x76, 0x35,
  0x72, 0x34, 0x78, 0x4a, 0x39, 0x6e, 0x47, 0x6d, 0x4c, 0x73, 0x77, 0x31,
  0x61, 0x0a, 0x54, 0x42, 0x6a, 0x35, 0x4b, 0x30, 0x46, 0x32, 0x34, 0x78,
  0x4d, 0x5a, 0x30, 0x67, 0x76, 0x41, 0x45, 0x38, 0x71, 0x50, 0x57, 0x4a,
  0x36, 0x49, 0x52, 0x61, 0x6e, 0x71, 0x41, 0x56, 0x72, 0x57, 0x6f, 0x75,
  0x58, 0x47, 0x54, 0x4c, 0x33, 0x65, 0x58, 0x44, 0x61, 0x30, 0x52, 0x56,
  0x33, 0x6d, 0x63, 0x65, 0x42, 0x5a, 0x43, 0x6e, 0x39, 0x73, 0x50, 0x4f,
  0x72, 0x4d, 0x5a, 0x61, 0x74, 0x68, 0x0a, 0x77, 0x68, 0x67, 0x55, 0x77,
  0x31, 0x78, 0x6d, 0x73, 0x63, 0x7a, 0x2b, 0x33, 0x2b, 0x6f, 0x70, 0x4f,
  0x79, 0x72, 0x41, 0x44, 0x73, 0x37, 0x63, 0x61, 0x39, 0x6e, 0x42, 0x56,
  0x75, 0x78, 0x64, 0x4f, 0x4e, 0x76, 0x34, 0x77, 0x6b, 0x53, 0x4d, 0x65,
  0x63, 0x68, 0x6f, 0x34, 0x61, 0x48, 0x76, 0x36, 0x56, 0x75, 0x48, 0x4f,
  0x51, 0x33, 0x61, 0x49, 0x77, 0x39, 0x58, 0x4a, 0x35, 0x35, 0x34, 0x0a,
  0x79, 0x54, 0x50, 0x4d, 0x35, 0x4e, 0x38, 0x56, 0x6f, 0x49, 0x41, 0x56,
  0x54, 0x4d, 0x78, 0x50, 0x47, 0x69, 0x65, 0x69, 0x46, 0x4d, 0x6e, 0x55,
  0x43, 0x4a, 0x51, 0x45, 0x7a, 0x33, 0x73, 0x34, 0x72, 0x69, 0x50, 0x6e,
  0x38, 0x61, 0x4f, 0x75, 0x6a, 0x4b, 0x73, 0x48, 0x59, 0x6f, 0x70, 0x43,
  0x62, 0x39, 0x68, 0x58, 0x38, 0x47, 0x67, 0x5a, 0x4f, 0x79, 0x76, 0x6b,
  0x76, 0x36, 0x64, 0x77, 0x0a, 0x7a, 0x72, 0x49, 0x37, 0x47, 0x4b, 0x4e,
  0x52, 0x57, 0x72, 0x4c, 0x5a, 0x50, 0x61, 0x52, 0x67, 0x4a, 0x77, 0x4e,
  0x47, 0x51, 0x37, 0x70, 0x48, 0x6d, 0x4e, 0x49, 0x37, 0x34, 0x43, 0x33,
  0x38, 0x2b, 0x31, 0x78, 0x67, 0x6e, 0x67, 0x4c, 0x54, 0x5a, 0x31, 0x4d,
  0x59, 0x34, 0x32, 0x39, 0x79, 0x77, 0x52, 0x76, 0x61, 0x76, 0x64, 0x53,
  0x71, 0x34, 0x47, 0x44, 0x77, 0x43, 0x46, 0x34, 0x69, 0x0a, 0x30, 0x73,
  0x4b, 0x66, 0x39, 0x33, 0x5a, 0x66, 0x45, 0x31, 0x53, 0x2f, 0x38, 0x55,
  0x51, 0x75, 0x6c, 0x4d, 0x38, 0x55, 0x41, 0x58, 0x2b, 0x4a, 0x38, 0x4e,
  0x34, 0x67, 0x52, 0x44, 0x51, 0x4f, 0x65, 0x47, 0x2f, 0x64, 0x43, 0x41,
  0x76, 0x69, 0x39, 0x73, 0x56, 0x63, 0x6a, 0x7a, 0x67, 0x52, 0x72, 0x7a,
  0x71, 0x4d, 0x2b, 0x58, 0x66, 0x42, 0x7a, 0x53, 0x63, 0x43, 0x41, 0x77,
  0x45, 0x41, 0x0a, 0x41, 0x51, 0x4b, 0x43, 0x41, 0x67, 0x42, 0x67, 0x2f,
  0x62, 0x66, 0x54, 0x73, 0x45, 0x4b, 0x35, 0x4f, 0x58, 0x41, 0x70, 0x79,
  0x35, 0x6a, 0x4d, 0x6e, 0x72, 0x47, 0x63, 0x51, 0x50, 0x64, 0x6a, 0x4a,
  0x33, 0x30, 0x42, 0x31, 0x4b, 0x37, 0x64, 0x7a, 0x34, 0x4c, 0x6d, 0x79,
  0x5a, 0x4e, 0x77, 0x79, 0x46, 0x50, 0x33, 0x43, 0x58, 0x57, 0x34, 0x6b,
  0x6a, 0x52, 0x6f, 0x6c, 0x62, 0x52, 0x4b, 0x0a, 0x39, 0x76, 0x57, 0x64,
  0x6b, 0x46, 0x52, 0x78, 0x39, 0x47, 0x70, 0x41, 0x42, 0x34, 0x38, 0x6a,
  0x4a, 0x32, 0x4f, 0x46, 0x50, 0x70, 0x34, 0x45, 0x6d, 0x30, 0x33, 0x77,
  0x79, 0x7a, 0x77, 0x54, 0x6e, 0x6f, 0x6a, 0x63, 0x37, 0x54, 0x39, 0x68,
  0x47, 0x58, 0x4c, 0x38, 0x47, 0x6a, 0x56, 0x78, 0x6d, 0x65, 0x4f, 0x74,
  0x78, 0x4d, 0x78, 0x72, 0x78, 0x51, 0x2b, 0x79, 0x37, 0x63, 0x59, 0x65,
  0x0a, 0x75, 0x49, 0x4a, 0x75, 0x6a, 0x6a, 0x58, 0x47, 0x6f, 0x78, 0x54,
  0x4b, 0x7a, 0x66, 0x70, 0x4c, 0x6b, 0x51, 0x4b, 0x75, 0x66, 0x39, 0x54,
  0x6d, 0x78, 0x45, 0x76, 0x53, 0x43, 0x4a, 0x6d, 0x4a, 0x39, 0x73, 0x77,
  0x6d, 0x4d, 0x79, 0x6d, 0x65, 0x76, 0x68, 0x45, 0x33, 0x4f, 0x72, 0x56,
  0x55, 0x54, 0x5a, 0x7a, 0x2f, 0x78, 0x74, 0x36, 0x65, 0x30, 0x59, 0x34,
  0x2b, 0x47, 0x63, 0x4e, 0x42, 0x0a, 0x6f, 0x47, 0x51, 0x73, 0x34, 0x37,
  0x65, 0x58, 0x53, 0x43, 0x6d, 0x6e, 0x79, 0x50, 0x78, 0x43, 0x74, 0x4f,
  0x78, 0x62, 0x59, 0x71, 0x79, 0x6c, 0x7a, 0x61, 0x66, 0x65, 0x54, 0x75,
  0x78, 0x33, 0x2f, 0x63, 0x67, 0x34, 0x64, 0x78, 0x50, 0x30, 0x47, 0x54,
  0x51, 0x47, 0x49, 0x64, 0x37, 0x6b, 0x32, 0x4f, 0x46, 0x59, 0x54, 0x47,
  0x51, 0x34, 0x37, 0x68, 0x6c, 0x44, 0x79, 0x36, 0x45, 0x45, 0x0a, 0x42,
  0x4c, 0x6b, 0x69, 0x66, 0x47, 0x6f, 0x51, 0x4e, 0x58, 0x39, 0x79, 0x4e,
  0x74, 0x49, 0x36, 0x44, 0x6d, 0x30, 0x73, 0x48, 0x54, 0x78, 0x39, 0x2f,
  0x69, 0x38, 0x51, 0x6c, 0x4f, 0x38, 0x4a, 0x76, 0x43, 0x38, 0x54, 0x4d,
  0x6d, 0x36, 0x66, 0x67, 0x4d, 0x42, 0x58, 0x2f, 0x48, 0x73, 0x59, 0x54,
  0x62, 0x49, 0x44, 0x4b, 0x34, 0x61, 0x44, 0x5a, 0x32, 0x2b, 0x4f, 0x75,
  0x2b, 0x2b, 0x66, 0x0a, 0x47, 0x64, 0x66, 0x32, 0x4b, 0x59, 0x61, 0x77,
  0x44, 0x4a, 0x78, 0x50, 0x68, 0x2b, 0x4e, 0x75, 0x6a, 0x35, 0x4c, 0x4d,
  0x6f, 0x45, 0x4a, 0x73, 0x7a, 0x4c, 0x6e, 0x7a, 0x63, 0x4c, 0x79, 0x36,
  0x41, 0x4b, 0x49, 0x6c, 0x4e, 0x69, 0x79, 0x6e, 0x63, 0x55, 0x70, 0x39,
  0x73, 0x41, 0x49, 0x6d, 0x6f, 0x49, 0x6b, 0x62, 0x4c, 0x50, 0x61, 0x33,
  0x65, 0x43, 0x76, 0x49, 0x63, 0x41, 0x47, 0x43, 0x0a, 0x4c, 0x56, 0x65,
  0x65, 0x7a, 0x4e, 0x4b, 0x52, 0x57, 0x6f, 0x4d, 0x4f, 0x56, 0x6c, 0x50,
  0x78, 0x69, 0x6a, 0x43, 0x64, 0x31, 0x7a, 0x77, 0x43, 0x6b, 0x4b, 0x73,
  0x47, 0x65, 0x61, 0x78, 0x6c, 0x70, 0x71, 0x33, 0x50, 0x38, 0x45, 0x41,
  0x62, 0x4f, 0x62, 0x72, 0x44, 0x41, 0x74, 0x30, 0x76, 0x37, 0x6a, 0x6c,
  0x4d, 0x47, 0x56, 0x47, 0x4b, 0x54, 0x30, 0x52, 0x71, 0x4c, 0x70, 0x79,
  0x79, 0x0a, 0x72, 0x56, 0x41, 0x6b, 0x4d, 0x4a, 0x61, 0x75, 0x51, 0x49,
  0x6a, 0x76, 0x47, 0x70, 0x67, 0x67, 0x6b, 0x56, 0x2b, 0x64, 0x6a, 0x38,
  0x4a, 0x47, 0x4e, 0x74, 0x64, 0x48, 0x7a, 0x64, 0x6f, 0x47, 0x73, 0x36,
  0x66, 0x63, 0x36, 0x59, 0x31, 0x46, 0x47, 0x42, 0x51, 0x37, 0x33, 0x71,
  0x72, 0x59, 0x79, 0x36, 0x58, 0x74, 0x35, 0x63, 0x34, 0x57, 0x47, 0x31,
  0x4b, 0x30, 0x6e, 0x54, 0x67, 0x75, 0x0a, 0x2f, 0x56, 0x37, 0x69, 0x4e,
  0x4f, 0x41, 0x66, 0x6b, 0x32, 0x62, 0x6a, 0x34, 0x71, 0x74, 0x65, 0x77,
  0x53, 0x78, 0x77, 0x58, 0x6c, 0x58, 0x6a, 0x66, 0x6c, 0x32, 0x42, 0x33,
  0x2b, 0x6c, 0x52, 0x4f, 0x6c, 0x51, 0x76, 0x4f, 0x69, 0x78, 0x52, 0x74,
  0x55, 0x30, 0x61, 0x38, 0x4a, 0x72, 0x56, 0x43, 0x66, 0x79, 0x55, 0x2f,
  0x58, 0x52, 0x47, 0x6d, 0x4f, 0x70, 0x32, 0x32, 0x73, 0x61, 0x41, 0x0a,
  0x50, 0x78, 0x4a, 0x63, 0x43, 0x4d, 0x79, 0x47, 0x54, 0x74, 0x41, 0x54,
  0x4f, 0x33, 0x72, 0x72, 0x48, 0x34, 0x43, 0x37, 0x4c, 0x41, 0x31, 0x57,
  0x77, 0x41, 0x6f, 0x59, 0x6a, 0x43, 0x44, 0x42, 0x2f, 0x4c, 0x57, 0x4c,
  0x2f, 0x43, 0x73, 0x75, 0x4e, 0x4e, 0x52, 0x67, 0x62, 0x75, 0x35, 0x51,
  0x6b, 0x50, 0x33, 0x4a, 0x52, 0x4b, 0x32, 0x44, 0x69, 0x66, 0x33, 0x6c,
  0x6e, 0x66, 0x41, 0x67, 0x0a, 0x66, 0x48, 0x43, 0x49, 0x57, 0x35, 0x79,
  0x5a, 0x38, 0x41, 0x73, 0x58, 0x53, 0x76, 0x76, 0x45, 0x4f, 0x78, 0x51,
  0x58, 0x67, 0x53, 0x62, 0x37, 0x37, 0x6e, 0x49, 0x46, 0x2f, 0x74, 0x4f,
  0x30, 0x34, 0x39, 0x74, 0x63, 0x46, 0x54, 0x4a, 0x62, 0x54, 0x4c, 0x73,
  0x62, 0x44, 0x44, 0x43, 0x54, 0x41, 0x51, 0x4b, 0x43, 0x41, 0x51, 0x45,
  0x41, 0x33, 0x77, 0x4a, 0x2b, 0x70, 0x2b, 0x54, 0x51, 0x0a, 0x67, 0x52,
  0x56, 0x62, 0x64, 0x67, 0x33, 0x39, 0x2f, 0x64, 0x53, 0x57, 0x36, 0x77,
  0x59, 0x66, 0x6b, 0x31, 0x5a, 0x6d, 0x32, 0x64, 0x70, 0x6d, 0x57, 0x2f,
  0x36, 0x76, 0x64, 0x6f, 0x50, 0x49, 0x46, 0x72, 0x6d, 0x41, 0x52, 0x79,
  0x30, 0x49, 0x51, 0x49, 0x65, 0x32, 0x48, 0x79, 0x38, 0x2f, 0x2b, 0x77,
  0x6a, 0x59, 0x4d, 0x42, 0x6c, 0x39, 0x72, 0x4a, 0x6d, 0x54, 0x43, 0x4a,
  0x76, 0x51, 0x0a, 0x44, 0x47, 0x6c, 0x44, 0x51, 0x50, 0x69, 0x48, 0x6b,
  0x34, 0x73, 0x5a, 0x30, 0x6d, 0x45, 0x47, 0x6b, 0x6d, 0x77, 0x36, 0x37,
  0x49, 0x79, 0x46, 0x64, 0x45, 0x76, 0x43, 0x4e, 0x32, 0x6d, 0x49, 0x6d,
  0x65, 0x68, 0x45, 0x43, 0x4f, 0x65, 0x36, 0x65, 0x55, 0x77, 0x45, 0x34,
  0x67, 0x6f, 0x59, 0x59, 0x4c, 0x55, 0x4b, 0x4b, 0x75, 0x48, 0x38, 0x6e,
  0x6d, 0x6c, 0x4b, 0x48, 0x69, 0x75, 0x2b, 0x0a, 0x48, 0x72, 0x37, 0x6c,
  0x72, 0x58, 0x69, 0x64, 0x76, 0x50, 0x35, 0x67, 0x5a, 0x6a, 0x4c, 0x66,
  0x35, 0x66, 0x73, 0x6b, 0x7a, 0x47, 0x2f, 0x6e, 0x53, 0x39, 0x54, 0x70,
  0x4b, 0x63, 0x55, 0x59, 0x55, 0x39, 0x6b, 0x6b, 0x32, 0x73, 0x39, 0x37,
  0x4b, 0x34, 0x2f, 0x64, 0x36, 0x79, 0x70, 0x42, 0x56, 0x38, 0x4f, 0x37,
  0x52, 0x62, 0x6e, 0x4c, 0x6f, 0x64, 0x41, 0x4c, 0x39, 0x4d, 0x58, 0x43,
  0x0a, 0x64, 0x66, 0x79, 0x6f, 0x42, 0x4f, 0x71, 0x70, 0x38, 0x43, 0x6e,
  0x47, 0x67, 0x31, 0x53, 0x49, 0x69, 0x50, 0x2b, 0x4f, 0x56, 0x55, 0x65,
  0x4d, 0x6b, 0x69, 0x6b, 0x44, 0x72, 0x5a, 0x71, 0x48, 0x78, 0x48, 0x55,
  0x70, 0x54, 0x6a, 0x58, 0x66, 0x68, 0x74, 0x46, 0x44, 0x4f, 0x36, 0x49,
  0x70, 0x51, 0x68, 0x59, 0x4e, 0x6d, 0x46, 0x72, 0x2f, 0x73, 0x4b, 0x69,
  0x6b, 0x43, 0x5a, 0x4f, 0x36, 0x0a, 0x43, 0x63, 0x35, 0x74, 0x4d, 0x4c,
  0x31, 0x4c, 0x4c, 0x35, 0x74, 0x30, 0x6f, 0x76, 0x4f, 0x36, 0x2b, 0x56,
  0x31, 0x55, 0x6e, 0x59, 0x65, 0x45, 0x33, 0x61, 0x4b, 0x56, 0x6d, 0x65,
  0x32, 0x37, 0x30, 0x72, 0x4a, 0x2f, 0x73, 0x47, 0x6a, 0x68, 0x53, 0x32,
  0x62, 0x48, 0x74, 0x37, 0x49, 0x6d, 0x53, 0x51, 0x38, 0x6c, 0x39, 0x58,
  0x37, 0x77, 0x50, 0x47, 0x43, 0x2f, 0x75, 0x66, 0x39, 0x37, 0x0a, 0x6f,
  0x57, 0x38, 0x74, 0x43, 0x67, 0x37, 0x4c, 0x47, 0x57, 0x36, 0x39, 0x51,
  0x51, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x79, 0x36, 0x44, 0x35, 0x63,
  0x54, 0x57, 0x32, 0x53, 0x74, 0x6a, 0x69, 0x66, 0x67, 0x58, 0x4e, 0x4f,
  0x76, 0x51, 0x5a, 0x31, 0x65, 0x6a, 0x6c, 0x44, 0x36, 0x74, 0x72, 0x6f,
  0x6c, 0x65, 0x57, 0x72, 0x51, 0x53, 0x43, 0x62, 0x74, 0x32, 0x58, 0x76,
  0x42, 0x37, 0x6b, 0x0a, 0x73, 0x4d, 0x5a, 0x41, 0x7a, 0x39, 0x56, 0x69,
  0x44, 0x44, 0x46, 0x6a, 0x71, 0x4e, 0x77, 0x71, 0x78, 0x79, 0x35, 0x4f,
  0x33, 0x70, 0x78, 0x79, 0x76, 0x6c, 0x33, 0x4c, 0x52, 0x6d, 0x33, 0x2f,
  0x59, 0x79, 0x4e, 0x77, 0x55, 0x69, 0x71, 0x6b, 0x79, 0x76, 0x44, 0x47,
  0x39, 0x37, 0x61, 0x58, 0x63, 0x44, 0x30, 0x50, 0x7a, 0x6b, 0x38, 0x55,
  0x43, 0x48, 0x38, 0x72, 0x59, 0x76, 0x71, 0x77, 0x0a, 0x77, 0x53, 0x31,
  0x79, 0x50, 0x68, 0x76, 0x47, 0x50, 0x6f, 0x70, 0x6d, 0x7a, 0x4c, 0x4b,
  0x56, 0x6c, 0x6a, 0x50, 0x4e, 0x42, 0x79, 0x42, 0x57, 0x77, 0x6e, 0x42,
  0x58, 0x33, 0x6b, 0x62, 0x65, 0x33, 0x54, 0x5a, 0x74, 0x6b, 0x72, 0x78,
  0x62, 0x35, 0x61, 0x6b, 0x30, 0x70, 0x64, 0x2b, 0x64, 0x79, 0x75, 0x63,
  0x56, 0x35, 0x4f, 0x4f, 0x72, 0x70, 0x78, 0x57, 0x36, 0x44, 0x55, 0x45,
  0x33, 0x0a, 0x73, 0x30, 0x65, 0x43, 0x72, 0x4c, 0x65, 0x45, 0x78, 0x56,
  0x4a, 0x48, 0x54, 0x6f, 0x78, 0x45, 0x6f, 0x77, 0x79, 0x47, 0x33, 0x74,
  0x72, 0x53, 0x6c, 0x64, 0x64, 0x41, 0x35, 0x30, 0x2b, 0x6e, 0x6a, 0x55,
  0x43, 0x4e, 0x51, 0x50, 0x77, 0x6c, 0x5a, 0x58, 0x39, 0x6e, 0x30, 0x41,
  0x47, 0x45, 0x6e, 0x34, 0x61, 0x2b, 0x72, 0x6c, 0x45, 0x72, 0x42, 0x43,
  0x50, 0x30, 0x69, 0x4c, 0x61, 0x77, 0x0a, 0x54, 0x49, 0x37, 0x65, 0x6b,
  0x55, 0x71, 0x4a, 0x64, 0x79, 0x4f, 0x61, 0x72, 0x72, 0x37, 0x4e, 0x55,
  0x6d, 0x57, 0x61, 0x44, 0x42, 0x61, 0x2b, 0x6a, 0x38, 0x63, 0x79, 0x52,
  0x61, 0x44, 0x54, 0x46, 0x52, 0x34, 0x75, 0x69, 0x63, 0x36, 0x32, 0x73,
  0x43, 0x35, 0x45, 0x46, 0x72, 0x6c, 0x6e, 0x53, 0x5a, 0x64, 0x69, 0x7a,
  0x7a, 0x66, 0x36, 0x37, 0x72, 0x47, 0x6e, 0x6e, 0x6c, 0x65, 0x74, 0x0a,
  0x2b, 0x38, 0x2f, 0x36, 0x78, 0x4b, 0x36, 0x37, 0x69, 0x6a, 0x36, 0x61,
  0x30, 0x4e, 0x46, 0x72, 0x79, 0x55, 0x75, 0x64, 0x68, 0x75, 0x4a, 0x6a,
  0x36, 0x59, 0x4e, 0x6c, 0x7a, 0x46, 0x63, 0x30, 0x36, 0x56, 0x30, 0x69,
  0x59, 0x73, 0x47, 0x6f, 0x5a, 0x77, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41,
  0x6d, 0x62, 0x74, 0x6b, 0x69, 0x47, 0x54, 0x4a, 0x2f, 0x31, 0x49, 0x7a,
  0x76, 0x49, 0x77, 0x6b, 0x0a, 0x76, 0x57, 0x68, 0x68, 0x71, 0x52, 0x36,
  0x4e, 0x67, 0x63, 0x6f, 0x63, 0x47, 0x4b, 0x33, 0x66, 0x78, 0x69, 0x63,
  0x70, 0x32, 0x65, 0x38, 0x36, 0x62, 0x62, 0x2f, 0x75, 0x32, 0x43, 0x49,
  0x4a, 0x41, 0x45, 0x4d, 0x4e, 0x6e, 0x79, 0x32, 0x35, 0x55, 0x31, 0x70,
  0x6a, 0x66, 0x62, 0x54, 0x30, 0x31, 0x35, 0x6a, 0x2b, 0x72, 0x50, 0x36,
  0x4d, 0x53, 0x79, 0x48, 0x39, 0x52, 0x4c, 0x71, 0x4f, 0x0a, 0x36, 0x33,
  0x30, 0x47, 0x6a, 0x65, 0x70, 0x6f, 0x31, 0x32, 0x4e, 0x59, 0x73, 0x31,
  0x79, 0x6a, 0x57, 0x75, 0x6f, 0x6d, 0x74, 0x6f, 0x41, 0x2f, 0x74, 0x4b,
  0x6c, 0x53, 0x7a, 0x54, 0x6a, 0x42, 0x61, 0x59, 0x43, 0x6f, 0x46, 0x52,
  0x4b, 0x55, 0x66, 0x34, 0x59, 0x4e, 0x76, 0x6b, 0x59, 0x50, 0x47, 0x54,
  0x7a, 0x48, 0x35, 0x55, 0x69, 0x4f, 0x52, 0x53, 0x2b, 0x66, 0x73, 0x52,
  0x66, 0x6d, 0x0a, 0x31, 0x54, 0x51, 0x65, 0x54, 0x42, 0x56, 0x69, 0x46,
  0x32, 0x34, 0x72, 0x6a, 0x65, 0x72, 0x4f, 0x62, 0x59, 0x34, 0x57, 0x4e,
  0x62, 0x38, 0x79, 0x36, 0x41, 0x70, 0x57, 0x78, 0x36, 0x67, 0x6a, 0x35,
  0x6f, 0x48, 0x45, 0x6e, 0x36, 0x70, 0x2f, 0x5a, 0x50, 0x72, 0x2f, 0x44,
  0x43, 0x2f, 0x71, 0x57, 0x6c, 0x2f, 0x4b, 0x2f, 0x69, 0x2b, 0x64, 0x77,
  0x43, 0x77, 0x74, 0x76, 0x30, 0x58, 0x74, 0x0a, 0x5a, 0x43, 0x76, 0x49,
  0x4e, 0x78, 0x78, 0x39, 0x43, 0x73, 0x50, 0x77, 0x34, 0x49, 0x54, 0x30,
  0x4f, 0x49, 0x57, 0x68, 0x6a, 0x58, 0x6c, 0x72, 0x67, 0x6c, 0x69, 0x70,
  0x34, 0x73, 0x70, 0x73, 0x6a, 0x73, 0x6d, 0x50, 0x4b, 0x58, 0x71, 0x2b,
  0x4b, 0x6c, 0x70, 0x39, 0x67, 0x4c, 0x75, 0x71, 0x61, 0x36, 0x4f, 0x31,
  0x67, 0x51, 0x79, 0x66, 0x51, 0x4d, 0x64, 0x57, 0x71, 0x6a, 0x53, 0x7a,
  0x0a, 0x73, 0x64, 0x76, 0x65, 0x61, 0x62, 0x37, 0x4f, 0x38, 0x37, 0x77,
  0x4d, 0x36, 0x70, 0x4e, 0x54, 0x57, 0x6c, 0x34, 0x4c, 0x39, 0x78, 0x4c,
  0x56, 0x57, 0x59, 0x66, 0x48, 0x55, 0x6c, 0x72, 0x61, 0x68, 0x46, 0x6f,
  0x54, 0x37, 0x32, 0x51, 0x56, 0x31, 0x47, 0x4e, 0x6d, 0x37, 0x58, 0x64,
  0x57, 0x4d, 0x4b, 0x6b, 0x5a, 0x51, 0x69, 0x55, 0x47, 0x6d, 0x75, 0x44,
  0x44, 0x45, 0x5a, 0x33, 0x6c, 0x0a, 0x45, 0x47, 0x45, 0x77, 0x67, 0x51,
  0x4b, 0x43, 0x41, 0x51, 0x41, 0x35, 0x75, 0x66, 0x6e, 0x64, 0x47, 0x55,
  0x41, 0x44, 0x65, 0x66, 0x62, 0x44, 0x69, 0x54, 0x75, 0x45, 0x4d, 0x66,
  0x30, 0x39, 0x41, 0x68, 0x67, 0x6c, 0x32, 0x41, 0x2f, 0x63, 0x5a, 0x76,
  0x35, 0x46, 0x4d, 0x46, 0x6b, 0x56, 0x75, 0x75, 0x59, 0x77, 0x49, 0x34,
  0x58, 0x72, 0x67, 0x31, 0x69, 0x4f, 0x55, 0x73, 0x7a, 0x48, 0x0a, 0x37,
  0x68, 0x78, 0x31, 0x6d, 0x32, 0x7a, 0x5a, 0x4b, 0x49, 0x79, 0x64, 0x57,
  0x54, 0x62, 0x43, 0x4e, 0x75, 0x37, 0x51, 0x6d, 0x5a, 0x42, 0x6a, 0x39,
  0x34, 0x44, 0x35, 0x47, 0x6a, 0x4f, 0x37, 0x67, 0x49, 0x53, 0x33, 0x5a,
  0x75, 0x45, 0x4a, 0x70, 0x5a, 0x58, 0x63, 0x67, 0x39, 0x69, 0x48, 0x44,
  0x42, 0x34, 0x74, 0x6f, 0x69, 0x6f, 0x48, 0x71, 0x61, 0x32, 0x51, 0x59,
  0x2b, 0x6c, 0x51, 0x0a, 0x67, 0x34, 0x58, 0x66, 0x45, 0x2b, 0x57, 0x4b,
  0x50, 0x6b, 0x63, 0x71, 0x64, 0x51, 0x57, 0x44, 0x65, 0x37, 0x75, 0x39,
  0x50, 0x4e, 0x51, 0x6a, 0x58, 0x44, 0x47, 0x31, 0x2f, 0x6f, 0x59, 0x43,
  0x31, 0x6e, 0x51, 0x68, 0x62, 0x67, 0x4a, 0x61, 0x71, 0x69, 0x59, 0x76,
  0x7a, 0x45, 0x63, 0x32, 0x52, 0x39, 0x65, 0x46, 0x75, 0x47, 0x35, 0x6b,
  0x2b, 0x61, 0x6e, 0x57, 0x38, 0x76, 0x50, 0x46, 0x0a, 0x79, 0x4b, 0x79,
  0x45, 0x58, 0x51, 0x6c, 0x38, 0x4f, 0x36, 0x6e, 0x6b, 0x64, 0x5a, 0x35,
  0x72, 0x63, 0x69, 0x6c, 0x70, 0x4b, 0x64, 0x43, 0x7a, 0x48, 0x35, 0x43,
  0x72, 0x30, 0x6f, 0x39, 0x37, 0x64, 0x61, 0x48, 0x6c, 0x65, 0x76, 0x69,
  0x78, 0x44, 0x4d, 0x37, 0x7a, 0x74, 0x66, 0x6a, 0x2b, 0x35, 0x48, 0x36,
  0x48, 0x58, 0x31, 0x73, 0x64, 0x61, 0x51, 0x63, 0x35, 0x6f, 0x79, 0x72,
  0x54, 0x0a, 0x52, 0x70, 0x6d, 0x73, 0x58, 0x6c, 0x54, 0x77, 0x76, 0x66,
  0x4c, 0x73, 0x36, 0x47, 0x6d, 0x2f, 0x63, 0x74, 0x59, 0x53, 0x6e, 0x53,
  0x51, 0x61, 0x41, 0x59, 0x4e, 0x70, 0x39, 0x39, 0x73, 0x63, 0x6d, 0x52,
  0x45, 0x65, 0x62, 0x42, 0x4d, 0x57, 0x37, 0x72, 0x37, 0x4a, 0x52, 0x66,
  0x4a, 0x79, 0x52, 0x70, 0x54, 0x68, 0x4d, 0x37, 0x51, 0x55, 0x42, 0x67,
  0x4c, 0x75, 0x54, 0x53, 0x62, 0x48, 0x0a, 0x61, 0x7a, 0x59, 0x53, 0x61,
  0x72, 0x77, 0x6d, 0x78, 0x62, 0x50, 0x7a, 0x73, 0x43, 0x78, 0x6f, 0x33,
  0x36, 0x49, 0x31, 0x53, 0x71, 0x65, 0x71, 0x58, 0x49, 0x66, 0x4a, 0x2f,
  0x57, 0x4b, 0x54, 0x41, 0x6f, 0x49, 0x42, 0x41, 0x51, 0x44, 0x54, 0x69,
  0x67, 0x72, 0x2f, 0x79, 0x50, 0x4e, 0x4f, 0x73, 0x50, 0x37, 0x36, 0x30,
  0x78, 0x4d, 0x63, 0x42, 0x52, 0x49, 0x6e, 0x49, 0x67, 0x59, 0x72, 0x0a,
  0x64, 0x4c, 0x63, 0x58, 0x53, 0x56, 0x6f, 0x51, 0x76, 0x4d, 0x45, 0x59,
  0x38, 0x58, 0x43, 0x79, 0x4a, 0x6b, 0x35, 0x58, 0x62, 0x43, 0x6e, 0x42,
  0x2f, 0x62, 0x4e, 0x44, 0x59, 0x44, 0x6a, 0x74, 0x63, 0x7a, 0x6c, 0x58,
  0x58, 0x43, 0x78, 0x57, 0x4a, 0x2b, 0x4a, 0x71, 0x30, 0x75, 0x43, 0x4e,
  0x70, 0x6c, 0x77, 0x55, 0x31, 0x78, 0x37, 0x5a, 0x79, 0x6c, 0x34, 0x4a,
  0x6a, 0x70, 0x7a, 0x57, 0x0a, 0x53, 0x36, 0x30, 0x45, 0x30, 0x42, 0x41,
  0x6d, 0x70, 0x61, 0x65, 0x78, 0x31, 0x66, 0x61, 0x57, 0x52, 0x77, 0x50,
  0x4f, 0x54, 0x61, 0x5a, 0x4c, 0x50, 0x52, 0x4e, 0x4d, 0x44, 0x6d, 0x57,
  0x57, 0x73, 0x71, 0x72, 0x4c, 0x77, 0x6e, 0x44, 0x34, 0x4e, 0x49, 0x62,
  0x68, 0x75, 0x66, 0x30, 0x47, 0x55, 0x6c, 0x5a, 0x4c, 0x70, 0x41, 0x47,
  0x74, 0x4e, 0x42, 0x31, 0x64, 0x6d, 0x43, 0x65, 0x48, 0x0a, 0x56, 0x68,
  0x64, 0x47, 0x72, 0x54, 0x67, 0x35, 0x64, 0x41, 0x75, 0x4e, 0x79, 0x56,
  0x2b, 0x6c, 0x44, 0x46, 0x62, 0x37, 0x41, 0x5a, 0x57, 0x74, 0x32, 0x54,
  0x75, 0x6e, 0x6d, 0x4f, 0x69, 0x63, 0x57, 0x58, 0x51, 0x50, 0x48, 0x69,
  0x72, 0x36, 0x49, 0x65, 0x57, 0x6e, 0x6f, 0x2b, 0x64, 0x51, 0x57, 0x57,
  0x6f, 0x4d, 0x4d, 0x45, 0x6e, 0x72, 0x62, 0x54, 0x56, 0x2b, 0x54, 0x43,
  0x4e, 0x48, 0x0a, 0x73, 0x37, 0x44, 0x44, 0x69, 0x74, 0x6c, 0x6a, 0x54,
  0x4a, 0x62, 0x72, 0x44, 0x43, 0x33, 0x50, 0x34, 0x32, 0x39, 0x69, 0x35,
  0x75, 0x56, 0x52, 0x33, 0x61, 0x6c, 0x45, 0x53, 0x59, 0x48, 0x35, 0x34,
  0x42, 0x51, 0x35, 0x33, 0x59, 0x71, 0x52, 0x43, 0x57, 0x77, 0x4c, 0x42,
  0x48, 0x7a, 0x6b, 0x74, 0x71, 0x38, 0x58, 0x6f, 0x2b, 0x58, 0x39, 0x4a,
  0x6e, 0x6e, 0x6b, 0x78, 0x63, 0x48, 0x41, 0x0a, 0x66, 0x68, 0x7a, 0x33,
  0x79, 0x6a, 0x4c, 0x6d, 0x6b, 0x41, 0x65, 0x4d, 0x71, 0x65, 0x56, 0x66,
  0x61, 0x69, 0x70, 0x6b, 0x65, 0x76, 0x31, 0x74, 0x71, 0x6d, 0x45, 0x34,
  0x2f, 0x63, 0x6a, 0x30, 0x78, 0x5a, 0x63, 0x39, 0x65, 0x70, 0x44, 0x6b,
  0x4a, 0x2f, 0x33, 0x58, 0x71, 0x57, 0x59, 0x56, 0x38, 0x58, 0x64, 0x31,
  0x6f, 0x53, 0x5a, 0x64, 0x32, 0x4b, 0x63, 0x4e, 0x0a, 0x2d, 0x2d, 0x2d,
  0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x52, 0x53, 0x41, 0x20, 0x50, 0x52,
  0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d,
  0x2d, 0x2d, 0x0a
};

const std::vector<char> server_dh1024 =
{
  0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x44,
  0x48, 0x20, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53,
  0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a, 0x4d, 0x49, 0x47, 0x48, 0x41, 0x6f,
  0x47, 0x42, 0x41, 0x4b, 0x33, 0x62, 0x72, 0x50, 0x56, 0x68, 0x6e, 0x6a,
  0x67, 0x6e, 0x68, 0x69, 0x49, 0x7a, 0x38, 0x47, 0x79, 0x6d, 0x6f, 0x49,
  0x37, 0x77, 0x69, 0x33, 0x38, 0x71, 0x4f, 0x77, 0x6d, 0x35, 0x4d, 0x6e,
  0x30, 0x41, 0x52, 0x56, 0x69, 0x2b, 0x36, 0x5a, 0x69, 0x6e, 0x30, 0x51,
  0x4d, 0x50, 0x54, 0x32, 0x46, 0x48, 0x4a, 0x76, 0x34, 0x62, 0x0a, 0x56,
  0x66, 0x4c, 0x4a, 0x32, 0x61, 0x37, 0x48, 0x71, 0x56, 0x54, 0x75, 0x53,
  0x7a, 0x37, 0x47, 0x30, 0x58, 0x69, 0x34, 0x67, 0x67, 0x42, 0x51, 0x63,
  0x6a, 0x70, 0x6f, 0x73, 0x67, 0x68, 0x66, 0x73, 0x70, 0x5a, 0x52, 0x52,
  0x64, 0x75, 0x6f, 0x44, 0x53, 0x6d, 0x6a, 0x70, 0x45, 0x5a, 0x36, 0x76,
  0x32, 0x7a, 0x76, 0x43, 0x45, 0x55, 0x30, 0x48, 0x79, 0x57, 0x6f, 0x33,
  0x74, 0x67, 0x38, 0x0a, 0x35, 0x55, 0x71, 0x4c, 0x37, 0x63, 0x72, 0x65,
  0x64, 0x75, 0x51, 0x32, 0x64, 0x52, 0x6c, 0x43, 0x6a, 0x41, 0x56, 0x48,
  0x71, 0x47, 0x54, 0x31, 0x6a, 0x4f, 0x37, 0x34, 0x4a, 0x31, 0x37, 0x68,
  0x6d, 0x53, 0x79, 0x2b, 0x5a, 0x68, 0x52, 0x46, 0x38, 0x74, 0x6c, 0x6d,
  0x44, 0x49, 0x64, 0x61, 0x66, 0x65, 0x6f, 0x72, 0x41, 0x67, 0x45, 0x43,
  0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x44, 0x48,
  0x20, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x2d,
  0x2d, 0x2d, 0x2d, 0x2d, 0x0a
};
