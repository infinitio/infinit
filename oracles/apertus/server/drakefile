import drake
import drake.cxx
import drake.debian
import sys

library = None

build = None
check = None
install = None

def configure(elle,
              protocol,
              reactor,
              meta_client,
              boost = None,
              prefix = drake.Path('/usr/local'),
              cxx_toolkit = None,
              cxx_config = None):

  global library
  global build, check, install

  cxx_toolkit = cxx_toolkit or drake.cxx.Toolkit()
  cxx_config = cxx_config or drake.cxx.Config()

  protocol_lib = drake.copy(protocol.lib_dynamic, 'lib',
                            protocol.lib_dynamic.name().dirname())

  reactor_lib = drake.copy(reactor.lib_dynamic, 'lib',
                           reactor.lib_dynamic.name().dirname())

  elle_lib = drake.copy(elle.lib_dynamic, 'lib',
                        elle.lib_dynamic.name().dirname())

  meta_client_lib = drake.copy(meta_client.lib, 'lib', strip_prefix = True)

  apertus_sources = drake.nodes(
    'src/infinit/oracles/apertus/Apertus.cc',
    'src/infinit/oracles/apertus/Apertus.hh',
    'src/infinit/oracles/apertus/Accepter.cc',
    'src/infinit/oracles/apertus/Accepter.hh',
    'src/infinit/oracles/apertus/Transfer.cc',
    'src/infinit/oracles/apertus/Transfer.hh',
    'src/infinit/oracles/apertus/fwd.hh',
  )

  local_cxx_config = drake.cxx.Config(cxx_config)
  local_cxx_config.lib_path_runtime('.')
  local_cxx_config += boost.config()
  local_cxx_config += meta_client.config
  local_cxx_config.add_local_include_path('src/')
  local_cxx_config.add_local_include_path('../../hermes/server/src/')

  library = drake.cxx.DynLib('lib/apertus-server',
                             apertus_sources +
                             [reactor_lib, protocol_lib, meta_client_lib],
                             cxx_toolkit, local_cxx_config)
  build = drake.Rule('build')
  build << library

  #check
  test_cxx_config = drake.cxx.Config(local_cxx_config)
  test_cxx_config += boost.config_test()
  test_cxx_config += boost.config_system()
  test_cxx_config.lib_path_runtime('../lib')

  test_sources = drake.nodes(
   'tests/apertus.cc',
  )

  test_exe = drake.cxx.Executable('tests/apertus',
                                  test_sources +
                                  [library,
                                   protocol_lib,
                                   reactor_lib,
                                   elle_lib],
                                  cxx_toolkit,
                                  test_cxx_config)
  test = drake.Runner(exe = test_exe)

  check = drake.Rule('check')
  check << test.status

  ## ---------- ##
  ## Executable ##
  ## ---------- ##

  exe_cxx_config = drake.cxx.Config(local_cxx_config)
  exe_cxx_config += boost.config_system(link = False)
  exe_cxx_config.library_add(
    drake.copy(boost.system_dynamic,
               'lib', strip_prefix = True))
  exe_cxx_config += boost.config_program_options(link = False)
  exe_cxx_config.library_add(
    drake.copy(boost.program_options_dynamic,
               'lib', strip_prefix = True))
  exe_cxx_config.lib_path_runtime('../lib')

  exe_sources = drake.nodes('src/main.cc')

  apertus = drake.cxx.Executable(
    'bin/apertus',
    exe_sources + [library, reactor_lib, elle_lib],
    cxx_toolkit, exe_cxx_config)

  build << apertus

  ## ------- ##
  ## Install ##
  ## ------- ##

  install = drake.Rule('install')
  install << drake.install(apertus, prefix)

  ## ------ ##
  ## Debian ##
  ## ------ ##

  debian = drake.Rule('debian')
  debian_path = drake.Path('debian/opt/infinit/apertus')
  package = [drake.copy(apertus, debian_path)]
  git = drake.git.Git()
  with drake.templating.Context(content = {
      'version': git.version(),
      'version_major': git.version().split('.')[0],
      'version_minor': git.version().split('.')[1],
  }):
    drake.node('control.tmpl')
    drake.node('etc/apertus.conf.tmpl')
  package += drake.copy(drake.nodes('control'), 'debian/DEBIAN')
  package += drake.copy(drake.nodes('etc/apertus.conf',
                                    'etc/init.d/apertus'),
                        debian_path)
  debian << drake.debian.Packager(
    'fist-apertus_%s_amd64.deb' % git.version(),
    package, 'debian', preload = elle.dpkg_preload).package
