#!/usr/bin/env python3
# -*- python -*-

import os
import os.path
import sys

import threading
import time

SELF = os.path.realpath(__file__)
sys.path.insert(0, '%s/../lib/python' % os.path.dirname(SELF))

# Do not reorder those lines, or a python native module component will
# load the system libcrypto.so, which will prevent loading our
# libcrypto.so through a RPATH on our native module.
import infinit.oracles.meta.server
import bottle
import elle.log

import optparse
usage = "usage: %prog [options]"
parser = optparse.OptionParser(usage = usage)
parser.add_option('--force-admin',
                  action = 'store_true',
                  help = 'run all requests in admin mode',
                  default = False)
parser.add_option('--enable-emails',
                  action = 'store_true',
                  help = 'Enable email support',
                  default = False)
parser.add_option('--port-file',
                  action = 'store',
                  help = 'File name to write port information to',
                  default = None)
parser.add_option('--port',
                  action = 'store',
                  help = 'Port to listen to',
                  default = '8080')
parser.add_option('--mongo-port',
                  action = 'store',
                  help = 'Mongodb port',
                  default = None)

options, args = parser.parse_args()


app = infinit.oracles.meta.server.Meta(force_admin = options.force_admin,
                                       enable_emails = options.enable_emails,
                                       mongo_port = options.mongo_port)

app.port = 0

def write_port_file():
  while app.port == 0:
    time.sleep(0.1)
  with open(options.port_file, 'w') as f:
    f.write(str(app.port))

if options.port_file is not None:
  t = threading.Thread(target = lambda : write_port_file())
  t.start()

bottle.run(app = app,
           host = '127.0.0.1',
           port = int(options.port))
