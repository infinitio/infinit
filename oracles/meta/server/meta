#!/usr/bin/env python3
# -*- python -*-

import datetime
import os
import os.path
import sys

import threading
import time

SELF = os.path.realpath(__file__)
sys.path.insert(0, '%s/../lib/python' % os.path.dirname(SELF))

# Do not reorder those lines, or a python native module component will
# load the system libcrypto.so, which will prevent loading our
# libcrypto.so through a RPATH on our native module.
import infinit.oracles.meta.server
import bottle
import elle.log

import optparse
usage = "usage: %prog [options]"
parser = optparse.OptionParser(usage = usage)
parser.add_option('--debug',
                  action = 'store_true',
                  help = 'enable debug (stacktraces on exceptions)',
                  default = False)
parser.add_option('--force-admin',
                  action = 'store_true',
                  help = 'run all requests in admin mode',
                  default = False)
parser.add_option('--enable-emails',
                  action = 'store_true',
                  help = 'Enable email support',
                  default = False)
parser.add_option('--unconfirmed-email-leeway',
                  action = 'store',
                  help = 'The duration (in sec) an unconfirmed email can be used',
                  default = 604800)
parser.add_option('--daily-summary-hour',
                  action = 'store',
                  help = 'The hour of the day in utc to send the daily summary',
                  default = 18)
parser.add_option('--port-file',
                  action = 'store',
                  help = 'File name to write port information to',
                  default = None)
parser.add_option('--port',
                  action = 'store',
                  help = 'Port to listen to',
                  default = '8080')
parser.add_option('--mongo-port',
                  action = 'store',
                  help = 'Mongodb port',
                  type = int,
                  default = None)
parser.add_option('--mongo-host',
                  action = 'append',
                  help = 'Mongodb host',
                  type = str,
                  default = None)
parser.add_option('--mongo-replica-set',
                  action = 'store_true',
                  help = 'Use mongo replica set',
                  default = False)
parser.add_option('--aws-region',
                  action = 'store',
                  help  = 'aws region for cloud data',
                  default = None)
parser.add_option('--aws-buffer-bucket',
                  action = 'store',
                  help = 'aws bucket for buffering cloud data',
                  default = None)
parser.add_option('--aws-link-bucket',
                  action = 'store',
                  help = 'aws bucket for link cloud data',
                  default = None)
parser.add_option('--zone',
                  action = 'store',
                  help = 'trophonius zone',
                  default = None)
parser.add_option('--listen-all',
                  action = 'store_true',
                  help = 'listen on 0.0.0.0, default is to listen on 127.0.0.1',
                  default = False)

options, args = parser.parse_args()

args = {}

if options.mongo_replica_set:
  args['mongo_replica_set'] = options.mongo_host

if options.enable_emails:
  swu_key = 'test_26008542af128a451ffd05a954c971066219b090'
  args['emailer'] = infinit.oracles.emailer.SendWithUsEmailer(
    api_key = swu_key)

app = infinit.oracles.meta.server.Meta(
  debug = options.debug,
  force_admin = options.force_admin,
  enable_emails = options.enable_emails,
  mongo_port = options.mongo_port,
  unconfirmed_email_leeway = options.unconfirmed_email_leeway,
  daily_summary_hour = options.daily_summary_hour,
  aws_region = options.aws_region,
  aws_buffer_bucket = options.aws_buffer_bucket,
  aws_link_bucket = options.aws_link_bucket,
  zone = options.zone,
  **args)

app.port = 0

def write_port_file():
  while app.port == 0:
    time.sleep(0.1)
  with open(options.port_file, 'w') as f:
    f.write(str(app.port))

if options.port_file is not None:
  t = threading.Thread(target = lambda : write_port_file())
  t.start()

if options.listen_all:
  host = '0.0.0.0'
else:
  host = '127.0.0.1'

bottle.run(app = app,
           host = host,
           port = int(options.port))
