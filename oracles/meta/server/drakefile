import drake
import sys

def configure(prefix = drake.Path('/usr/local'),
              python_version = None):

  if python_version is None:
    python_version = drake.Version(*sys.version_info[0:2])

  prefix = drake.Path(prefix)

  sources = drake.nodes(
    'src/infinit/__init__.py',
    'src/infinit/oracles/__init__.py',
    'src/infinit/oracles/meta/__init__.py',
    'src/infinit/oracles/meta/plugins/__init__.py',
    'src/infinit/oracles/meta/plugins/failure.py',
    'src/infinit/oracles/meta/plugins/jsongo.py',
    'src/infinit/oracles/meta/plugins/session.py',
    'src/infinit/oracles/meta/conf.py',
    'src/infinit/oracles/meta/device.py',
    'src/infinit/oracles/meta/error_code.hh.inc',
    'src/infinit/oracles/meta/error.py',
    'src/infinit/oracles/meta/invitation.py',
    'src/infinit/oracles/meta/mail.py',
    'src/infinit/oracles/meta/metalib.py',
    'src/infinit/oracles/meta/notification_type.hh.inc',
    'src/infinit/oracles/meta/notifier.py',
    'src/infinit/oracles/meta/regexp.py',
    'src/infinit/oracles/meta/user.py',
    'src/infinit/oracles/meta/transaction.py',
    'src/infinit/oracles/meta/transaction_status.hh.inc',
    'src/infinit/oracles/meta/transaction_status.py',
    'src/infinit/oracles/meta/utils.py',
    'src/infinit/oracles/meta/wsgi.py',
  )

  install = drake.Rule('install')
  lib_path = prefix / ('lib/python%s/site-packages' % python_version)
  install << drake.copy(sources, lib_path, 'src')
  bottle = drake.nodes('../../bottle/bottle.py')
  install << drake.copy(bottle, lib_path, '../../bottle')

  rule_check = drake.TestSuite('check')

  for name in (
      'routes',
      'status',
      'connection',
      'transactions/transaction',
      'transactions/transaction_search',
      'transactions/transaction_update',
      'users/favorite-unfavorite',
      'users/get_avatar',
      'users/invite_as_admin',
      'users/invite_as_user',
      'users/login-failure',
      'users/login-logout',
      'users/login-success',
      'users/login-with-existing-device',
      'users/register',
      'users/register_invited',
      'users/session-cleanup',
      'users/set_avatar',
      'users/swaggers',
      'users/user-search',
      'devices/creation',
      'devices/deletion',
      'devices/search',
      'devices/update',
  ):
    test = drake.node('tests/%s' % name)
    test.dependency_add(drake.node('tests/utils.py'))
    for source in sources:
      test.dependency_add(source)

    import os
    pythonpath = [
      drake.path_source('tests'),
      drake.path_build('lib/python'),
    ]
    env = {
      'PYTHONPATH': ':'.join(map(str, pythonpath)),
      'PATH': os.environ['PATH']
    }

    runner = drake.Runner(test, env = env)
    rule_check << runner.status
