import drake
import sys

build = None
check = None
install = None

with open(str(drake.path_source('../../../elle/drake-utils.py')), 'r') as f:
  exec(f.read(), globals(), globals())

def configure(papier_python = None,
              prefix = drake.Path('/usr/local'),
              python_version = None):

  global build, check, install

  if python_version is None:
    python_version = drake.Version(*sys.version_info[0:2])

  prefix = drake.Path(prefix)

  ## ------- ##
  ## Version ##
  ## ------- ##

  git = drake.git.Git()
  class PythonVersionGenerator(VersionGenerator):
    def _variable(self, name, value):
      return '%s = %s' % (name, repr(value))
  version = drake.node('lib/python/infinit/oracles/meta/version.py')
  PythonVersionGenerator(version, git = git)

  ## ------- ##
  ## Sources ##
  ## ------- ##

  sources = drake.nodes(
    'src/infinit/__init__.py',
    'src/infinit/oracles/__init__.py',
    'src/infinit/oracles/meta/__init__.py',
    'src/infinit/oracles/meta/plugins/__init__.py',
    'src/infinit/oracles/meta/plugins/failure.py',
    'src/infinit/oracles/meta/plugins/jsongo.py',
    'src/infinit/oracles/meta/plugins/session.py',
    'src/infinit/oracles/meta/conf.py',
    'src/infinit/oracles/meta/device.py',
    'src/infinit/oracles/meta/error_code.hh.inc',
    'src/infinit/oracles/meta/error.py',
    'src/infinit/oracles/meta/invitation.py',
    'src/infinit/oracles/meta/mail.py',
    'src/infinit/oracles/meta/metalib.py',
    'src/infinit/oracles/meta/notification_type.hh.inc',
    'src/infinit/oracles/meta/notifier.py',
    'src/infinit/oracles/meta/pythia.py',
    'src/infinit/oracles/meta/regexp.py',
    'src/infinit/oracles/meta/root.py',
    'src/infinit/oracles/meta/user.py',
    'src/infinit/oracles/meta/transaction.py',
    'src/infinit/oracles/meta/transaction_status.hh.inc',
    'src/infinit/oracles/meta/transaction_status.py',
    'src/infinit/oracles/meta/trophonius.py',
    'src/infinit/oracles/meta/utils.py',
    'src/infinit/oracles/meta/wsgi.py',
    'src/infinit/oracles/meta/place_holder_avatar.png',
    )

  ## ----- ##
  ## Build ##
  ## ----- ##

  build = drake.Rule('build')
  build_python_path = drake.Path('lib/python')
  python_nodes = [version]
  python_nodes += drake.copy(sources, build_python_path, 'src')
  bottle = drake.nodes('../../bottle/bottle.py')
  python_nodes += drake.copy(bottle, build_python_path
                            , '../../bottle')
  assert papier_python is not None
  python_nodes.append(drake.copy(papier_python, build_python_path,
                                 papier_python.name().dirname()))
  build << python_nodes
  build_binary = drake.copy(drake.node('meta'), 'bin')
  build << build_binary

  ## ------- ##
  ## Install ##
  ## ------- ##

  install_python_path = \
    prefix / ('lib/python%s/site-packages' % python_version)
  install = drake.Rule('install')
  install << drake.copy(python_nodes,
                        install_python_path, build_python_path)
  install << drake.copy(build_binary, prefix)

  ## ----- ##
  ## Check ##
  ## ----- ##

  check = drake.TestSuite('check')

  for name in (
    'bad-session',
    'devices/creation',
    'devices/deletion',
    'devices/search',
    'devices/update',
    'routes',
    'status',
    'transactions/transaction',
    'transactions/transaction_search',
    'transactions/transaction_update',
    'trophonius/connection',
    'users/favorite-unfavorite',
    'users/get_avatar',
    'users/invite_as_admin',
    'users/invite_as_user',
    'users/login-failure',
    'users/login-logout',
    'users/login-success',
    'users/login-with-existing-device',
    'users/register',
    'users/register_invited',
    'users/session-cleanup',
    'users/set_avatar',
    'users/swaggers',
    'users/user-search',
    ):
    test = drake.node('tests/%s' % name)
    test.dependency_add(drake.node('tests/utils.py'))
    for source in python_nodes:
      test.dependency_add(source)

    import os
    pythonpath = [
      drake.path_source('tests'),
      drake.path_build('lib/python'),
    ]
    env = {
      'PYTHONPATH': ':'.join(map(str, pythonpath)),
      'PATH': os.environ['PATH']
    }

    runner = drake.Runner(test, env = env)
    check << runner.status
