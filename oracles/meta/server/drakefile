import drake
import drake.debian
import drake.templating
import sys

build = None
check = None
install = None
python = None

with open(str(drake.path_source('../../../elle/drake-utils.py')), 'r') as f:
  exec(f.read(), globals(), globals())

def configure(elle,
              python_common,
              papier_python,
              prefix = drake.Path('/usr/local')):

  global build, check, install
  global python

  python_version = drake.Version(*sys.version_info[0:2])

  prefix = drake.Path(prefix)

  ## ------- ##
  ## Version ##
  ## ------- ##

  git = drake.git.Git()
  class PythonVersionGenerator(VersionGenerator):
    def _variable(self, name, value):
      return '%s = %s' % (name, repr(value))
  version = drake.node('lib/python/infinit/oracles/meta/version.py')
  PythonVersionGenerator(version, git = git)

  ## ------- ##
  ## Sources ##
  ## ------- ##

  sources = drake.nodes(
    # Those ones comes from the common python package.
    #'src/infinit/__init__.py',
    #'src/infinit/oracles/__init__.py',
    'src/infinit/oracles/meta/__init__.py',
    'src/infinit/oracles/meta/error.py',
    'src/infinit/oracles/meta/server/__init__.py',
    'src/infinit/oracles/meta/server/apertus.py',
    'src/infinit/oracles/meta/server/cloud_buffer_token.py',
    'src/infinit/oracles/meta/server/conf.py',
    'src/infinit/oracles/meta/server/device.py',
    'src/infinit/oracles/meta/server/infinit.auth',
    'src/infinit/oracles/meta/server/invitation.py',
    'src/infinit/oracles/meta/server/mail.py',
    'src/infinit/oracles/meta/server/notifier.py',
    'src/infinit/oracles/meta/server/place_holder_avatar.png',
    'src/infinit/oracles/meta/server/plugins/__init__.py',
    'src/infinit/oracles/meta/server/plugins/certification.py',
    'src/infinit/oracles/meta/server/plugins/failure.py',
    'src/infinit/oracles/meta/server/plugins/jsongo.py',
    'src/infinit/oracles/meta/server/plugins/session.py',
    'src/infinit/oracles/meta/server/regexp.py',
    'src/infinit/oracles/meta/server/root.py',
    'src/infinit/oracles/meta/server/transaction.py',
    'src/infinit/oracles/meta/server/transaction_status.py',
    'src/infinit/oracles/meta/server/trophonius.py',
    'src/infinit/oracles/meta/server/user.py',
    'src/infinit/oracles/meta/server/utils.py',
    'src/infinit/oracles/meta/server/waterfall.py',
    'src/infinit/oracles/meta/server/wsgi.py',
    'src/infinit/oracles/meta/server/wsgi_debug.py',
  )

  templates = drake.nodes(
    'templates/base.html',
    'templates/waterfall/transactions.html',
    'templates/waterfall/waterfall.html',
    'templates/waterfall/manage_groups.html',
    'templates/waterfall/groups.html',
    'templates/waterfall/user_search.html',
  )

  resources = drake.nodes(
    'resources/css/normalize.min.css',
    'resources/css/main.less',
    'resources/css/normalize.css',
    'resources/css/main.css',
    'resources/css/daterangepicker-bs3.css',
    'resources/css/font-awesome.min.css',
    'resources/css/jquery.qtip.min.css',
    'resources/favicon.ico',
    'resources/js/vendor/jquery-1.10.1.min.js',
    'resources/js/vendor/modernizr-2.6.2.min.js',
    'resources/js/vendor/daterangepicker.js',
    'resources/js/vendor/moment.min.js',
    'resources/js/vendor/jquery.poshytip.min.js',
    'resources/js/vendor/jquery.qtip.min.js',
    'resources/js/vendor/imagesloaded.pkgd.min.js',
    'resources/js/main.js',
    'resources/images/logo.png',
    'resources/images/loading.gif',
    'resources/images/tick.png',
    'resources/images/ticked.png',
  )

  ## ----- ##
  ## Build ##
  ## ----- ##

  build = drake.Rule('build')
  build_python_path = drake.Path('lib/python')

  elle_python = drake.copy(elle.python, '.', '../../../elle/elle')
  papier_python = drake.copy(papier_python, build_python_path,
                             strip_prefix = True)
  python = [version]
  sources_built = drake.copy(sources, build_python_path, 'src')
  for source in sources_built:
    source.dependencies_add(elle_python)
    source.dependency_add(papier_python)
  python += sources_built
  bottle = drake.nodes('../../bottle/bottle.py')
  python += drake.copy(bottle, build_python_path,
                            '../../bottle')
  python += drake.copy(python_common, '.', '../..')
  build << python
  build_binary = drake.copy(drake.node('meta'), 'bin')
  build << build_binary
  build << drake.copy(templates, 'share/infinit/meta/server')
  build << drake.copy(resources, 'share/infinit/meta/server')

  ## ------- ##
  ## Install ##
  ## ------- ##

  def install_nodes(where, f = drake.install):
    where = drake.Path(where)
    res = []
    res += f(python, where / ('lib/python%s' % python_version),
             build_python_path)
    res += f(templates, where / 'share/infinit/meta/server')
    res += f(resources, where / 'share/infinit/meta/server')
    res.append(f(build_binary, where))
    res.append(f(drake.node('config/meta'),
                 where / 'etc/nginx/sites-available', 'config'))
    res.append(f(drake.node('config/meta.xml'),
                 where / 'etc/uwsgi/apps-available', 'config'))
    res.append(f(drake.node('etc/rsyslog.d/meta.conf'),
                 where))
    return res

  install = drake.Rule('install')
  install << install_nodes(prefix)

  package = install_nodes('debian/opt/infinit/meta', f = drake.copy)
  git = drake.git.Git()
  with drake.templating.Context(content = {
      'version': git.version(),
      'version_major': git.version().split('.')[0],
      'version_minor': git.version().split('.')[1],
  }):
    drake.node('control.tmpl')
    drake.node('postinst.tmpl')
    drake.node('config/meta.tmpl')
  package += drake.copy(drake.nodes('control', 'postinst'),
                        'debian/DEBIAN')

  debian = drake.Rule('debian')
  debian << drake.debian.Packager(
    'fist-meta_%s_amd64.deb' % git.version(),
    package, 'debian', preload = elle.dpkg_preload).package


  ## ----- ##
  ## Check ##
  ## ----- ##

  check = drake.TestSuite('check')

  for name in (
    'apertus/connection',
    'apertus/load',
    'apertus/transactions',
    'apertus/loadbalancing',
    'bad-session',
    'devices/creation',
    'devices/deletion',
    'devices/search',
    'devices/update',
    'root/lost-password',
    'root/reset-password-ghost',
    'root/reset-password-unknown-email',
    'root/user-report',
    # 'root/daily-summary',
    'routes',
    'status',
    'transactions/basic',
    'transactions/ghost',
    'transactions/transaction',
    'transactions/connect-device',
    'transactions/transaction_search',
    'transactions/transaction_update',
    'transactions/reminder-emails',
    'transactions/url-link',
    'trophonius/connection',
    'trophonius/notifications',
    'users/favorite-unfavorite',
    'users/get_avatar',
    'users/invite_as_user',
    'users/login-failure',
    'users/login-logout',
    'users/login-success',
    'users/login-with-existing-device',
    'users/confirm-email',
    'users/same-device',
    'users/register',
    'users/session-cleanup',
    'users/sessions',
    'users/set_avatar',
    'users/swaggers',
    'users/user-search',
    'users/web-session',
    'web/edit',
    'web/login',
    'web/register',
    'web/invitation',
    ):
    test = drake.node('tests/%s' % name)
    test.dependency_add(drake.node('tests/utils.py'))
    for source in python:
      test.dependency_add(source)

    import os
    pythonpath = [
      drake.path_source('tests'),
      drake.path_build('lib/python'),
    ]
    env = os.environ
    env.update({
      'PYTHONPATH': ':'.join(map(str, pythonpath)),
      'PATH': os.environ['PATH']
    })

    runner = drake.Runner(test, env = env)
    runner.reporting = drake.Runner.Reporting.on_failure
    check << runner.status
