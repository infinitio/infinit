#!/usr/bin/env python3

from utils import Meta, User

from infinit.oracles.notification import notifications

class Notifier():
  def __init__(self, transaction_id, sender, recipient):
    self.transaction_id = transaction_id
    self.sender = sender
    self.recipient = recipient

  def notify_some(self,
                  notification_type,
                  recipient_ids = None,
                  device_ids = None,
                  message = None):
    if notification_type == notifications['peer_connection_update']:
      devices = {self.sender.device_id, self.recipient.device_id}
      assert device_ids == devices
      assert message['transaction_id'] == self.transaction_id
      assert len(message['devices']) == 2
      assert set(message['devices']) == set(map(str, devices))

with Meta() as meta:
  alice = User(meta, "alice@infinit.io")
  bob = User(meta, "bob@infinit.io")

  alice.login()
  tr, res = alice.sendfile(bob.id)
  bob.login()
  transaction_id = res['created_transaction_id']
  meta.notifier = Notifier(transaction_id, alice, bob)

  alice.post('transaction/update',
             {
               'transaction_id': transaction_id,
               'status': 1
             })

  bob.post('transaction/update',
           {
             'transaction_id': transaction_id,
             'status': 2,
             'device_id': str(bob.device_id),
             'device_name': 'chiche',
           })

  alice_locals = {'ip': '127.0.0.1', 'port': 123}
  bob_locals = {'ip': '127.0.0.1', 'port': 234}

  alice.post('transaction/connect_device',
             {
               '_id': transaction_id,
               'device_id': str(alice.device_id),
               'locals': [alice_locals],
               'externals': [{'ip': '127.0.2.1', 'port': 123}, {'ip': '22.23.24.25', 'port': 123}],
             })

  endpoints = alice.post('transaction/%s/endpoints' % transaction_id,
                         {
                           'device_id': str(bob.device_id),
                           'self_device_id': str(alice.device_id),
                         })
  assert endpoints['error_code'] == -20003 #error.DEVICE_NOT_FOUND

  bob.post('transaction/connect_device',
           {
             '_id': transaction_id,
             'device_id': str(bob.device_id),
             'locals': [bob_locals],
             'externals': [{'ip': '127.2.0.1', 'port': 1233}, {'ip': '22.23.24.25', 'port': 1233}],
           })

  endpoints = alice.post('transaction/%s/endpoints' % transaction_id,
                         {
                           'device_id': str(bob.device_id),
                           'self_device_id': str(alice.device_id),
                         })
  assert endpoints['locals'] == ["%s:%s" % (bob_locals['ip'], bob_locals['port'])]

  endpoints = bob.post('transaction/%s/endpoints' % transaction_id,
                         {
                           'device_id': str(alice.device_id),
                           'self_device_id': str(bob.device_id),
                         })

  assert endpoints['locals'] == ["%s:%s" % (alice_locals['ip'], alice_locals['port'])]
