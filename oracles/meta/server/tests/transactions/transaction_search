#!/usr/bin/env python3

from utils import *
from bson import ObjectId
from functools import reduce
import sys
from infinit.oracles.meta.server import transaction_status

with Meta() as meta:
  alice = User(meta, "alice@infinit.io")
  bob = User(meta, "bob@infinit.io")
  charles = User(meta, "charles@infinit.io")

  bob.login()

  transaction_ids = {alice.id: [], charles.id: []}
  for _ in range(10):
    transaction_ids[alice.id].append(bob.send(recipient = alice.id)[1]['created_transaction_id'])
  for _ in range(10):
    transaction_ids[charles.id].append(bob.send(recipient = charles.id)[1]['created_transaction_id'])

  res = bob.get('transactions')
  assertEq(len(res['transactions']), 20)

  # Count.
  res = bob.get('transactions?count=5')
  assertEq(len(res['transactions']), 5)
  res['transactions'].reverse()
  assertEq([t['_id'] for t in res['transactions']], transaction_ids[charles.id][5:])

  # Count & Offset.
  res = bob.get('transactions?count=5&offset=5')
  assertEq(len(res['transactions']), 5)

  res['transactions'].reverse()
  assertEq([t['_id'] for t in res['transactions']], transaction_ids[charles.id][:5])

  # With.
  res = bob.get('transactions?peer_id=%s' % alice.id)
  assertEq(len(res['transactions']), 10)
  assertEq(set(t['_id'] for t in res['transactions']), set(transaction_ids[alice.id]))

  res = bob.get('transactions?peer_id=%s' % charles.id)
  assertEq(len(res['transactions']), 10)
  assertEq(set(t['_id'] for t in res['transactions']), set(transaction_ids[charles.id]))

  # Edit transaction_ids, must be the last.
  res = bob.get('transactions')
  def concat_list(x, y):
    x.extend(y)
    return x
  assertEq(set(t['_id'] for t in res['transactions']), set(reduce(concat_list, transaction_ids.values())))
  try:
    bob.get('transaction/%s' % bob.id)
  except HTTPException as e:
    assertEq(e.status, 404)
  else:
    raise Exception('unexisistent transaction was found')
