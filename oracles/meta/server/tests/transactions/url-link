#!/usr/bin/env python3

from utils import *

from infinit.oracles.meta.server.transaction_status import GHOST_UPLOADED, FINISHED
from bson.objectid import ObjectId

def throws(f, status):
  assert isinstance(status, int)
  try:
    f()
    assert status == 200
  except HTTPException as e:
    if status != 200:
      assert isinstance(e.status, int)
      assert e.status == status

def check_email(emails, recipient):
  import sys
  print('EMAILS', emails, file = sys.stderr)
  assertEq(len(emails), 1)
  assertEq(emails[0].template, 'Transfer (Initial)')
  assertEq(emails[0].recipient.email, recipient)

with Meta() as meta:
  bob = User(meta, "bob@infinit.io")
  bob.login()
  current_sent = meta.mailer.sent
  # Send something to a ghost user from a cloud-capable sender.
  alice_email = 'alice@infinit.io'
  transaction, res = bob.sendfile(recipient = alice_email,
                                  initialize = True)
  assert res['success']
  assert meta.mailer.sent == current_sent
  transaction_id = res['created_transaction_id']
  assertEq(len(meta.emailer.emails), 0)

  # Finish transaction.
  res = bob.post('transaction/update', {"transaction_id": transaction_id,
                                        "status": GHOST_UPLOADED,
                                        "device_id": str(bob.device_id),
                                        "device_name": bob.device_name})
  assert res['success']
  check_email(meta.emailer.template('Transfer (Initial)'),
              alice_email)

  # Check that sending a hash that's not real gives a 404.
  throws(lambda: meta.get('transaction/by_hash/%s' % ('0' * 64)), 404)

  # Fetch the hash from the DB and check Meta's return.
  db_transaction = \
    meta.database.transactions.find_one({'_id': ObjectId(transaction_id)})
  res = meta.get('transaction/by_hash/%s' % db_transaction['transaction_hash'])
  assert res['success']
  assert res['sender_id'] == bob.id
  assert res['sender_fullname'] == bob.fullname
  assert res['recipient_id']
  assert res['download_link']
  assert res['message'] == 'no message'
  assert len(res['files']) == 3


  # Check the emails still works when the ghost already exists.
  current_sent = meta.mailer.sent
  transaction, res = bob.sendfile(recipient = alice_email,
                                  initialize = True)
  assert res['success']
  assert meta.mailer.sent == current_sent
  transaction_id = res['created_transaction_id']
  res = bob.post('transaction/update', {"transaction_id": transaction_id,
                                        "status": GHOST_UPLOADED,
                                        "device_id": str(bob.device_id),
                                        "device_name": bob.device_name})
  assert res['success']
  check_email(meta.emailer.template('Transfer (Initial)'),
              alice_email)
