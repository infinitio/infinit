#!/usr/bin/env python3

from utils import Meta, User, NoOpMailer, HTTPException

from infinit.oracles.meta.server.transaction_status import GHOST_UPLOADED, FINISHED
from bson.objectid import ObjectId

def throws(f, status):
  assert isinstance(status, int)
  try:
    f()
    assert status == 200
  except HTTPException as e:
    if status != 200:
      assert isinstance(e.status, int)
      assert e.status == status

class MailService(NoOpMailer):

  def __init__(self, expected_template, recipient_email):
    super().__init__(True)
    self.__expected_template = expected_template
    self.__recipient_email = recipient_email

  def template_message(self, template_name, message):
    merges = {}
    print(template_name, message)
    for entry in message['merge_vars'][0]['vars']:
      merges[entry['name']] = entry['content']
    assert 'filename' in merges.keys()
    assert 'sendername' in merges.keys()
    assert 'note' in merges.keys()
    assert 'transaction_hash' in merges.keys()
    assert message['to'][0]['email'] == self.__recipient_email

with Meta() as meta:
  bob = User(meta, "bob@infinit.io")
  bob.login()
  current_sent = meta.mailer.sent
  # Send something to a ghost user from a cloud-capable sender.
  alice_email = 'alice@infinit.io'
  transaction, res = bob.sendfile(recipient_id = alice_email,
                                  initialize = True)
  assert res['success']
  assert meta.mailer.sent == current_sent
  transaction_id = res['created_transaction_id']

  meta.mailer = MailService("send-file-url",
                            recipient_email = alice_email)
  assert meta.mailer.sent == 0 #We replaced the mailer

  # Finish transaction.
  res = bob.post('transaction/update', {"transaction_id": transaction_id,
                                        "status": GHOST_UPLOADED,
                                        "device_id": str(bob.device_id),
                                        "device_name": bob.device_name})
  assert res['success']
  assert meta.mailer.sent > 0

  # Check that sending a hash that's not real gives a 404.
  throws(lambda: meta.get('transaction/by_hash/%s' % ('0' * 64)), 404)

  # Fetch the hash from the DB and check Meta's return.
  db_transaction = \
    meta.database.transactions.find_one({'_id': ObjectId(transaction_id)})
  res = meta.get('transaction/by_hash/%s' % db_transaction['transaction_hash'])
  assert res['success']
  assert res['sender_id'] == bob.id
  assert res['sender_fullname'] == bob.fullname
  assert res['recipient_id']
  assert res['download_link']
  assert res['message'] == 'no message'
  assert len(res['files']) == 3


  # Now, the recipient is registered as ghost, does ghost mail still works?
  current_sent = meta.mailer.sent
  transaction, res = bob.sendfile(recipient_id = alice_email,
                                  initialize = True)
  assert res['success']
  assert meta.mailer.sent == current_sent
  transaction_id = res['created_transaction_id']
  res = bob.post('transaction/update', {"transaction_id": transaction_id,
                                        "status": GHOST_UPLOADED,
                                        "device_id": str(bob.device_id),
                                        "device_name": bob.device_name})
  assert res['success']
  assert meta.mailer.sent == current_sent + 1
