#!/usr/bin/env python3


from utils import *

import bson

from infinit.oracles.meta.server.transaction_status import \
  ACCEPTED as accepted, \
  CLOUD_BUFFERED as cloud_buffered, \
  FINISHED as finished, \
  GHOST_UPLOADED as ghost_uploaded, \
  INITIALIZED as initialized

# FIXME: Force admin to avoid managing keys to post on
# transaction/downloaded. Remove it and manage keys.
with Meta(force_admin = True) as meta:
  alice = User(meta, 'alice@infinit.io')
  alice.login()
  bob = User(meta, 'bob@infinit.io')
  bob.login()
  i = bson.ObjectId(alice.id)
  assert 'transactions' not in meta.database.users.find_one({'_id': i})
  # Send to a peer.
  transaction1, res = alice.sendfile(recipient = 'bob@infinit.io',
                                     initialize = True)
  tid1 = res['created_transaction_id']
  # Send to a peer and accept.
  transaction2, res = alice.sendfile(recipient = 'bob@infinit.io',
                                     initialize = True)
  tid2 = res['created_transaction_id']
  bob.transaction_update(tid2, accepted)
  # Send to a peer and download.
  transaction3, res = alice.sendfile(recipient = 'bob@infinit.io',
                                     initialize = True)
  tid3 = res['created_transaction_id']
  bob.transaction_update(tid3, accepted)
  bob.transaction_update(tid3, finished)
  # Send to a peer and cloud-buffer.
  transaction3bis, res = alice.sendfile(recipient = 'bob@infinit.io',
                                     initialize = True)
  tid3bis = res['created_transaction_id']
  bob.transaction_update(tid3bis, accepted)
  alice.transaction_update(tid3bis, cloud_buffered)
  # Send to a ghost
  transaction, res = alice.sendfile(recipient = 'carol@infinit.io',
                                    initialize = True)
  tid4 = res['created_transaction_id']
  # Send to a ghost and download
  transaction, res = alice.sendfile(recipient = 'carol@infinit.io',
                                    initialize = True)
  tid5 = res['created_transaction_id']
  alice.transaction_update(tid5, ghost_uploaded)
  alice.post('transactions/%s/downloaded?key=admin' % tid5)
  # Send to a ghost and download as a user
  transaction, res = alice.sendfile(recipient = 'dave@infinit.io',
                                    initialize = True)
  tid5bis = res['created_transaction_id']
  transaction, res = alice.sendfile(recipient = 'dave@infinit.io',
                                    initialize = True)
  tid5ter = res['created_transaction_id']
  alice.transaction_update(tid5ter, ghost_uploaded)
  dave = User(meta, 'dave@infinit.io')
  dave.login()
  dave.transaction_update(tid5bis, accepted)
  dave.transaction_update(tid5bis, finished)
  dave.transaction_update(tid5ter, accepted)
  dave.post('transactions/%s/downloaded?key=admin' % tid5ter)

  # Download a transaction
  transaction, res = bob.sendfile(recipient = 'alice@infinit.io',
                                  initialize = True)
  tid6 = res['created_transaction_id']
  alice.transaction_update(tid6, accepted)
  alice.transaction_update(tid6, finished)
  # Leave a pending transaction
  transaction, res = bob.sendfile(recipient = 'alice@infinit.io',
                                  initialize = True)
  tid7 = res['created_transaction_id']
  alice.transaction_update(tid7, accepted)
  # Leave an unaccepted transaction
  transaction, res = bob.sendfile(recipient = 'alice@infinit.io',
                                  initialize = True)
  tid_unaccepted = bson.ObjectId(res['created_transaction_id'])
  # Create a link
  link1 = alice.post('link',
                   {
                     'files': [['lol', 10]],
                     'name': 'lol.zip',
                     'message': '',
                   })
  # Create a clicked link
  link2 = alice.post('link',
                   {
                     'files': [['lol', 10]],
                     'name': 'lol.zip',
                     'message': '',
                   })
  alice.link_update(link2['transaction'], finished)
  alice.get('link/%s' % link2['transaction']['hash'])
  # Check counters
  def stats():
    return meta.database.users.find_one({'_id': i})['transactions']
  transactions = stats()
  assertEq(transactions['accepted'], 2)
  assertEq(transactions['accepted_peer'], 2)
  assertEq(transactions['reached'], 5)
  assertEq(transactions['reached_link'], 1)
  assertEq(transactions['reached_peer'], 4)
  assertEq(transactions['received'], 1)
  assertEq(transactions['received_peer'], 1)
  assertEq(transactions['sent'], 10)
  assertEq(transactions['sent_link'], 2)
  assertEq(transactions['sent_peer'], 8)
  assertEq(len(transactions['pending']), 5)
  assert transactions['pending_has']
  assertEq(transactions['unaccepted'], [tid_unaccepted])
  assert transactions['unaccepted_has']
  assert transactions['activity_has']
  # Flush transactions
  alice.link_update(link1['transaction'], finished)
  transactions = stats()
  assertEq(len(transactions['pending']), 4)
  assert transactions['pending_has']
  bob.transaction_update(tid1, accepted)
  bob.transaction_update(tid1, finished)
  transactions = stats()
  assertEq(len(transactions['pending']), 3)
  assert transactions['pending_has']
  bob.transaction_update(tid2, finished)
  transactions = stats()
  assertEq(len(transactions['pending']), 2)
  assert transactions['pending_has']
  bob.transaction_update(tid3bis, finished)
  transactions = stats()
  assertEq(len(transactions['pending']), 2)
  assert transactions['pending_has']
  alice.transaction_update(tid4, ghost_uploaded)
  transactions = stats()
  assertEq(len(transactions['pending']), 1)
  assert transactions['pending_has']
  alice.transaction_update(tid7, finished)
  transactions = stats()
  assertEq(len(transactions['pending']), 0)
  assert not transactions['pending_has']
  assert transactions['activity_has']
  alice.transaction_update(tid_unaccepted, accepted)
  transactions = stats()
  assertEq(transactions['unaccepted'], [])
  assert not transactions['unaccepted_has']
  assert transactions['activity_has']
  alice.transaction_update(tid_unaccepted, finished)
  transactions = stats()
  assert not transactions['activity_has']
  # Check ghost counters
  carol = meta.database.users.find_one({'email': 'carol@infinit.io'})
  transactions = carol['transactions']
  assertEq(transactions['received'], 1)
  assertEq(transactions['received_ghost'], 1)

  stats = meta.database.users.find_one({'email': 'carol@infinit.io'})['transactions']
  assertEq(len(stats.get('pending', [])), 0)
  assertEq(len(stats.get('unaccepted', [])), 0)

  stats = meta.database.users.find_one({'_id': bson.ObjectId(dave.id)})['transactions']
  assertEq(len(stats['pending']), 0)
  assertEq(len(stats.get('unaccepted', [])), 0)
