#!/usr/bin/env python3


from utils import Meta, User

import bson

from infinit.oracles.meta.server.transaction_status import \
  ACCEPTED as accepted, \
  CLOUD_BUFFERED as cloud_buffered, \
  FINISHED as finished, \
  GHOST_UPLOADED as ghost_uploaded, \
  INITIALIZED as initialized

with Meta() as meta:
  alice = User(meta, 'alice@infinit.io')
  alice.login()
  bob = User(meta, 'bob@infinit.io')
  bob.login()
  i = bson.ObjectId(alice.id)
  assert 'transactions' not in meta.database.users.find_one({'_id': i})
  # Send to a peer.
  transaction1, res = alice.sendfile(recipient = 'bob@infinit.io',
                                     initialize = True)
  tid1 = res['created_transaction_id']
  # Send to a peer and accept.
  transaction2, res = alice.sendfile(recipient = 'bob@infinit.io',
                                     initialize = True)
  tid2 = res['created_transaction_id']
  bob.transaction_update(tid2, accepted)
  # Send to a peer and download.
  transaction3, res = alice.sendfile(recipient = 'bob@infinit.io',
                                     initialize = True)
  tid3 = res['created_transaction_id']
  bob.transaction_update(tid3, accepted)
  bob.transaction_update(tid3, finished)
  # Send to a peer and cloud-buffer.
  transaction3bis, res = alice.sendfile(recipient = 'bob@infinit.io',
                                     initialize = True)
  tid3bis = res['created_transaction_id']
  bob.transaction_update(tid3bis, accepted)
  alice.transaction_update(tid3bis, cloud_buffered)
  # Send to a ghost
  transaction, res = alice.sendfile(recipient = 'carol@infinit.io',
                                    initialize = True)
  tid4 = res['created_transaction_id']
  # Send to a ghost and download
  transaction, res = alice.sendfile(recipient = 'carol@infinit.io',
                                    initialize = True)
  tid5 = res['created_transaction_id']
  alice.transaction_update(tid5, ghost_uploaded)
  alice.post('transactions/%s/downloaded?key=admin' % tid5)
  # Download a transaction
  transaction, res = bob.sendfile(recipient = 'alice@infinit.io',
                                  initialize = True)
  tid6 = res['created_transaction_id']
  alice.transaction_update(tid6, accepted)
  alice.transaction_update(tid6, finished)
  # Leave a pending transaction
  transaction, res = bob.sendfile(recipient = 'alice@infinit.io',
                                  initialize = True)
  tid7 = res['created_transaction_id']
  alice.transaction_update(tid7, accepted)
  # Create a link
  link1 = alice.post('link',
                   {
                     'files': ['lol'],
                     'name': 'lol.zip',
                     'message': '',
                   })
  # Create a clicked link
  link2 = alice.post('link',
                   {
                     'files': ['lol'],
                     'name': 'lol.zip',
                     'message': '',
                   })
  alice.link_update(link2['transaction'], finished)
  alice.get('link/%s' % link2['transaction']['hash'])
  # Check counters
  def stats():
    return meta.database.users.find_one({'_id': i})['transactions']
  transactions = stats()
  assert transactions['accepted'] == 2
  assert transactions['accepted_peer'] == 2
  assert transactions['reached'] == 3
  assert transactions['reached_link'] == 1
  assert transactions['reached_peer'] == 2
  assert transactions['received'] == 1
  assert transactions['received_peer'] == 1
  assert transactions['sent'] == 8
  assert transactions['sent_link'] == 2
  assert transactions['sent_peer'] == 6
  assert len(transactions['pending']) == 5
  assert transactions['pending_has']
  # Flush transactions
  alice.link_update(link1['transaction'], finished)
  transactions = stats()
  assert len(transactions['pending']) == 4
  assert transactions['pending_has']
  bob.transaction_update(tid1, accepted)
  bob.transaction_update(tid1, finished)
  transactions = stats()
  assert len(transactions['pending']) == 3
  assert transactions['pending_has']
  bob.transaction_update(tid2, finished)
  transactions = stats()
  assert len(transactions['pending']) == 2
  assert transactions['pending_has']
  bob.transaction_update(tid3bis, finished)
  transactions = stats()
  assert len(transactions['pending']) == 2
  assert transactions['pending_has']
  alice.transaction_update(tid4, ghost_uploaded)
  transactions = stats()
  assert len(transactions['pending']) == 1
  assert transactions['pending_has']
  alice.transaction_update(tid7, finished)
  transactions = stats()
  assert len(transactions['pending']) == 0
  assert not transactions['pending_has']
  # Check ghost counters
  carol = meta.database.users.find_one({'email': 'carol@infinit.io'})
  transactions = carol['transactions']
  assert transactions['received'] == 1
  assert transactions['received_ghost'] == 1
