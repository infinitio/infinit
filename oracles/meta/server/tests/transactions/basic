#!/usr/bin/env python3

from utils import Meta, User, NoOpMailer

class MailService(NoOpMailer):

  def __init__(self, sender_fullname = "", expected_template = ""):
    super().__init__()
    self.__sender = sender_fullname
    self.__expected_template = expected_template

  def template_message(self,
                       template_name,
                       message):
    merges = {}
    for entry in message['merge_vars'][0]['vars']:
      merges[entry['name']] = entry['content']
    assert self.__expected_template == template_name
    # NoOpMailer.template_message(template_message, msg)

with Meta() as meta:
  alice = User(meta, "alice@infinit.io")
  bob = User(meta, "bob@infinit.io")

  response = {"email": "alice@infinit.io"}

  bob.login()

  transaction, res = bob.sendfile(recipient_id = alice.id)
  assert res['success']

  transaction_id = res['created_transaction_id']

  alice.login()

  res = alice.get('transaction/%s/view' % transaction_id)
  for key in transaction.keys():
    if key in ['id_or_email', 'device_id']: # Special cases.
      continue
    assert res[key] == transaction[key]
  res['recipient_id'] == transaction['id_or_email']

# Invited by email.
with Meta(enable_emails = True) as meta:
  alice_email = "alice@infinit.io"
  bob = User(meta, "bob@infinit.io")

  bob.login()
  meta.mailer = MailService(bob.fullname,
                            expected_template = 'send-file')

  transaction, res = bob.sendfile(recipient_id = alice_email)
  assert res['success']

  assert meta.mailer.sent
  transaction_id = res['created_transaction_id']

  meta.mailer = MailService(expected_template = 'confirm-sign-up')

  alice = User(meta, alice_email)
  alice.login()

  res = alice.get('transaction/%s/view' % transaction_id)

  for key in transaction.keys():
    if key in ['id_or_email', 'device_id']: # Special cases.
      continue
    assert res[key] == transaction[key]
  res['recipient_id'] == transaction['id_or_email']
