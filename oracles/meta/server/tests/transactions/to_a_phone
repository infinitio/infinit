#!/usr/bin/env python3

from utils import HTTPException, Meta, User
from bson import ObjectId
from functools import reduce
import sys
from infinit.oracles.meta.server import transaction_status

# Send and merge.
with Meta() as meta:
  alice = User(meta, "alice@infinit.io")
  alice.login()

  ti1 = alice.sendfile(recipient = '+33600000000')[1]['created_transaction_id']
  assert meta.database.users.count() == 2
  ti2 = alice.sendfile(recipient = '+33600000000')[1]['created_transaction_id']
  assert meta.database.users.count() == 2
  assert meta.database.users.find_one(
    {'accounts.id': '+33600000000'})
  recipient = meta.database.users.find_one(
    {'accounts.id': '+33600000000'})
  assert len(recipient['ghost_code'])
  alice.transaction_update(ti1, transaction_status.INITIALIZED)
  # Only one is visible.
  assert(len(alice.transactions) == 1)
  bob = User(meta, "bob@infinit.io")
  bob.login()
  assert(len(bob.transactions) == 0)
  bob.post('ghost/%s/merge' % recipient['ghost_code'])
  assert(len(bob.transactions) == 1)
  alice.transaction_update(ti2, transaction_status.INITIALIZED)
  assert(len(alice.transactions) == 2)
  assert(len(bob.transactions) == 2)
  ti3 = alice.sendfile(recipient = '+33600000000')[1]['created_transaction_id']
  alice.transaction_update(ti3, transaction_status.INITIALIZED)
  assert meta.database.users.count() == 3
  assert(len(alice.transactions) == 3)

# Same number with and without country identifier.
# We expect that to brake, if it does, you fixed the issue! Medals.
with Meta() as meta:
  alice = User(meta, "alice@infinit.io")
  alice.login()

  ti1 = alice.sendfile(recipient = '+33600000000', use_identifier = True)[1]['created_transaction_id']
  assert meta.database.users.count() == 2
  ti2 = alice.sendfile(recipient = '0600000000', use_identifier = True)[1]['created_transaction_id']
  assert meta.database.users.count() == 3
  assert meta.database.users.find_one(
    {'accounts.id': '+33600000000'})
  assert meta.database.users.find_one(
    {'accounts.id': '0600000000'})
  recipientplus = meta.database.users.find_one(
    {'accounts.id': '+33600000000'})
  recipient = meta.database.users.find_one(
    {'accounts.id': '0600000000'})
  assert recipient['_id'] != recipientplus['_id']
  assert recipient['ghost_code'] != recipientplus['ghost_code']
  alice.transaction_update(ti1, transaction_status.INITIALIZED)
  alice.transaction_update(ti2, transaction_status.INITIALIZED)
  bob = User(meta, "bob@infinit.io")
  bob.login()
  assert(len(bob.transactions) == 0)
  bob.post('ghost/%s/merge' % recipient['ghost_code'])
  assert(len(bob.transactions) == 1)
  bob.post('ghost/%s/merge' % recipientplus['ghost_code'])
  assert(len(bob.transactions) == 2)

# GHOST UPLOADED.
with Meta() as meta:
  alice = User(meta, "alice@infinit.io")
  alice.login()

  ti1 = alice.sendfile(recipient = '+33600000000', use_identifier = True)[1]['created_transaction_id']
  assert meta.database.users.count() == 2
  ti2 = alice.sendfile(recipient = '0600000000', use_identifier = True)[1]['created_transaction_id']
  assert meta.database.users.count() == 3
  assert meta.database.users.find_one(
    {'accounts.id': '+33600000000'})
  assert meta.database.users.find_one(
    {'accounts.id': '0600000000'})
  recipientplus = meta.database.users.find_one(
    {'accounts.id': '+33600000000'})
  recipient = meta.database.users.find_one(
    {'accounts.id': '0600000000'})
  assert recipient['_id'] != recipientplus['_id']
  assert recipient['ghost_code'] != recipientplus['ghost_code']
  alice.transaction_update(ti1, transaction_status.INITIALIZED)
  alice.transaction_update(ti2, transaction_status.INITIALIZED)
  alice.transaction_update(ti1, transaction_status.GHOST_UPLOADED)
  alice.transaction_update(ti2, transaction_status.GHOST_UPLOADED)
