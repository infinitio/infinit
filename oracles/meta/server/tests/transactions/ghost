#!/usr/bin/env python3

from utils import *
from infinit.oracles.meta.server import transaction_status

class Metrics:

  def __init__(self):
    self.got = {}

  def send(self, metrics, collection, user_agent = None):
    for metric in metrics:
      self.got.setdefault(metric['event'], []).append(metric)

with Meta() as meta:
  assert meta.meta.metrics is None
  bob = User(meta, "bob@infinit.io")
  bob.login()
  transaction, res = bob.sendfile(recipient = "alice@infinit.io", use_identifier = False)

  transaction_id = res['created_transaction_id']

  alice = User(meta, "alice@infinit.io")
  alice.login()

  res = alice.get('transaction/%s' % transaction_id)

  for key in transaction.keys():
    if key in ['id_or_email', 'device_id']: # Special cases.
      continue
    assert res[key] == transaction[key]
  res['recipient_id'] == transaction['recipient_id']

# Check if download_link is sent.
with Meta(metrics = Metrics()) as meta:
  assertEq(len(meta.meta.metrics.got), 0)
  bob = User(meta, "bob@infinit.io")
  bob.login()
  transaction, res = bob.sendfile(recipient = "alice@infinit.io", initialize = True)
  tid = res['created_transaction_id']
  res = bob.transaction_update(tid, transaction_status.GHOST_UPLOADED)
  assertIn('download_link', res)
  assertIn('transaction_hash', res)
  res = bob.get('transaction/%s' % tid)
  assertIn('download_link', res)
  assertIn('transaction_hash', res)
  res = bob.get('transaction/by_hash/%s' % res['transaction_hash'])
  assertIn('download_link', res)

  transaction, res = bob.sendfile(recipient = "+336000000", initialize = True)
  tid = res['created_transaction_id']
  res = bob.transaction_update(tid, transaction_status.GHOST_UPLOADED)
  assertIn('download_link', res)
  assertIn('transaction_hash', res)
  res = bob.get('transaction/%s' % tid)
  assertIn('download_link', res)
  assertIn('transaction_hash', res)
  res = bob.get('transaction/by_hash/%s' % res['transaction_hash'])
  assertIn('download_link', res)
  assertEq(len(meta.meta.metrics.got), 1)
  metrics = meta.meta.metrics.got['new_ghost']
  assertEq(len(metrics), 2)
  assertEq(set([metric['is_email'] for metric in metrics]), {True, False})
  assertEq(len([metric['user'] for metric in metrics]), 2)
  assertEq(len([metric['ghost_code'] for metric in metrics]), 2)
  assertEq(set([metric['sender'] for metric in metrics]), {str(bob.id)})
