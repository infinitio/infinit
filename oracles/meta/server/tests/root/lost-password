#!/usr/bin/env python3

import papier

import bson
import os
import utils

from utils import Meta, User, NoOpMailer
from infinit.oracles.meta.server import transaction_status

class MailService(NoOpMailer):

  def __init__(self, recipient):
    super().__init__()
    self.recipient = recipient

  def template_message(self, template_name, message):
    merges = {}
    import sys
    for entry in message['merge_vars'][0]['vars']:
      merges[entry['name']] = entry['content']
    self.recipient.reset_password_hash = merges['reset_password_hash']

class Notifier():

  def __init__(self):
    self.__notification = None

  def notify_some(self,
                  notification_type,
                  recipient_ids = None,
                  device_ids = None,
                  message = None):
    import infinit.oracles.notification
    if notification_type != infinit.oracles.notification.notifications['invalid_credentials']:
      return
    assert self.__notification is None
    self.__notification = (notification_type, recipient_ids, message)

  @property
  def notification(self):
    notification = self.__notification
    self.__notification = None
    return notification

with Meta() as meta:
  email = 'bob@infinit.io'
  fullname = 'bob'

  meta.notifier = Notifier()

  bob = User(meta, email = email, fullname = fullname)
  alice = User(meta, email = 'alice@infinit.io', fullname = 'alice')

  bob.login()
  assert alice.avatar == bob.avatar
  with open('%s/avatar.jpg' % os.path.dirname(__file__), 'rb') as f:
    bob.post('user/avatar', body = f.read())
  old_identity = bob.identity

  id = bob.sendfile(alice.id)[1]['created_transaction_id']
  bob.post("transaction/update", {"transaction_id": str(id), "status": transaction_status.INITIALIZED})

  trs = bob.get('transactions')['transactions']
  assert len(trs) == 1
  bob.logout()

  meta.mailer = MailService(bob)
  meta.post('lost-password', {"email": email})

  res = meta.get('reset-accounts/%s' % bob.reset_password_hash)
  assert res['success']

  bob.password = "new_password"
  res = meta.post('reset-accounts/%s' % bob.reset_password_hash, {"password": bob.password})
  assert res['success']

  bob.login()

  # Check that avatar is preserved on password reset.
  assert alice.avatar != bob.avatar

  assert len(bob.get('transactions')['transactions']) == 0

  new_identity = bob.identity
  assert new_identity != old_identity

  bob.logout()

  assert hasattr(bob, 'reset_password_hash')
  res = meta.post('reset-accounts/%s' % bob.reset_password_hash, {"password": bob.password})
  assert not res['success']

# Check we are kicked out of meta.
with Meta() as meta:
  email = 'bob@infinit.io'
  fullname = 'bob'
  bob = User(meta, email = email, fullname = fullname)
  meta.notifier = Notifier()
  meta.mailer = MailService(bob)
  bob.login()
  meta.post('lost-password', {"email": email})
  bob.password = 'new_password'
  res = meta.post('reset-accounts/%s' % bob.reset_password_hash,
                  {"password": bob.password})
  _, recipient_ids, message = meta.notifier.notification
  assert recipient_ids == {bson.objectid.ObjectId(bob.id)}
  try:
    bob.device
  except utils.HTTPException as e:
    assert e.status == 403
  else:
    raise Exception('bob wasn\'t logged out when resetting password')
