#!/usr/bin/env python3

import papier

import bson
import os
import utils

from utils import *
from infinit.oracles.meta.server import transaction_status

class Notifier():

  def __init__(self):
    self.__notification = None

  def notify_some(self,
                  notification_type,
                  recipient_ids = None,
                  device_ids = None,
                  message = None,
                  **kwargs):
    import infinit.oracles.notification
    if notification_type != infinit.oracles.notification.notifications['invalid_credentials']:
      return
    assert self.__notification is None
    self.__notification = (notification_type, recipient_ids, message)

  @property
  def notification(self):
    notification = self.__notification
    self.__notification = None
    return notification

def check_mail_reset(meta):
  emails = meta.emailer.emails
  assertEq(len(emails), 1)
  email = emails[0]
  assertEq(email.template, 'Reset Password')
  return email.variables['reset_token']

with Meta() as meta:
  email = 'bob@infinit.io'
  fullname = 'bob'
  meta.notifier = Notifier()
  bob = User(meta, email = email, fullname = fullname)
  alice = User(meta, email = 'alice@infinit.io', fullname = 'alice')
  bob.login()
  assert alice.avatar == bob.avatar
  with open('%s/avatar.jpg' % os.path.dirname(__file__), 'rb') as f:
    bob.post('user/avatar', body = f.read())
  old_identity = bob.identity
  id = bob.sendfile(alice.id)[1]['created_transaction_id']
  bob.post("transaction/update", {"transaction_id": str(id), "status": transaction_status.INITIALIZED})
  trs = bob.get('transactions')['transactions']
  assert len(trs) == 1
  bob.logout()
  def reset(token):
    res = meta.post(
      'users/%s/reset-password?reset_token=%s' % (email, token),
      {'password': bob.password})
  bob.password = 'new_password'
  meta.post('lost-password', {"email": email})
  token = check_mail_reset(meta)
  throws(lambda: reset('lol'), 401)
  throws(lambda: bob.login(), 403)
  reset(token)
  bob.login()
  # Check that avatar is preserved on password reset.
  assert alice.avatar != bob.avatar
  assert len(bob.get('transactions')['transactions']) == 0
  new_identity = bob.identity
  assert new_identity != old_identity
  bob.logout()

# Check we are kicked out of meta.
with Meta() as meta:
  email = 'bob@infinit.io'
  fullname = 'bob'
  bob = User(meta, email = email, fullname = fullname)
  meta.notifier = Notifier()
  bob.login()
  meta.post('lost-password', {"email": email})
  bob.password = 'new_password'
  token = check_mail_reset(meta)
  res = meta.post(
    'users/%s/reset-password?reset_token=%s' % (email, token),
    {"password": bob.password})
  _, recipient_ids, message = meta.notifier.notification
  assert recipient_ids == {bson.objectid.ObjectId(bob.id)}
  throws(lambda: bob.device, 403)
