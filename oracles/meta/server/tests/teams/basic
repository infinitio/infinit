#!/usr/bin/env python3

import datetime

from utils import *
from infinit.oracles.meta import error

with Stripe() as stripe:

  # Bad request.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    admin = User(meta, 'boss_%s@infinit.io' % test_suffix)
    admin.login()
    # No name
    throws(lambda: admin.post('teams', {
      'stripe_token': stripe.pay(admin.email),
      'plan': 'team'
    }), 400)
    # No stripe token
    throws(lambda: admin.post('teams', {
      'name': 'some_team_%s' % test_suffix,
      'plan': 'team'
    }), 400)
    # No plan
    throws(lambda: admin.post('teams', {
      'name': 'some_team_%s' % test_suffix,
      'stripe_token': stripe.pay(admin.email),
    }), 400)

  # Creating and deleting.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    plan_id = 'team'
    admin = User(meta, 'boss_%s@infinit.io' % test_suffix)
    admin.login()
    # Create team.
    team_name = 'infinit_%s' % test_suffix
    team = admin.create_team(
      name = team_name, stripe_token = stripe.pay(admin.email),
      plan = plan_id)
    throws(lambda: admin.create_team(
           name = 'fail', stripe_token = stripe.pay(admin.email)), 403)
    team = admin.get('team')
    assertEq(team['name'], team_name)
    assertEq(team['admin']['id'], admin.id)
    assertEq(len(team['members']), 1)
    assertEq(team['members'][0]['id'], admin.id)
    stripe.check_plan(admin.email, plan_id, quantity = 1)
    # Add member.
    bob = User(meta, 'bob_%s@infinit.io' % test_suffix)
    bob.login()
    admin.invite_team_member(bob.email)
    bob.join_team(team['id'])
    team = admin.get('team')
    assertEq(len(team['members']), 2)
    stripe.check_plan(admin.email, plan_id, quantity = 2)
    # Fail delete team.
    throws(lambda: admin.delete('team'), 403)
    # Delete team.
    admin.delete('team', {'password': admin.password})
    throws(lambda: admin.get('team'), 404)
    stripe.check_plan(admin.email, plan_id, canceled = True)
    assertEq(
      meta.inner.database.teams.find({'_id': bson.ObjectId(team['id'])}).count(),
      0)
    res = admin.me
    assertEq(res['plan'], 'basic')
    assertNeq(res['quotas']['send_to_self']['quota'], None)
    assertNeq(res['quotas']['p2p']['limit'], None)
    bob.logout()
    bob.login()
    res = bob.me
    assertEq(res['plan'], 'basic')
    assertNeq(res['quotas']['send_to_self']['quota'], None)
    assertNeq(res['quotas']['p2p']['limit'], None)

  # Create and deleting a team_year.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    plan_id = 'team'
    admin = User(meta, 'boss_%s@infinit.io' % test_suffix)
    admin.login()
    # Create team with yearly billings.
    team_name = 'infinit_%s' % test_suffix
    team = admin.create_team(
      name = team_name, stripe_token = stripe.pay(admin.email),
      plan = plan_id, interval = 'year')
    throws(lambda: admin.create_team(
           name = 'fail', stripe_token = stripe.pay(admin.email)), 403)
    team = admin.get('team')
    assertEq(team['name'], team_name)
    assertEq(team['admin']['id'], admin.id)
    assertEq(len(team['members']), 1)
    assertEq(team['members'][0]['id'], admin.id)
    stripe.check_plan(admin.email, 'team_year', quantity = 1)
    # Add member.
    bob = User(meta, 'bob_%s@infinit.io' % test_suffix)
    bob.login()
    admin.invite_team_member(bob.email)
    bob.join_team(team['id'])
    team = admin.get('team')
    assertEq(len(team['members']), 2)
    stripe.check_plan(admin.email, 'team_year', quantity = 2)
    # Fail delete team.
    throws(lambda: admin.delete('team'), 403)
    # Delete team.
    admin.delete('team', {'password': admin.password})
    throws(lambda: admin.get('team'), 404)
    stripe.check_plan(admin.email, 'team_year', canceled = True)
    assertEq(
      meta.inner.database.teams.find({'_id': bson.ObjectId(team['id'])}).count(),
      0)
    res = admin.me
    assertEq(res['plan'], 'basic')
    assertNeq(res['quotas']['send_to_self']['quota'], None)
    assertNeq(res['quotas']['p2p']['limit'], None)
    bob.logout()
    bob.login()
    res = bob.me
    assertEq(res['plan'], 'basic')
    assertNeq(res['quotas']['send_to_self']['quota'], None)
    assertNeq(res['quotas']['p2p']['limit'], None)

  # Team uniqueness.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    admin = User(meta, 'boss_%s@infinit.io' % test_suffix)
    admin.login()
    team = admin.create_team(
      name = 'infinit_%s' % test_suffix,
      stripe_token = stripe.pay(admin.email))
    # admin already has a team.
    throws(lambda: admin.create_team(
      name = 'bombarde', stripe_token = stripe.pay(admin.email)),
           401)

  # Team name does not require to be unique.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    admin = User(meta, 'boss_%s@infinit.io' % test_suffix)
    admin.login()
    original_name = 'infinit_%s' % test_suffix
    team = admin.create_team(
      name = original_name, stripe_token = stripe.pay(admin.email))
    bob = User(meta, 'bob_%s@infinit.io' % test_suffix)
    bob.login()
    bob.create_team(
      name = original_name, stripe_token = stripe.pay(admin.email))

  # Create a team with coupon
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    admin = User(meta, 'boss_%s@infinit.io' % test_suffix)
    admin.login()
    team = admin.create_team(
      name = 'infinit_%s' % test_suffix,
      stripe_token = stripe.pay(admin.email),
      stripe_coupon = 'coupon_30')
    bob = User(meta, 'bob_%s@infinit.io' % test_suffix)
    bob.login()
    admin.invite_team_member(bob.email)
    bob.join_team(team['id'])
    stripe.check_plan(admin.email, 'team', percent_off = 30, quantity = 2)

  # Adding and removing users.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    plan = meta.create_plan(stripe, 'plan_name_%s' % test_suffix, {})
    admin = User(meta, 'boss_%s@infinit.io' % test_suffix)
    admin.login()
    team = admin.create_team(
      name = 'infinit_%s' % test_suffix,
      stripe_token = stripe.pay(admin.email),
      plan = plan['id'])
    stripe.check_plan(admin.email, plan['id'], quantity = 1)
    # Invite an existing user.
    baptiste = User(meta, 'baptiste_%s@infinit.io' % stripe.suffix())
    admin.invite_team_member(baptiste.id)
    res = admin.get('team')
    assertEq(len(res['members']), 1)
    assertEq(len(res['invitees']), 1)
    stripe.check_plan(admin.email, plan['id'], quantity = 1)
    baptiste.login()
    baptiste.join_team(team['id'])
    res = admin.get('team')
    assertEq(len(res['members']), 2)
    assertEq(len(res['invitees']), 0)
    stripe.check_plan(admin.email, plan['id'], quantity = 2)
    raph = User(meta, 'raph_%s@infinit.io' % stripe.suffix())
    raph.login()
    # Join without invitation.
    throws(lambda: raph.join_team(team['id']), 403)
    # Invite.
    admin.invite_team_member(raph.id)
    res = admin.get('team')
    assertEq(len(res['members']), 2)
    assertEq(len(res['invitees']), 1)
    stripe.check_plan(admin.email, plan['id'], quantity = 2)
    raph.join_team(team['id'])
    res = admin.get('team')
    assertEq(len(res['members']), 3)
    assertEq(len(res['invitees']), 0)
    stripe.check_plan(admin.email, plan['id'], quantity = 3)
    # Delete a user.
    admin.delete_team_member(raph.id)
    assertEq(len(admin.get('team')['members']), 2)
    stripe.check_plan(admin.email, plan['id'], quantity = 2)
    # Reject invitation.
    jean = User(meta, 'jean@infinit.io')
    admin.invite_team_member(jean.id)
    res = admin.get('team')
    assertEq(len(res['members']), 2)
    assertEq(len(res['invitees']), 1)
    jean.login()
    jean.reject_invitation(team['id'])
    res = admin.get('team')
    assertEq(len(res['members']), 2)
    assertEq(len(res['invitees']), 0)
    # Uninvite.
    pierre = User(meta, 'pierre_%s@infinit.io' % stripe.suffix())
    admin.invite_team_member(pierre.id)
    res = admin.get('team')
    assertEq(len(res['members']), 2)
    assertEq(len(res['invitees']), 1)
    admin.uninvite_team_member(pierre.id)
    res = admin.get('team')
    assertEq(len(res['members']), 2)
    assertEq(len(res['invitees']), 0)

  # Default Team storage.
  with Meta(stripe_api_key = Stripe.key) as meta:
    with Trophonius(meta) as tropho:

      def check_account(account, plan, link_quota, link_usage = 0):
        assertEq(account['plan'], plan)
        link = account['quotas']['links']
        assertEq(link['quota'], link_quota)
        assertEq(link['used'], link_usage)

      def check_user(user, plan, link_quota, link_usage = 0):
        while len(user.notifications):
          notif = user.next_notification()
          # Only watch for model update notifications with the user's account.
          if notif.get('account'):
            check_account(notif['account'], plan, link_quota, link_usage)
        res = user.get('user/synchronize?init=1')
        check_account(res['account'], plan, link_quota, link_usage)

      def get_a_link(user, size):
        link = user.getalink(files = [('bite', size)])
        # Meta is updating quota by reading cloud storage file size which is
        # not realy uploaded here, so insert set the value manually.
        meta.database.links.update(
          {'hash': link['hash']},
          {'$set': {'file_size': size, 'quota_counted': True}})
        user.link_update(link, transaction_status.FINISHED)
        return link

      test_suffix = stripe.suffix()
      plan_id = 'team'
      per_user = int(15e10)
      admin = User(meta, 'boss_%s@infinit.io' % test_suffix)
      members = [admin]
      admin.login(trophonius = tropho)
      team = admin.create_team(
        name = 'infinit_%s' % test_suffix,
        stripe_token = stripe.pay(admin.email),
        plan = plan_id)
      check_user(admin, plan_id, per_user)
      # Add first member.
      jean = User(meta, 'jean_%s@infinit.io' % test_suffix)
      jean.login(trophonius = tropho)
      admin.invite_team_member(jean.email)
      jean.join_team(team['id'])
      members.append(jean)
      for user in members:
        check_user(user, plan_id, per_user * 2)
      # Add second member.
      bob = User(meta, 'bob_%s@infinit.io' % test_suffix)
      bob.login(trophonius = tropho)
      admin.invite_team_member(bob.email)
      bob.join_team(team['id'])
      members.append(bob)
      for user in members:
        check_user(user, plan_id, per_user * 3)
      # Use some storage
      get_a_link(jean, 10)
      for user in members:
        check_user(user, plan_id, per_user * 3, 10)
      link = get_a_link(admin, 25)
      for user in members:
        check_user(user, plan_id, per_user * 3, 35)
      admin.link_update(link, transaction_status.DELETED)
      for user in members:
        check_user(user, plan_id, per_user * 3, 10)
      get_a_link(bob, 20)
      for user in members:
        check_user(user, plan_id, per_user * 3, 30)
      # Remove a member.
      admin.delete_team_member(jean.id)
      members.remove(jean)
      for user in members:
        check_user(user, plan_id, per_user * 2, 20)
      check_user(jean, 'basic', int(1e9), 10)

  # Custom Team storage.
  for per_user in [True, False]:
    with Meta(stripe_api_key = Stripe.key) as meta:
      with Trophonius(meta) as tropho:

        def check_account(account, plan, link_quota, link_usage = 0):
          assertEq(account['plan'], plan)
          link = account['quotas']['links']
          assertEq(link['quota'], link_quota)
          assertEq(link['used'], link_usage)

        def check_user(user, plan, link_quota, link_usage = 0):
          notified = False
          while len(user.notifications):
            notif = user.next_notification()
            # Only watch for model update notifications with the user's account.
            if notif.get('account'):
              check_account(notif['account'], plan, link_quota, link_usage)
              notified = True
          assert notified
          res = user.get('user/synchronize?init=1')
          check_account(res['account'], plan, link_quota, link_usage)

        def get_a_link(user, size):
          link = user.getalink(files = [('bite', size)])
          # Meta is updating quota by reading cloud storage file size which is
          # not realy uploaded here, so insert set the value manually.
          meta.database.links.update(
            {'hash': link['hash']},
            {'$set': {'file_size': size, 'quota_counted': True}})
          user.link_update(link, transaction_status.FINISHED)
          return link

        test_suffix = stripe.suffix()
        link_limit = int(1e11)
        storage = lambda: link_limit * len(members) if per_user else link_limit
        body = {'quotas': {'links': {'per_user_storage': link_limit}}} if per_user else \
               {'quotas': {'links': {'default_storage': link_limit}}}
        plan = meta.create_plan(stripe, 'plan_name_%s' % test_suffix, body)
        admin = User(meta, 'boss_%s@infinit.io' % test_suffix)
        members = [admin]
        admin.login(trophonius = tropho)
        team = admin.create_team(
          name = 'infinit_%s' % test_suffix,
          stripe_token = stripe.pay(admin.email),
          plan = plan['id'])
        check_user(admin, 'team', storage())
        # Add first member.
        jean = User(meta, 'jean_%s@infinit.io' % test_suffix)
        jean.login(trophonius = tropho)
        admin.invite_team_member(jean.email)
        jean.join_team(team['id'])
        members.append(jean)
        for user in members:
          check_user(user, 'team', storage())
        # Add second member.
        bob = User(meta, 'bob_%s@infinit.io' % test_suffix)
        bob.login(trophonius = tropho)
        admin.invite_team_member(bob.email)
        bob.join_team(team['id'])
        members.append(bob)
        for user in members:
          check_user(user, 'team', storage())
        # Use some storage
        get_a_link(jean, 10)
        for user in members:
          check_user(user, 'team', storage(), 10)
        link = get_a_link(admin, 25)
        for user in members:
          check_user(user, 'team', storage(), 35)
        admin.link_update(link, transaction_status.DELETED)
        for user in members:
          check_user(user, 'team', storage(), 10)
        get_a_link(bob, 20)
        for user in members:
          check_user(user, 'team', storage(), 30)
        # Remove a member.
        admin.delete_team_member(jean.id)
        members.remove(jean)
        for user in members:
          check_user(user, 'team', storage(), 20)
        check_user(jean, 'basic', int(1e9), 10)

  # Team view as member.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    admin = User(meta, 'boss_%s@infinit.io' % test_suffix)
    admin.login()
    team = admin.create_team(
      name = 'infinit', stripe_token = stripe.pay(admin.email))
    baptiste = User(meta, 'baptiste_%s@infinit.io' % test_suffix)
    admin.invite_team_member(baptiste.id)
    baptiste.login()
    baptiste.join_team(team['id'])
    # Get info about the team as non admin.
    team = baptiste.get('team')
    assertEq(len(team['members']), 2)
    assertEq(team['admin']['id'], admin.id)

  # Deleting a team should remove all members.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    plan = meta.create_plan(stripe, 'plan_name_%s' % test_suffix, {})
    admin = User(meta, 'boss_%s@infinit.io' % test_suffix)
    admin.login()
    team = admin.create_team(
      name = 'infinit_%s' % test_suffix,
      stripe_token = stripe.pay(admin.email),
      plan = plan['id'])
    baptiste = User(meta, 'baptiste_%s@infinit.io' % test_suffix)
    admin.invite_team_member(baptiste.id)
    baptiste.login()
    baptiste.join_team(team['id'])
    team = admin.get('team')
    assertEq(len(team['members']), 2)
    stripe.check_plan(admin.email, plan['id'], quantity = 2)
    assertEq(team['admin']['id'], admin.id)
    admin.delete('team', {'password': admin.password})
    stripe.check_plan(admin.email, plan['id'], canceled = True)
    throws(lambda: baptiste.get('team'), 404)
    throws(lambda: admin.get('team'), 404)

  # Invite user who already has a team (and get out of a team).
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    admin = User(meta, 'boss_%s@infinit.io' % test_suffix)
    admin.login()
    plan_infinit = \
      meta.create_plan(stripe, 'plan_infinit_name_%s' % test_suffix, {})
    team_infinit = admin.create_team(
      name = 'infinit_%s' % test_suffix,
      stripe_token = stripe.pay(admin.email),
      plan = plan_infinit['id'])
    dropbox = User(meta, 'boss_%s@dropbox.com' % test_suffix)
    dropbox.login()
    plan_dropbox = \
      meta.create_plan(stripe, 'plan_dropbox_name_%s' % test_suffix, {})
    team_dropbox = dropbox.create_team(
      name = 'dropbox_%s' % test_suffix,
      stripe_token = stripe.pay(dropbox.email),
      plan = plan_dropbox['id'])
    invitee = User(meta, 'invitee_%s@infinit.io' % test_suffix)
    invite_guido = lambda x: x.invite_team_member(invitee.id)
    # Invite to first team.
    invite_guido(dropbox)
    res = dropbox.get('team')
    assertEq(len(res['members']), 1)
    assertEq(len(res['invitees']), 1)
    # Invite to second team.
    invite_guido(admin)
    res = admin.get('team')
    assertEq(len(res['members']), 1)
    assertEq(len(res['invitees']), 1)
    invitee.login()
    # Join first team.
    invitee.join_team(team_dropbox['id'])
    res = dropbox.get('team')
    assertEq(len(res['members']), 2)
    assertEq(len(res['invitees']), 0)
    res = admin.get('team')
    assertEq(len(res['members']), 1)
    assertEq(len(res['invitees']), 1)
    assertEq(invitee.get('team')['name'], team_dropbox['name'])
    # Try to join second team.
    throws(lambda: invitee.join_team(team_infinit['id']), 409)
    throws(lambda: invitee.post('team/leave'), 401)
    invitee.post('team/leave', {'password': invitee.password})
    assertEq(len(dropbox.get('team')['members']), 1)
    stripe.check_plan(dropbox.email, plan_dropbox['id'], quantity = 1)
    invitee.join_team(team_infinit['id'])
    assertEq(invitee.get('team')['name'], team_infinit['name'])
    res = admin.get('team')
    assertEq(len(res['members']), 2)
    assertEq(len(res['invitees']), 0)
    stripe.check_plan(admin.email, plan_infinit['id'], quantity = 2)

  # Admin exiting plan.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    plan = meta.create_plan(
      stripe,
      'plan_name_%s' % test_suffix,
      {},
      amount = 10)
    admin = User(meta, 'boss_%s@infinit.io' % test_suffix)
    admin.login()
    admin.update_plan('premium', stripe_token = stripe.pay(admin.email))
    assertEq(admin.me['plan'], 'premium')
    stripe.check_plan(admin.email, 'premium', 999)
    admin.create_team(
      name = 'infinit_%s' % test_suffix,
      stripe_token = stripe.pay(admin.email),
      plan = plan['id'])
    stripe.check_plan(admin.email, plan['id'], 10, quantity = 1,
                      check_next_invoice = False)

  # User existing plan.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    plan = meta.create_plan(
      stripe,
      'plan_name_%s' % test_suffix,
      {},
      amount = 10)
    admin = User(meta, 'boss_%s@infinit.io' % test_suffix)
    admin.login()
    team = admin.create_team(
      name = 'infinit_%s' % test_suffix,
      stripe_token = stripe.pay(admin.email),
      plan = plan['id'])
    stripe.check_plan(admin.email, plan['id'], 10, quantity = 1)
    member = User(meta, 'bob_%s@infinit.io' % test_suffix)
    member.login()
    member.update_plan('premium', stripe_token = stripe.pay(member.email))
    stripe.check_plan(member.email, 'premium', 999)
    admin.invite_team_member(member.email)
    member.join_team(team['id'])
    stripe.check_plan(admin.email, plan['id'], 10, quantity = 2,
                      check_next_invoice = False)
    # Member plan should be canceled prorata.
    stripe.check_no_plan(member.email)

  # Delete user who is part of team.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    plan = meta.create_plan(
      stripe,
      'plan_name_%s' % test_suffix,
      {},
      amount = 10)
    admin = User(meta, 'boss_%s@infinit.io' % test_suffix)
    admin.login()
    team = admin.create_team(
      name = 'infinit_%s' % test_suffix,
      stripe_token = stripe.pay(admin.email),
      plan = plan['id'])
    stripe.check_plan(admin.email, plan['id'], 10, quantity = 1)
    another_admin = User(meta, 'bob_%s@infinit.io' % test_suffix)
    another_admin.login()
    another_admin.create_team(
      name = 'another_%s' % test_suffix,
      stripe_token = stripe.pay(another_admin),
      plan = plan['id'])
    stripe.check_plan(another_admin.email, plan['id'], 10, quantity = 1)
    member = User(meta, 'jean_%s@infinit.io' % test_suffix)
    member.login()
    admin.invite_team_member(member.email)
    another_admin.invite_team_member(member.email)
    assertEq(len(another_admin.get('team')['invitees']), 1)
    member.join_team(team['id'])
    assertEq(len(admin.get('team')['members']), 2)
    stripe.check_plan(admin.email, plan['id'], 10, quantity = 2)
    member.delete('user')
    assertEq(len(admin.get('team')['members']), 1)
    stripe.check_plan(admin.email, plan['id'], 10, quantity = 1)
    assertEq(len(another_admin.get('team')['invitees']), 0)

  # Delete user admin of team.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    plan = meta.create_plan(
      stripe,
      'plan_name_%s' % test_suffix,
      {},
      amount = 10)
    admin = User(meta, 'boss_%s@infinit.io' % test_suffix)
    admin.login()
    team = admin.create_team(
      name = 'infinit_%s' % test_suffix,
      stripe_token = stripe.pay(admin.email),
      plan = plan['id'])
    throws(lambda: admin.delete('user'), 403)
    admin.delete('team', {'password': admin.password})
    admin.delete('user')

  # Change admin user's email address.
  with Meta(stripe_api_key = Stripe.key) as meta:
    # Pasted from auxiliary_emails
    class MailService(NoOpMailer):

      def __init__(self):
        self.change_email = {}
        super().__init__(True)

      def template_message(self, template_message, message):
        merges = {}
        for entry in message['merge_vars'][0]['vars']:
          merges[entry['name']] = entry['content']
        if template_message == 'change-email-address':
           self.change_email.update(
             {
               merges['new_email_address']: merges['hash']
             })

    def get_keys(emails, size):
      assertEq(len(emails), size)
      keys = {}
      for email in emails:
        keys[email.variables['email']] = email.variables['confirm_token']
      return keys

    test_suffix = stripe.suffix()
    original_email = 'first_email_%s@infinit.io' % test_suffix
    admin = User(meta, original_email)
    admin.login()
    team = admin.create_team(
      name = 'infinit_%s' % test_suffix,
      stripe_token = stripe.pay(admin.email))
    stripe.check_plan(admin.email, 'team', 1200, quantity = 1)
    new_email = 'jean_pierre_%s@infinit.io' % test_suffix
    admin.put('user/accounts/%s' % new_email)
    keys = get_keys(meta.emailer.emails, 1)
    admin.post(
      'users/%s/accounts/%s/confirm' % (admin.email, new_email),
      {'confirm_token': keys[new_email.lower()]})
    admin.get('users/%s' % new_email)
    admin.post('user/accounts/%s/make_primary' % new_email, {
      'password': admin.password
    })
    stripe.check_plan(new_email, 'team', 1200, quantity = 1)
    # Add email address to stripe list for cleanup.
    stripe.emails.add(new_email)
    throws(lambda: stripe.customer_with_email(original_email), StripeTestException)

  # Invite user who isn't on Infinit by email.
  with Meta(stripe_api_key = Stripe.key) as meta:

    def sort_dict(d):
      import collections
      return collections.OrderedDict(sorted(d.items()))

    test_suffix = stripe.suffix()
    admin = User(meta, 'boss_%s@infinit.io' % stripe.suffix())
    admin.login()
    team = admin.create_team(
      name = 'infinit_%s' % test_suffix,
      stripe_token = stripe.pay(admin.email))
    jean_email = 'jean_%s@infinit.io' % stripe.suffix()
    jean_email2 = 'jean2_%s@infinit.io' % stripe.suffix()
    admin.invite_team_member(jean_email)
    admin.invite_team_member(jean_email2)
    res = admin.get('team')
    assertEq(len(res['invitees']), 2)
    for invitee in res['invitees']:
      if invitee['id'] != jean_email and invitee['id'] != jean_email2:
        assert False
    assertEq(len(res['members']), 1)
    assertEq(res['invitees'][0]['id'], jean_email)
    assertEq(res['invitees'][1]['id'], jean_email2)
    jean = User(meta, jean_email)
    # Add another email address the dirty way.
    meta.inner.database.users.update(
      {'_id': bson.ObjectId(jean.id)},
      {'$push': {
        'accounts': sort_dict({'id': jean_email2, 'type': 'email'})}
      })
    jean.login()
    jean.join_team(team['id'])
    res = admin.get('team')
    assertEq(len(res['members']), 2)
    assertEq(len(res['invitees']), 0)
    assertEq(res['members'][1]['id'], jean.id)

  # Emails.
  with Meta(stripe_api_key = Stripe.key) as meta:

    def __email_shared_check(email, recipient, admin, team, user = None):
      assertEq(email.recipient.email, recipient)
      vars = email.variables
      assertEq(vars['admin']['id'], admin.id)
      assertEq(vars['admin']['email'], admin.email)
      assertEq(vars['admin']['fullname'], admin.fullname)
      assertNeq(vars['admin']['avatar'], None)
      assertEq(vars['team']['id'], bson.ObjectId(team['id']))
      assertEq(vars['team']['name'], team['name'])
      if user:
        assertEq(vars['user']['email'], user.email)
        assertEq(vars['user']['fullname'], user.fullname)

    def __check_join_email(email, recipient, admin, team, user = None):
      __email_shared_check(email, recipient, admin, team, user)
      vars = email.variables
      if user:
        assertNeq(vars.get('login_token'), None)
      else:
        assertEq(vars.get('ghost_email'), recipient)

    def __check_joined_email(email, recipient, admin, team, user):
      __email_shared_check(email, recipient, admin, team, user)
      vars = email.variables
      assertEq(len(vars['team']['members']), len(team['members']))
      assertNeq(vars['team']['members'][0].get('email'), None)
      assertNeq(vars['team']['members'][0].get('fullname'), None)
      assertNeq(vars['team']['members'][0].get('id'), None)
      assertNeq(vars.get('login_token'), None)

    def __check_kicked_out_email(email, recipient, admin, team, user):
      __email_shared_check(email, recipient, admin, team, user)
      vars = email.variables
      assertNeq(vars.get('login_token'), None)

    def __check_left_email(email, recipient, admin, team, user):
      __email_shared_check(email, recipient, admin, team, user)
      vars = email.variables
      assertEq(len(vars['team']['members']), len(team['members']))
      assertNeq(vars['team']['members'][0].get('email'), None)
      assertNeq(vars['team']['members'][0].get('fullname'), None)
      assertNeq(vars['team']['members'][0].get('id'), None)
      assertNeq(vars.get('login_token'), None)

    test_suffix = stripe.suffix()
    admin = User(meta, 'admin_%s@infinit.io' % test_suffix)
    admin.login()
    team = admin.create_team(name = 'email_test_%s' % test_suffix,
                             stripe_token = stripe.pay(admin.email))
    # Invite non-user.
    non_user_email = 'non_user_%s@infinit.io' % test_suffix
    admin.invite_team_member(non_user_email)
    __check_join_email(
      meta.emailer.template('Join')[0], non_user_email, admin, team)
    # Invite user.
    bob = User(meta, 'bob_%s@infinit.io' % test_suffix)
    bob.login()
    admin.invite_team_member(bob.email)
    __check_join_email(
      meta.emailer.template('Join')[0], bob.email, admin, team, bob)
    # Accept invite.
    bob.join_team(team['id'])
    __check_joined_email(
      meta.emailer.template('Joined')[0], admin.email, admin, team, bob)
    # Kick user out.
    admin.delete('team/members/%s' % bob.email)
    __check_kicked_out_email(
      meta.emailer.template('Kicked Out')[0], bob.email, admin, team, bob)
    # User leaves.
    alice = User(meta, 'alice_%s@infinit.io' % test_suffix)
    alice.login()
    admin.invite_team_member(alice.email)
    alice.join_team(team['id'])
    alice.leave_team(alice.password)
    __check_left_email(
      meta.emailer.template('Left')[0], admin.email, admin, team, alice)

  # Team members cannot change their plan.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    admin = User(meta, 'boss_%s@infinit.io' % test_suffix)
    admin.login()
    team = admin.create_team(
      name = 'infinit_%s' % test_suffix,
      stripe_token = stripe.pay(admin.email))
    bob = User(meta, 'bob_%s@infinit.io' % test_suffix)
    admin.invite_team_member(bob.email)
    bob.login()
    bob.join_team(team['id'])
    throws(lambda: admin.update_plan(plan = 'basic'), 403)
    throws(lambda: bob.update_plan(plan = 'basic'), 403)

  # Coupons and invoices.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    coupon_id = 'coupon_team_%s' % test_suffix
    from stripe import Coupon, Invoice
    discount = 0.5
    Coupon.create(
      api_key = Stripe.key,
      percent_off= int(discount * 100),
      duration='repeating',
      duration_in_months = 1,
      max_redemptions = 1,
      id=coupon_id)
    admin = User(meta, 'sergio_%s@infinit.io' % test_suffix)
    admin.login()
    team = admin.create_team(
      name = 'team_burton_%s' % test_suffix,
      stripe_token = stripe.pay(admin.email),
      stripe_coupon = coupon_id)
    last_charge = admin.invoices['invoices'][0]['last_charge']
    invoice = admin.invoices['invoices'][0]['invoice']
    assertEq(last_charge['amount'], discount * 1200)
    customer = stripe.customer_with_email(admin.email)
    invoice = Invoice.upcoming(customer=customer['id'])
    # Coupon last one month, so next month amount due has to be 1200.
    assertEq(invoice['amount_due'], 1200)
    # Add members.
    users = ['alice', 'bob', 'serge']
    for user in users:
      member = User(meta, '%s_%s@infinit.io' % (user, test_suffix))
      member.login()
      admin.invite_team_member(member.email)
      member.join_team(team['id'])
      invoice = Invoice.upcoming(customer=customer['id'])
      assertEq(invoice['amount_due'],
               1200 + ((1 + discount) * 1200) * (users.index(user) + 1))

  # XXX: Add tests for all admin functions calls.

  # # Infinit administration.
  # with Meta(stripe_api_key = Stripe.key) as meta:
  #   test_suffix = stripe.suffix()
  #   admin = User(meta, 'admin_%s@infinit.io' % test_suffix)
  #   admin.login()
  #   plan = meta.create_plan(stripe, 'plan_name_%s' % test_suffix, {})
  #   team = admin.create_team(
  #     name = 'infinit_%s' % test_suffix,
  #     stripe_token = stripe.pay(admin.email),
  #     plan = plan['id'])
  #   # View.
  #   admin_view = admin.get('teams/%s' % team['id'])
  #   # XXX: Do the correct checks.
  #   # Rename.
  #   renamed_team = admin.put('teams/%s' % team['id'], {'name': 'Bombarde'})
  #   assertEq(renamed_team['name'], 'Bombarde')
  #   # Add user.
  #   baptiste = User(meta, 'baptiste_%s@infinit.io' % stripe.suffix())
  #   admin.add_team_member(baptiste.id)
  #   # Get info about the team as non admin.
  #   baptiste.login()
  #   team = baptiste.get('team')
  #   assertEq(len(team['members']), 2)
  #   assertEq(team['admin'], admin.id)
  #   admin.delete('team', {'password': admin.password})
  #   throws(lambda: baptiste.get('team'), 404)
  #   throws(lambda: admin.get('team'), 404)
  #   updated_team = admin.put('teams/%s/members/%s' % (team['id'], baptiste.id))
  #   assert user_in_team(updated_team, baptiste)
  #   assert user_in_team(admin.get('team'), baptiste)
  #   # Remove user.
  #   updated_team = admin.delete('teams/%s/members/%s' %
  #                               (team['id'], baptiste.id))
  #   assert not user_in_team(updated_team, baptiste)
  #   assert not user_in_team(admin.get('team'), baptiste)
