#!/usr/bin/env python3

import datetime
from time import sleep

from utils import *
from bson.objectid import ObjectId
import infinit.oracles.meta.server.transaction_status as transaction_status

with Meta() as meta:
  jean = User(meta, 'jeantest@infinit.io')
  jean.login()

  # Create a link.
  file_list = [
    ['file1', 42],
    ['file2', 43],
    ['file3', 44],
  ]
  message = 'salut!'
  res = jean.post(
    'link',
    {
      'files': file_list,
      'name': 'infinit_test_not_a_real_link',
      'message': message,
    }
  )
  assert res['aws_credentials']
  assert res['transaction']
  link = res['transaction']
  link = meta.database.links.find_one({'_id': ObjectId(link['id'])})

  # Check that the hash works to fetch it while it's uploading.
  res = meta.get('link/%s' % link['hash'])
  assert res['click_count'] == 1
  assert len(res['files']) == 3
  assert res['progress'] == 0.0
  assert res['status'] == transaction_status.CREATED
  assert res['message'] == message
  assert res.get('link', None) is None

  # Set link status to done.
  res = jean.post('link/%s' % str(link['_id']),
                  {'progress': 1.0,
                   'status': transaction_status.FINISHED})
  assert res['success']

  res = meta.get('link/%s' % link['hash'])
  assert res['click_count'] == 2
  assert len(res['files']) == 3
  assert res['link']
  assert res['progress'] == 1.0
  assert res['status'] == transaction_status.FINISHED
  assert res.get('link', None) is not None

  # Create another link.
  res = jean.post('link', {'files': [['some_file.zip', 12321]],
                           'name': 'infinit_test_not_a_real_link',
                           'message': message})
  assert res['aws_credentials']
  assert res['transaction']
  link = res['transaction']
  link = meta.database.links.find_one({'_id': ObjectId(link['id'])})

  # Check that we have two links.
  assert meta.database.links.find({'sender_id': ObjectId(jean.id)}).count() == 2

  # Set one link to expired.
  meta.database.links.find_and_modify(
    {'_id': ObjectId(link['_id'])},
    {'$set': {
      'expiry_time': datetime.datetime.utcnow() + datetime.timedelta(days = -1)}
    })

  # Check that when we don't ask for expired links, we don't get them.
  res = jean.get('links')
  assert len(res['links']) == 1

  # Check that we get all links when we include expired.
  res = jean.get('links?include_expired=1')
  assert len(res['links']) == 2

  # Ensure that GET URLs are refreshed only required.
  res = jean.get('links')
  owner_link = res['links'][0]
  web_link = jean.get('link/%s' % owner_link['hash'])
  old_s3_url = web_link['link']

  # Wait so that a freshly generated link would be different.
  sleep(1)
  client_link = jean.get('link/%s' % owner_link['hash'])
  assert client_link['link'] == old_s3_url
  assert client_link['click_count'] == owner_link['click_count'] + 2

  meta.database.links.find_and_modify(
    {'_id': ObjectId(owner_link['id'])},
    {'$set': {
      'get_url_updated': (datetime.datetime.utcnow() +
                          datetime.timedelta(days = -2))
    }}
  )

  client_link = jean.get('link/%s' % owner_link['hash'])
  assert client_link['link'] != old_s3_url
  assert client_link['click_count'] == owner_link['click_count'] + 3

  # Create and then delete a link.
  file_list = [
    ['file1', 42],
  ]
  message = 'about to be deleted!'
  res = jean.post('link',
    {'files': file_list, 'name': 'infinit_test_not_a_real_link', 'message': message})
  assert res['aws_credentials']
  assert res['transaction']
  link = res['transaction']

  # Set link status to done.
  res = jean.post('link/%s' % link['id'],
                  {'progress': 0.0,
                   'status': transaction_status.DELETED})
  assert res['success']

  db_link = meta.database.links.find_one({'_id': ObjectId(link['id'])})
  assert db_link['status'] == transaction_status.DELETED
  deleted_hash = db_link['hash']

  throws(lambda: meta.get('link/%s' % deleted_hash), 410)
