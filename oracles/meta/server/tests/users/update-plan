#!/usr/bin/env python3

from utils import *
import bson
import random

with Stripe() as stripe:
  # Ensure uniqueness for stripe.
  def __suffix():
    from random import randint
    return str(randint(1e9, 9e9))

  def check_basic_quotas(user):
    res = user.me
    assertEq(res['plan'], 'basic')
    assertNeq(res['quotas']['send_to_self']['quota'], None)
    assertNeq(res['quotas']['p2p']['limit'], None)

  def check_plus_quotas(user):
    res = user.me
    assertEq(res['plan'], 'plus')
    assertEq(res['quotas']['send_to_self']['quota'], None)
    assertEq(res['quotas']['p2p']['limit'], None)

  def check_premium_quotas(user):
    res = user.me
    assertEq(res['plan'], 'premium')
    assertEq(res['quotas']['send_to_self']['quota'], None)
    assertEq(res['quotas']['p2p']['limit'], None)

  # Recently created user has 'basic' plan by default.
  with Meta(stripe_api_key = Stripe.key) as meta:
    user = User(meta, 'jean_%s@infinit.io' % __suffix())
    user.login()
    assertEq(user.me['plan'], 'basic')

  # Old user might have no plan.
  with Meta(stripe_api_key = Stripe.key) as meta:
    user = User(meta, 'jean_%s@infinit.io' % __suffix())
    res = meta.database.users.update(
      {'_id': bson.ObjectId(user.id)},
      {'$set': {'plan': None}})
    assertEq(res['n'], 1)
    user.login()
    assertEq(user.me['plan'], 'basic')

  # Bad requests.
  with Meta(stripe_api_key = Stripe.key) as meta:
    user = User(meta, 'jean_%s@infinit.io' % __suffix())
    user.login()
    throws(lambda: user.put('users/%s' % user.id, {'plan': 'Q'}), 404)
    throws(lambda: user.put('users/%s' % user.id, {'plan': 'premium'}), 400)

  # Update from basic to premium.
  with Meta(stripe_api_key = Stripe.key, force_admin = True) as meta:
    test_suffix = __suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    previous_quotas = user.me['quotas']
    res = user.update_plan('premium', stripe_token = stripe.pay(user.email))
    assertEq(res['plan'], 'premium')
    assertEq(res['amount'], 999)
    quotas = user.me['quotas']
    assertGT(quotas['links']['quota'],
             previous_quotas['links']['quota'])
    check_premium_quotas(user)
    stripe.check_plan(user.email, 'premium', 999)

  # Bad requests.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = __suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    throws(lambda: user.update_plan(None, stripe_token = 'bite'), 400)

  # Add coupon to existing subscription.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = __suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    res = user.update_plan('premium', stripe_token = stripe.pay(user.email))
    assertEq(res['amount'], 999)
    stripe.check_plan(user.email, 'premium', 999)
    res = user.update_plan('premium', stripe_coupon = 'coupon_30')
    assertEq(res['amount'], 0.7 * 999)
    stripe.check_plan(user.email, 'premium', 999, percent_off = 30)

  # Update from basic to plus.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = __suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    res = user.update_plan('plus', stripe_token = stripe.pay(user.email))
    assertEq(res['amount'], 699)
    check_plus_quotas(user)
    stripe.check_plan(user.email, 'plus', 699)

  # Update from basic to plus to premium.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = __suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    user.update_plan('plus', stripe_token = stripe.pay(user.email))
    check_plus_quotas(user)
    stripe.check_plan(user.email, 'plus', 699)
    user.update_plan('premium')
    check_premium_quotas(user)
    stripe.check_plan(user.email, 'premium', 999)

  # Update from basic to premium to basic.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = __suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    res = user.update_plan('premium', stripe_token = stripe.pay(user.email))
    assertEq(res['plan'], 'premium')
    check_premium_quotas(user)
    stripe.check_plan(user.email, 'premium', 999)
    res = user.update_plan('basic')
    assertEq(res['plan'], 'basic')
    check_basic_quotas(user)
    stripe.check_plan(user.email, 'premium', 999, canceled = True)

  # Update from basic to premium to plus.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = __suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    user.update_plan('premium', stripe_token = stripe.pay(user.email))
    check_premium_quotas(user)
    stripe.check_plan(user.email, 'premium', 999)
    user.update_plan('plus')
    check_plus_quotas(user)
    stripe.check_plan(user.email, 'plus', 699)

  # Getting premium (then getting eligible for plus by referral) then go back to
  # 'basic'.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = __suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    user.update_plan('premium', stripe_token = stripe.pay(user.email))
    stripe.check_plan(user.email, 'premium', 999)
    check_premium_quotas(user)
    User(meta, 'user1@infinit.io', referral_code = user.referral_code).login()
    User(meta, 'user2@infinit.io', referral_code = user.referral_code).login()
    check_premium_quotas(user) # User is still premium as they're still paying.
    res = user.update_plan('basic')
    assertEq(res['plan'], 'plus')
    assertEq(user.me['plan'], 'plus')
    check_plus_quotas(user)
    stripe.check_plan(user.email, 'premium', canceled = True)

  # Using coupons.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = __suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    res = user.update_plan('premium',
                           stripe_token = stripe.pay(user.email),
                           stripe_coupon = 'coupon_30')
    assertEq(res['amount'], 999 * 0.70)
    check_premium_quotas(user)
    stripe.check_plan(user.email, 'premium', 999, percent_off = 30)

  # Using coupons on different plans.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = __suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    res = user.update_plan('plus',
                           stripe_token = stripe.pay(user.email),
                           stripe_coupon = 'coupon_30')
    assertEq(res['amount'], 699 * 0.7)
    check_plus_quotas(user)
    stripe.check_plan(user.email, 'plus', 699, percent_off = 30)
    # No coupon.
    res = user.update_plan('premium')
    # XXX: This should work. Right now, coupons aren't 'deleted' when changing
    # plans.
    # assertEq(res['amount'], 999)
    # stripe.check_plan(user.email, 'premium', 999)
    check_premium_quotas(user)
    res = user.update_plan('premium', stripe_coupon = 'coupon_50')
    assertEq(res['amount'], 999 * 0.5)
    check_premium_quotas(user)
    stripe.check_plan(user.email, 'premium', 999, percent_off = 50)

  # Delete user account.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = __suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    user.update_plan('premium', stripe_token = stripe.pay(user.email))
    check_premium_quotas(user)
    stripe.check_plan(user.email, 'premium', 999)
    user.delete('user')
    stripe.check_plan(user.email, 'premium', 999, canceled = True)
