#!/usr/bin/env python3

from utils import *
import bson
import stripe
import random

stripe_key = 'sk_test_WtXpwiieEsemLlqrQeKK0qfI'
email = 'tests.stripe%s' % random.randint(1e9, 9e9) + '@infinit.io'

# Recently created user has 'basic' plan by default.
with Meta(stripe_api_key = stripe_key) as meta:
  user = User(meta, 'foobar@infinit.io')
  user.login()
  assertEq(user.me['plan'], 'basic')

# Old user might have no plan.
with Meta(stripe_api_key = stripe_key) as meta:
  user = User(meta, email)
  res = meta.database.users.update(
    {'_id': bson.ObjectId(user.id)},
    {'$set': {'plan': None}})
  assertEq(res['n'], 1)
  user.login()
  assertEq(user.me['plan'], None)

stripe_token = None
def clear():
  import stripe
  stripe.api_key = stripe_key
  cursor = None
  while True:
    if cursor:
      users = stripe.Customer.all(limit = 100, starting_after = cursor)
    else:
      users = stripe.Customer.all(limit = 100)
    for user in users['data']:
      cursor = user['id']
      if user['email'] == email:
        cu = stripe.Customer.retrieve(user['id'])
        cu.delete()
    if not users['has_more']:
      break

def _pay():
  import requests
  # 'like' the website.
  r = requests.post('https://api.stripe.com/v1/tokens?'
                    'card[number]=4242424242424242&'
                    'card[exp_month]=12&'
                    'card[exp_year]=2016&'
                    'card[cvc]=123',
                    auth = ('sk_test_WtXpwiieEsemLlqrQeKK0qfI', ''))
  return r.json()['id']

def create_user(meta):
  user = User(meta, email)
  user.login()
  return user

def check_basic_quotas(user):
  assertNeq(user.me['quotas']['send_to_self']['quota'], None)
  assertNeq(user.me['quotas']['p2p']['limit'], None)

def check_plus_quotas(user):
  assertEq(user.me['quotas']['send_to_self']['quota'], None)
  assertEq(user.me['quotas']['p2p']['limit'], None)

def check_premium_quotas(user):
  assertEq(user.me['quotas']['send_to_self']['quota'], None)
  assertEq(user.me['quotas']['p2p']['limit'], None)

def update_plan(user, plan, stripe_token = None, stripe_coupon = None,
                previous_plan = 'basic', check_new_plan = True):
  assertEq(user.me['plan'], previous_plan)
  globals()['check_' + previous_plan + '_quotas'](user)
  res = user.put('users/%s' % user.id, {
    'plan': plan,
    'stripe_token': stripe_token,
    'stripe_coupon': stripe_coupon})
  if check_new_plan:
    assertEq(res['plan'], plan)
    assertEq(user.me['plan'], plan)
    globals()['check_' + plan + '_quotas'](user)
  return res

try:
  # Update from basic to premium.
  with Meta(stripe_api_key = stripe_key) as meta:
    user = create_user(meta)
    previous_quotas = user.me['quotas']
    res = update_plan(user, 'premium', stripe_token = _pay())
    assertEq(res['amount'], 999)
    quotas = user.me['quotas']
    assertGT(quotas['links']['quota'],
             previous_quotas['links']['quota'])

  # Update from basic to plus.
  with Meta(stripe_api_key = stripe_key) as meta:
    user = create_user(meta)
    res = update_plan(user, 'plus', stripe_token = _pay())
    assertEq(res['amount'], 699)

  # Update from basic to plus to premium.
  with Meta(stripe_api_key = stripe_key) as meta:
    user = create_user(meta)
    update_plan(user, 'plus', stripe_token = _pay())
    update_plan(user, 'premium', previous_plan = 'plus')

  # Update from basic to premium to basic.
  with Meta(stripe_api_key = stripe_key) as meta:
    user = create_user(meta)
    update_plan(user, 'premium', stripe_token = _pay())
    update_plan(user, 'basic', previous_plan = 'premium')
    # Make sure credentials has been cached.
    update_plan(user, 'premium', previous_plan = 'basic')

  # Update from basic to premium to plus.
  with Meta(stripe_api_key = stripe_key) as meta:
    user = create_user(meta)
    update_plan(user, 'premium', stripe_token = _pay())
    update_plan(user, 'plus', previous_plan = 'premium')

  # Getting premium (then getting eligible for plus by referral) then go back to
  # 'basic'.
  with Meta(stripe_api_key = stripe_key) as meta:
    user = create_user(meta)
    update_plan(user, 'premium', stripe_token = _pay())
    User(meta, 'user1@infinit.io', referral_code = user.referral_code).login()
    User(meta, 'user2@infinit.io', referral_code = user.referral_code).login()
    res = update_plan(user, 'basic', previous_plan = 'premium', check_new_plan = False)
    assertEq(res['plan'], 'plus')
    assertEq(user.me['plan'], 'plus')

  # Using coupons.
  with Meta(stripe_api_key = stripe_key) as meta:
    user = create_user(meta)
    res = update_plan(user, 'premium', stripe_token = _pay(),
                      stripe_coupon = 'coupon_30')
    assertEq(res['amount'], 999 * 0.70)

  # Using coupons on different plans.
  with Meta(stripe_api_key = stripe_key) as meta:
    user = create_user(meta)
    res = update_plan(user, 'plus', stripe_token = _pay(),
                      stripe_coupon = 'coupon_30')
    assertEq(res['amount'], 699 * 0.7)
    # No coupon.
    res = update_plan(user, 'premium', stripe_token = _pay(),
                      previous_plan = 'plus')
    # XXX: This should work. Right now, coupons aren't 'deleted' when changing
    # plans.
    # assertEq(res['amount'], 999)
    res = update_plan(user, 'premium', stripe_token = _pay(),
                      previous_plan = 'premium', stripe_coupon = 'coupon_50')
    assertEq(res['amount'], 999 * 0.5)

finally:
  clear()
