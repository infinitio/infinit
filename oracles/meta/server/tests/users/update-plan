#!/usr/bin/env python3

from utils import *
import bson
import random

with Stripe() as stripe:
  def check_basic_quotas(user):
    res = user.me
    assertEq(res['plan'], 'basic')
    assertNeq(res['quotas']['send_to_self']['quota'], None)
    assertNeq(res['quotas']['p2p']['limit'], None)

  def check_plus_quotas(user):
    res = user.me
    assertEq(res['plan'], 'plus')
    assertEq(res['quotas']['send_to_self']['quota'], None)
    assertEq(res['quotas']['p2p']['limit'], None)

  def check_premium_quotas(user):
    res = user.me
    assertEq(res['plan'], 'premium')
    assertEq(res['quotas']['send_to_self']['quota'], None)
    assertEq(res['quotas']['p2p']['limit'], None)

  # Recently created user has 'basic' plan by default.
  with Meta(stripe_api_key = Stripe.key) as meta:
    user = User(meta, 'jean_%s@infinit.io' % stripe.suffix())
    user.login()
    assertEq(user.me['plan'], 'basic')

  # Old user might have no plan.
  with Meta(stripe_api_key = Stripe.key) as meta:
    user = User(meta, 'jean_%s@infinit.io' % stripe.suffix())
    res = meta.database.users.update(
      {'_id': bson.ObjectId(user.id)},
      {'$set': {'plan': None}})
    assertEq(res['n'], 1)
    user.login()
    assertEq(user.me['plan'], 'basic')

  # Bad requests.
  with Meta(stripe_api_key = Stripe.key) as meta:
    user = User(meta, 'jean_%s@infinit.io' % stripe.suffix())
    user.login()
    throws(lambda: user.put('users/%s' % user.id, {'plan': 'Q'}), 404)
    throws(lambda: user.put('users/%s' % user.id, {'plan': 'premium'}), 400)

  # Update from basic to premium.
  with Meta(stripe_api_key = Stripe.key, force_admin = True) as meta:
    test_suffix = stripe.suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    previous_quotas = user.me['quotas']
    res = user.update_plan('premium', stripe_token = stripe.pay(user.email))
    assertEq(res['plan'], 'premium')
    assertEq(res['amount'], 999)
    quotas = user.me['quotas']
    assertGT(quotas['links']['quota'],
             previous_quotas['links']['quota'])
    check_premium_quotas(user)
    stripe.check_plan(user.email, 'premium', 999, check_next_invoice = True)

  # Bad requests.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    throws(lambda: user.update_plan(None, stripe_token = 'bite'), 400)

  # Add coupon to existing subscription.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    res = user.update_plan('premium', stripe_token = stripe.pay(user.email))
    assertEq(res['amount'], 999)
    stripe.check_plan(user.email, 'premium', 999, check_next_invoice = True)
    res = user.update_plan('premium', stripe_coupon = 'coupon_30')
    assertEq(res['amount'], 0.7 * 999)

    stripe.check_plan(user.email, 'premium', 999, percent_off = 30,
                      check_next_invoice = True)

  # Update from basic to plus.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    res = user.update_plan('plus', stripe_token = stripe.pay(user.email))
    assertEq(res['amount'], 699)
    check_plus_quotas(user)
    stripe.check_plan(user.email, 'plus', 699)

  # Update from basic to plus_year.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    res = user.update_plan('plus', stripe_token = stripe.pay(user.email),
            interval = 'year')
    assertEq(res['amount'], 9999)
    check_plus_quotas(user)
    stripe.check_plan(user.email, 'plus_year', 9999)

  # Update from basic to premium_year.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    res = user.update_plan('premium', stripe_token = stripe.pay(user.email),
            interval = 'year')
    assertEq(res['amount'], 19999)
    check_premium_quotas(user)
    stripe.check_plan(user.email, 'premium_year', 19999)

  # Update from basic to plus to premium.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    user.update_plan('plus', stripe_token = stripe.pay(user.email))
    check_plus_quotas(user)
    stripe.check_plan(user.email, 'plus', 699)
    user.update_plan('premium')
    check_premium_quotas(user)
    # Here, the user is charged 1299 during his next invoice...
    # That doesn't make any sense.
    stripe.check_plan(user.email, 'premium', 999, check_next_invoice = False)

  # Update from basic to premium to basic.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    res = user.update_plan('premium', stripe_token = stripe.pay(user.email))
    assertEq(res['plan'], 'premium')
    check_premium_quotas(user)
    stripe.check_plan(user.email, 'premium', 999)
    res = user.update_plan('basic')
    assertEq(res['plan'], 'basic')
    check_basic_quotas(user)
    stripe.check_plan(user.email, 'premium', 999, canceled = True)

  # Update from basic to premium to plus.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    user.update_plan('premium', stripe_token = stripe.pay(user.email))
    check_premium_quotas(user)
    stripe.check_plan(user.email, 'premium', 999)
    user.update_plan('plus')
    check_plus_quotas(user)
    stripe.check_plan(user.email, 'plus', 699, check_next_invoice = False)

  # Getting premium (then getting eligible for plus by referral) then go back to
  # 'basic'.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    user.update_plan('premium', stripe_token = stripe.pay(user.email))
    stripe.check_plan(user.email, 'premium', 999)
    check_premium_quotas(user)
    User(meta, 'user1@infinit.io', referral_code = user.referral_code).login()
    User(meta, 'user2@infinit.io', referral_code = user.referral_code).login()
    check_premium_quotas(user) # User is still premium as they're still paying.
    res = user.update_plan('basic')
    assertEq(res['plan'], 'plus')
    assertEq(user.me['plan'], 'plus')
    check_plus_quotas(user)
    stripe.check_plan(user.email, 'premium', canceled = True)

  # Using coupons.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    res = user.update_plan('premium',
                           stripe_token = stripe.pay(user.email),
                           stripe_coupon = 'coupon_30')
    assertEq(res['amount'], 999 * 0.70)
    check_premium_quotas(user)
    stripe.check_plan(user.email, 'premium', 999, percent_off = 30,
                      check_next_invoice = False)

  # Using coupons on different plans.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    res = user.update_plan('plus',
                           stripe_token = stripe.pay(user.email),
                           stripe_coupon = 'coupon_30')
    assertEq(res['amount'], 699 * 0.7)
    check_plus_quotas(user)
    stripe.check_plan(user.email, 'plus', 699, percent_off = 30)
    # No coupon.
    res = user.update_plan('premium')
    # XXX: This should work. Right now, coupons aren't 'deleted' when changing
    # plans.
    # assertEq(res['amount'], 999)
    # stripe.check_plan(user.email, 'premium', 999)
    check_premium_quotas(user)
    res = user.update_plan('premium', stripe_coupon = 'coupon_50')
    assertEq(res['amount'], 999 * 0.5)
    check_premium_quotas(user)
    stripe.check_plan(user.email, 'premium', 999, percent_off = 50,
                      check_next_invoice = False)

  # Delete user account.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    user.update_plan('premium', stripe_token = stripe.pay(user.email))
    check_premium_quotas(user)
    stripe.check_plan(user.email, 'premium', 999)
    user.delete('user')
    stripe.check_plan(user.email, 'premium', 999, canceled = True)

  # Create a coupon with 'repeating' for one month.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    coupon_id = 'coupon_%s' % test_suffix
    from stripe import Coupon
    Coupon.create(
      api_key = Stripe.key,
      percent_off = 90,
      duration='repeating',
      duration_in_months = 1,
      max_redemptions = 1,
      id=coupon_id)
    user = User(meta, 'coupon_%s@infinit.io' % test_suffix)
    user.login()
    p = user.update_plan('premium', stripe_token = stripe.pay(user.email),
                         stripe_coupon = coupon_id)
    check_premium_quotas(user)
    data = stripe.check_plan(user.email, 'premium', 999, percent_off = 90,
                             check_next_invoice = False)
    # It last one month, next invoice will be 999 again.
    from stripe import Invoice
    invoice = Invoice.upcoming(customer=stripe.customer_with_email(user.email))
    assertEq(invoice['amount_due'], 999)
    coupon = data[0]['discount']['coupon']
    assert coupon['max_redemptions'] == 1
    assert coupon['times_redeemed'] == 1
    user.delete('user')
    data = stripe.check_plan(user.email, 'premium', 999, percent_off = 90, canceled = True)
    coupon = data[0]['discount']['coupon']
    assert coupon['max_redemptions'] == 1
    assert coupon['times_redeemed'] == 1
    user2 = User(meta, 'coupon_2_%s@infinit.io' % test_suffix)
    user2.login()
    throws(lambda: user2.update_plan('premium', stripe_token = stripe.pay(user2.email),
                                     stripe_coupon = stripe.suffix()),
           403)

  # Create a coupon with 'once'.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    coupon_id = 'super_coupon_%s' % test_suffix
    from stripe import Coupon
    Coupon.create(
      api_key = Stripe.key,
      percent_off = 100,
      duration='once',
      max_redemptions = 1,
      id=coupon_id)
    user = User(meta, 'coupon_%s@infinit.io' % test_suffix)
    user.login()
    p = user.update_plan('premium', stripe_token = stripe.pay(user.email),
                         stripe_coupon = coupon_id)
    check_premium_quotas(user)
    invoices = user.invoices
    # Coupon is 100% (so user is not charged).
    assertEq(invoices['invoices'][0]['last_charge'], None)
    # Next charge should be next month.
    from stripe import Invoice
    invoice = Invoice.upcoming(customer = stripe.customer_with_email(user.email)['id'])
    assertEq(invoice['amount_due'], 999)
    import datetime
    next_charge = datetime.datetime.fromtimestamp(invoice['date'])
    now = datetime.datetime.utcnow()
    time_until_next_charge = next_charge - now
    assert time_until_next_charge.days > 27 and time_until_next_charge.days < 32

  # Invoices.
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    user = User(meta, 'jean_%s@infinit.io' % test_suffix)
    user.login()
    throws(lambda: user.invoices, 404)
    res = user.update_plan('premium', stripe_token = stripe.pay(user.email))
    invoices = user.invoices['invoices']
    assert len(invoices) == 1

  # Change email address.
  with Meta(stripe_api_key = Stripe.key) as meta:
    # Pasted from auxiliary_emails
    class MailService(NoOpMailer):

      def __init__(self):
        self.change_email = {}
        super().__init__(True)

      def template_message(self, template_message, message):
        merges = {}
        for entry in message['merge_vars'][0]['vars']:
          merges[entry['name']] = entry['content']
        if template_message == 'change-email-address':
           self.change_email.update(
             {
               merges['new_email_address']: merges['hash']
             })

    def get_keys(emails, size):
      assertEq(len(emails), size)
      keys = {}
      for email in emails:
        keys[email.variables['email']] = email.variables['confirm_token']
      return keys

    test_suffix = stripe.suffix()
    original_email = 'serge_jean_%s@infinit.io' % test_suffix
    jean = User(meta, original_email)
    jean.login()
    meta.mailer = MailService()
    jean.update_plan('premium', stripe_token = stripe.pay(jean.email))
    check_premium_quotas(jean)
    stripe.check_plan(jean.email, 'premium', 999, check_next_invoice = True)
    new_email = 'serge_jean_pierre_%s@infinit.io' % test_suffix
    jean.put('user/accounts/%s' % new_email)
    keys = get_keys(meta.emailer.emails, 1)
    jean.post(
      'users/%s/accounts/%s/confirm' % (jean.email, new_email),
      {'confirm_token': keys[new_email.lower()]})
    jean.get('users/%s' % new_email)
    jean.post('user/accounts/%s/make_primary' % new_email, {
      'password': jean.password
    })
    stripe.check_plan(new_email, 'premium', 999)
    # Add email address to stripe list for cleanup.
    stripe.emails.add(new_email)
    throws(lambda: stripe.customer_with_email(original_email), StripeTestException)
