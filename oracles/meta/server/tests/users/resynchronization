#!/usr/bin/env python3

from utils import HTTPException, Meta, User
from bson import ObjectId
from functools import reduce
import sys
from infinit.oracles.meta.server import transaction_status
from uuid import uuid4

with Meta() as meta:
  alice = User(meta, "alice@infinit.io")
  bob = User(meta, "bob@infinit.io")
  charles = User(meta, "charles@infinit.io")

  bob.login()

  transaction_ids = {alice.id: [], charles.id: []}
  for _ in range(10):
    transaction_ids[alice.id].append(bob.sendfile(recipient_id = alice.id)[1]['created_transaction_id'])
  for _ in range(10):
    transaction_ids[charles.id].append(bob.sendfile(recipient_id = charles.id)[1]['created_transaction_id'])

  trs = transaction_ids[alice.id] + transaction_ids[charles.id]

  for tr in trs:
    bob.post("transaction/update", {"transaction_id": tr, "status": transaction_status.INITIALIZED})

  res = bob.get('user/synchronize?init=0')

  assert len(res['running_transactions']) == 20
  assert len(res['final_transactions']) == 0
  res = bob.get('user/synchronize?init=0')
  assert len(res['running_transactions']) == 20
  assert len(res['final_transactions']) == 0
  res = bob.get('user/synchronize?init=1')
  assert len(res['running_transactions']) == 20
  assert len(res['final_transactions']) == 0

  for tr in trs:
    bob.post("transaction/update", {"transaction_id": tr, "status": transaction_status.CANCELED})

  res = bob.get('user/synchronize?init=0')
  assert len(res['running_transactions']) == 0
  assert len(res['final_transactions']) == 20

  res = bob.get('user/synchronize?init=0')
  assert len(res['running_transactions']) == 0
  assert len(res['final_transactions']) == 0

  # Create a link.
  file_list = [
    ['file1', 42],
    ['file2', 43],
    ['file3', 44],
  ]
  message = 'salut!'
  res = bob.post('link',
    {'files': file_list, 'name': 'some files.zip', 'message': message})
  assert res['aws_credentials']
  assert res['transaction']
  link = res['transaction']
  link = meta.database.links.find_one({'_id': ObjectId(link['id'])})

  res = bob.get('user/synchronize?init=1')
  assert len(res['links']) == 1
  res = bob.get('user/synchronize?init=0')
  assert len(res['links']) == 0

  res = bob.post('link/%s' % str(link['_id']),
                  {'progress': 1.0,
                   'status': transaction_status.FINISHED})

  res = bob.get('user/synchronize?init=0')
  assert len(res['links']) == 1

  res = bob.get('user/synchronize?init=0')
  assert len(res['links']) == 0

  res = bob.get('user/synchronize?init=1')
  assert len(res['links']) == 1

# Same device.
with Meta() as meta:
  device_id = uuid4()

  alice = User(meta, "alice@infinit.io")
  bob = User(meta, "bob@infinit.io")

  # Both share the same device.
  alice.device_id = device_id
  bob.device_id = device_id

  alice.login()
  bob.login()

  # Make sure the last sync his user & device specific.
  # By the way, this should never happen because infinit can't be run multiple
  # times with with the same infinit home.

  # Create a link.
  file_list = [
    ['file1', 42],
    ['file2', 43],
    ['file3', 44],
  ]
  message = 'salut!'
  res = bob.post('link',
    {'files': file_list, 'name': 'some files.zip', 'message': message})

  res = alice.get('user/synchronize?init=0')
  assert len(res['links']) == 0

  res = bob.get('user/synchronize?init=0')
  assert len(res['links']) == 1

  message = 'salut!'
  res = alice.post('link',
    {'files': file_list, 'name': 'some files.zip', 'message': message})

  res = alice.get('user/synchronize?init=0')
  assert len(res['links']) == 1

  res = bob.get('user/synchronize?init=0')
  assert len(res['links']) == 0
