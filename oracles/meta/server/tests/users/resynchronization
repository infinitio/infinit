#!/usr/bin/env python3

import datetime

from utils import *
from bson import ObjectId
from functools import reduce
import sys
from infinit.oracles.meta.server import transaction_status
from uuid import uuid4

with Meta() as meta:
  alice = User(meta, "alice@infinit.io")
  bob = User(meta, "bob@infinit.io")
  charles = User(meta, "charles@infinit.io")

  bob.login()

  transaction_ids = {alice.id: [], charles.id: []}
  for _ in range(10):
    transaction_ids[alice.id].append(bob.send(recipient = alice.id)[1]['created_transaction_id'])
  for _ in range(10):
    transaction_ids[charles.id].append(bob.send(recipient = charles.id)[1]['created_transaction_id'])

  trs = transaction_ids[alice.id] + transaction_ids[charles.id]

  res = bob.get('user/synchronize?init=0')

  assert len(res['running_transactions']) == 20
  assert len(res['final_transactions']) == 0
  res = bob.get('user/synchronize?init=0')
  assert len(res['running_transactions']) == 20
  assert len(res['final_transactions']) == 0
  res = bob.get('user/synchronize?init=1')
  assert len(res['running_transactions']) == 20
  assert len(res['final_transactions']) == 0

  meta.meta.forward(datetime.timedelta(seconds = 1))
  for tr in trs:
    bob.post("transaction/update", {"transaction_id": tr, "status": transaction_status.CANCELED})

  res = bob.get('user/synchronize?init=0')
  assert len(res['running_transactions']) == 0
  assert len(res['final_transactions']) == 20

  res = bob.get('user/synchronize?init=0')
  assert len(res['running_transactions']) == 0
  assert len(res['final_transactions']) == 0

  # Create a link.
  file_list = [
    ['file1', 42],
    ['file2', 43],
    ['file3', 44],
  ]
  message = 'salut!'
  res = bob.post('link',
    {'files': file_list, 'name': 'infinit_test_not_a_real_link', 'message': message})
  assert res['aws_credentials']
  assert res['transaction']
  link = res['transaction']
  link = meta.database.links.find_one({'_id': ObjectId(link['id'])})

  res = bob.get('user/synchronize?init=1')
  assert len(res['links']) == 1
  res = bob.get('user/synchronize?init=0')
  assert len(res['links']) == 0

  meta.meta.forward(datetime.timedelta(seconds = 1))
  res = bob.post('link/%s' % str(link['_id']),
                  {'progress': 1.0,
                   'status': transaction_status.FINISHED})

  res = bob.get('user/synchronize?init=0')
  assert len(res['links']) == 1

  res = bob.get('user/synchronize?init=0')
  assert len(res['links']) == 0

  res = bob.get('user/synchronize?init=1')
  assert len(res['links']) == 1

# Same device.
with Meta() as meta:
  device_id = uuid4()

  alice = User(meta, "alice@infinit.io")
  bob = User(meta, "bob@infinit.io")

  # Both share the same device.
  alice.device_id = device_id
  bob.device_id = device_id

  alice.login()
  bob.login()

  # Make sure the last sync his user & device specific.
  # By the way, this should never happen because infinit can't be run multiple
  # times with with the same infinit home.

  # Create a link.
  file_list = [
    ['file1', 42],
    ['file2', 43],
    ['file3', 44],
  ]
  message = 'salut!'
  meta.meta.forward(datetime.timedelta(seconds = 1))
  re2s = bob.post('link',
    {'files': file_list, 'name': 'some files.zip', 'message': message})

  res = alice.get('user/synchronize?init=0')
  assert len(res['links']) == 0

  res = bob.get('user/synchronize?init=0')
  assert len(res['links']) == 1

  message = 'salut!'
  meta.meta.forward(datetime.timedelta(seconds = 1))
  res = alice.post('link',
    {'files': file_list, 'name': 'some files.zip', 'message': message})

  res = alice.get('user/synchronize?init=0')
  assert len(res['links']) == 1

  res = bob.get('user/synchronize?init=0')
  assert len(res['links']) == 0

# Test referral actions in synchronize response
with Meta() as meta:

  def referral_actions(user, init = 0):
    return user.get('user/synchronize?init=%s' % init)['account']['referral_actions']

  def check_referral_actions(referral_actions,
                             has_avatar = False,
                             fb_posts = 0,
                             twitter_posts = 0,
                             referrals = 0):
    assertEq(len(referral_actions['referrals']), referrals)
    assertEq(referral_actions['has_avatar'], has_avatar)
    assertEq(referral_actions['facebook_posts'], fb_posts)
    assertEq(referral_actions['twitter_posts'], twitter_posts)

  bob = User(meta, 'bob@infinit.io')
  bob.login()
  res = referral_actions(bob, init = 1)
  check_referral_actions(res)
  alice_email = 'alice@infinit.io'
  # Invite a user.
  bob.sendfile(alice_email, initialize = True)
  res = referral_actions(bob)
  check_referral_actions(res, referrals = 1)
  assertEq(res['referrals'][0]['identifier'], alice_email)
  assertEq(res['referrals'][0]['status'], 'pending')
  assertEq(res['referrals'][0]['method'], 'ghost_invite')
  # User joins.
  alice = User(meta, alice_email)
  res = referral_actions(bob)
  assertEq(res['referrals'][0]['identifier'], alice_email)
  assertEq(res['referrals'][0]['status'], 'completed')
  assertEq(res['referrals'][0]['method'], 'ghost_invite')
  assertEq(res['referrals'][0]['has_logged_in'], False)
  # User is blocked.
  alice.login(device_id = bob.devices[0]['id'])
  res = referral_actions(bob)
  assertEq(res['referrals'][0]['identifier'], alice_email)
  assertEq(res['referrals'][0]['status'], 'blocked')
  assertEq(res['referrals'][0]['method'], 'ghost_invite')
  assertEq(res['referrals'][0]['has_logged_in'], True)
  # Unblock user.
  alice.logout()
  from uuid import uuid4
  alice.login(device_id = str(uuid4()))
  res = referral_actions(bob)
  assertEq(res['referrals'][0]['identifier'], alice_email)
  assertEq(res['referrals'][0]['status'], 'completed')
  assertEq(res['referrals'][0]['method'], 'ghost_invite')
  assertEq(res['referrals'][0]['has_logged_in'], True)
  # Perform social posts.
  bob.post('user/social_posts/%s' % 'facebook')
  res = referral_actions(bob)
  check_referral_actions(res, referrals = 1, fb_posts = 1)
  bob.post('user/social_posts/%s' % 'twitter')
  res = referral_actions(bob)
  check_referral_actions(res, referrals = 1, fb_posts = 1, twitter_posts = 1)

