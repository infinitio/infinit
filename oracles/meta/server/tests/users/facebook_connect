#!/usr/bin/env python3

from utils import *
import copy
from infinit.oracles.meta.server.facebook import FacebookGraph
from infinit.oracles.utils import api
from infinit.oracles.meta import error
from utils import Meta, HTTPException, Facebook
from bottle import route, run, template
from random import uniform
from uuid import uuid4
import random


############################################################
# Fake
############################################################
# Normal.
with Meta(enable_emails = False) as meta:
  with Trophonius(meta):
    meta.inner.facebook = Facebook()
    bob = User(meta, facebook = True, check_registration = True)
    id = int(uniform(1000000000000000, 1500000000000000))
    meta.inner.facebook.set_next_client_data({
      'id': id,
      'email': '%s@infinit.io' % id,
    })
    try:
      meta.get('users/facebook/%s' % id)
      assert False
    except HTTPException as e:
      assert e.status == 404

    for register in [True, False]:
      bob.facebook_connect("token", check_registration = register)
      facebook_id = bob.facebook_id
      meta.get('users/facebook/%s' % facebook_id)
      bob.logout()
      try:
        print(bob.me)
      except HTTPException as e:
        e.status == 403
      else:
        raise Exception("User still logged in")
      bob.facebook_connect("token")
      assert facebook_id == bob.facebook_id
      bob.me
      bob.logout()
    assert meta.database.users.count() == 1
    bob.facebook_connect("bite")
    bob.get('user/synchronize?init=0')

# Multiple users.
with Meta(enable_emails = False) as meta:
  with Trophonius(meta):
    meta.inner.facebook = Facebook()
    bob = User(meta, facebook = True, check_registration = True)
    meta.inner.facebook.set_next_client_data({
      'id': int(uniform(1000000000000000, 1500000000000000)),
      'email': 'boo@infinit.io',
    })
    bob.facebook_connect("token", check_registration = True)
    meta.inner.facebook.set_next_client_data({
      'id': int(uniform(1000000000000000, 1500000000000000)),
      'email': 'bar@infinit.io',
    })
    alice = User(meta, facebook = True, check_registration = True)
    alice.facebook_connect("fooooooo", check_registration = True)
    assert meta.database.users.count() == 2

# Connected on multiple devices.
with Meta(enable_emails = False) as meta:
  with Trophonius(meta):
    def give_a_different_access_token(meta):
      random.seed()
      meta.inner.facebook.set_next_client_data({
        'id': 31290390128409,
        'email': 'castor@infinit.io',
      })
    meta.inner.facebook = Facebook()
    bob = User(meta, facebook = True, check_registration = True)
    bob_device_0 = copy.deepcopy(bob)
    bob_device_0.device_id = str(uuid4())

    bob_device_1 = copy.deepcopy(bob)
    bob_device_1.device_id = str(uuid4())

    give_a_different_access_token(meta)
    bob_device_0.facebook_connect("TokenToken")
    give_a_different_access_token(meta)
    bob_device_1.facebook_connect("TokenToken")

    bob_device_1.get('user/synchronize?init=0')
    bob_device_0.get('user/synchronize?init=0')
    assert meta.database.sessions.count() == 2
    bob_device_0.logout()
    assert meta.database.sessions.count() == 1
    try:
      bob_device_0.me
      assert False
    except HTTPException as e:
      assert e.status == 403
    bob_device_1.me

    bob_web_0 = copy.deepcopy(bob)
    bob_web_0.device_id = None
    bob_web_1 = copy.deepcopy(bob)
    bob_web_1.device_id = None

    give_a_different_access_token(meta)
    bob_web_0.facebook_connect("TokenToken", check_registration = True)
    give_a_different_access_token(meta)
    bob_web_1.facebook_connect("TokenToken", check_registration = False)

    bob_web_0.me
    bob_web_1.me
    assert meta.database.sessions.count() == 3
    bob_web_1.logout()
    try:
      bob_web_1.me
      assert False
    except HTTPException as e:
      assert e.status == 403
    assert meta.database.sessions.count() == 2
    bob_web_0.logout()
    try:
      bob_web_0.me
      assert False
    except HTTPException as e:
      assert e.status == 403
    assert meta.database.sessions.count() == 1
    bob_device_1.logout()
    assert meta.database.sessions.count() == 0
    try:
      bob_device_1.me
      assert False
    except HTTPException as e:
      assert e.status == 403

# Send.
with Meta(enable_emails = True) as meta:
  with Trophonius(meta):
    meta.inner.facebook = Facebook()
    bob = User(meta, facebook = True, check_registration = True)
    meta.inner.facebook.set_next_client_data({
      'id': int(uniform(1000000000000000, 1500000000000000)),
      'email': 'serge@infinit.io',
    })
    bob.facebook_connect("bite")
    meta.inner.facebook.set_next_client_data({
      'id': int(uniform(1000000000000000, 1500000000000000)),
      'email': 'dimrok@infinit.io',
    })
    alice = User(meta, facebook = True, check_registration = True)
    alice.facebook_connect("foo", check_registration = True)
    bob.sendfile(alice.id, initialize = True)
    alice.logout()
    bob.sendfile(alice.id, initialize = True)
    alice.facebook_connect("foo", check_registration = False)
    assert len(alice.transactions) == 2

# Reverse send.
with Meta(enable_emails = True) as meta:
  with Trophonius(meta):
    meta.inner.facebook = Facebook()
    meta.inner.facebook.set_next_client_data({
      'id': int(uniform(1000000000000000, 1500000000000000)),
      'email': "dimrok@infinit.io",
      'access_token': "fooooooo",
    })
    bob = User(meta, facebook = True, check_registration = True)
    bob.facebook_connect("bite")
    meta.inner.facebook.set_next_client_data({
      'id': int(uniform(1000000000000000, 1500000000000000)),
      'email': "serge@infinit.io",
      'access_token': "fooooooo",
    })
    alice = User(meta, facebook = True, check_registration = True)
    alice.facebook_connect("foo")
    bob.sendfile(alice.id, initialize = True)
    alice.logout()
    bob.sendfile(alice.id, initialize = True)
    alice.facebook_connect("foo")
    assert len(alice.transactions) == 2

# Prefered email.
with Meta(enable_emails = True) as meta:
  with Trophonius(meta):
    meta.inner.facebook = Facebook()
    meta.inner.facebook.set_next_client_data({
      'id': int(uniform(1000000000000000, 1500000000000000)),
      'email': None,
    })
    bob = User(meta, facebook = True, check_registration = True)
    bob.facebook_connect("bite", preferred_email = "dimrok@infinit.io")
    meta.inner.facebook.set_next_client_data({
      'id': int(uniform(1000000000000000, 1500000000000000)),
      'email': "serge@infinit.io",
    })
    alice = User(meta, facebook = True, check_registration = True)
    alice.facebook_connect("foo")
    bob.sendfile(alice.id, initialize = True)
    alice.logout()
    bob.sendfile(alice.id, initialize = True)
    alice.facebook_connect("foo")
    assert len(alice.transactions) == 2


# Facebook connect on a ghost account.
with Meta(enable_emails = True) as meta:
  with Trophonius(meta):
    user = User(meta, 'alice@infinit.io')
    user.login()
    user.sendfile('bob@infinit.io', initialize = True)
    meta.inner.facebook = Facebook()
    meta.inner.facebook.set_next_client_data({
      'id': int(uniform(1000000000000000, 1500000000000000)),
      'email': 'bob@infinit.io'
    })
    bob = User(meta, facebook = True, check_registration = True,
               check_ghost_code = True)
    res = bob.facebook_connect("bite")
    assert res.get('ghost_code', None)
    assert len(bob.transactions) == 1

# Facebook connect on a ghost with prefered email.
with Meta(enable_emails = True) as meta:
  with Trophonius(meta):
    user = User(meta, 'alice@infinit.io')
    user.login()
    user.sendfile('bob@infinit.io', initialize = True)
    meta.inner.facebook = Facebook()
    meta.inner.facebook.set_next_client_data({
      'id': int(uniform(1000000000000000, 1500000000000000)),
      'email': 'serge@infinit.io'
    })
    bob = User(meta, facebook = True, check_registration = True)
    bob.facebook_connect("bite", preferred_email = 'bob@infinit.io')
    assert len(bob.transactions) == 1

# Non stripped preferred email.
with Meta(enable_emails = True) as meta:
  with Trophonius(meta):
    user = User(meta, 'alice@infinit.io')
    user.login()
    user.sendfile('bob@infinit.io', initialize = True)
    meta.inner.facebook = Facebook()
    meta.inner.facebook.set_next_client_data({
      'id': int(uniform(1000000000000000, 1500000000000000)),
      'email': 'serge@infinit.io'
    })
    bob = User(meta, facebook = True, check_registration = True)
    bob.facebook_connect("bite", preferred_email = '      bob@infinit.io')
    assert len(bob.transactions) == 1

for no_device in [True, False]:
  # No email.
  with Meta(enable_emails = True) as meta:
    with Trophonius(meta):
      meta.inner.facebook = Facebook()
      meta.inner.facebook.set_next_client_data({
        'id': int(uniform(1000000000000000, 1500000000000000)),
        'email': None,
      })
      bob = User(meta, facebook = True, check_registration = True)
      try:
        bob.facebook_connect("bite", no_device = no_device)
        assert False
      except HTTPException as e:
        assert e.status == 400

  # Main email taken.
  with Meta(enable_emails = True) as meta:
    with Trophonius(meta):
      email = 'foobar@infinit.io'
      user = User(meta, email)
      meta.inner.facebook = Facebook()
      meta.inner.facebook.set_next_client_data({
        'id': int(uniform(1000000000000000, 1500000000000000)),
        'email': email,
      })
      bob = User(meta, facebook = True, check_registration = True)
      try:
        bob.facebook_connect("bite", no_device = no_device)
        assert False
      except HTTPException as e:
        assert e.status == 403

  # Preferred email taken.
  with Meta(enable_emails = True) as meta:
    with Trophonius(meta):
      user = User(meta, 'alice@infinit.io')
      meta.inner.facebook = Facebook()
      meta.inner.facebook.set_next_client_data({
        'id': int(uniform(1000000000000000, 1500000000000000)),
        'email': 'foobar@infinit.io'
      })
      bob = User(meta, facebook = True, check_registration = True)
      try:
        bob.facebook_connect("bite", no_device = no_device, preferred_email = "alice@infinit.io")
        assert False
      except HTTPException as e:
        assert e.status == 403

  # Ill formed prefered email.
  with Meta(enable_emails = True) as meta:
    with Trophonius(meta):
      meta.inner.facebook = Facebook()
      meta.inner.facebook.set_next_client_data({
        'id': int(uniform(1000000000000000, 1500000000000000)),
        'email': 'serge@infinit.io'
      })
      bob = User(meta, facebook = True, check_registration = True)
      throws(lambda: bob.facebook_connect("bite", no_device = no_device, preferred_email = 'infinit.io'), 400)

  # No email.
  with Meta(enable_emails = True) as meta:
    with Trophonius(meta):
      meta.inner.facebook = Facebook()
      meta.inner.facebook.set_next_client_data({
        'id': int(uniform(1000000000000000, 1500000000000000)),
        'email': None,
      })
      bob = User(meta, facebook = True, check_registration = True)
      try:
        bob.facebook_connect("bite", no_device = no_device)
        assert False
      except HTTPException as e:
        assert e.status == 400


############################################################
# Real.
############################################################
# class Logger:
#   def __init__(self, level = 0):
#     self.__level = level
#   def info(self, text):
#     if self.__level >= 0:
#       print('ghost:', text)

#   def debug(self, text):
#     if self.__level >= 1:
#       print('ghost:', text)

# with Meta(enable_emails = True) as meta:
#   with Trophonius(meta):
#     from ghost import Ghost
#     ghost = Ghost()
#     ghost.logger = Logger()

#     # This 'spawns' the 'login to facebook' page.
#     page, extra_resources = ghost.open("https://www.facebook.com/dialog/oauth?client_id=1599363463620738&redirect_uri=https://www.facebook.com/connect/login_success.html&response_type=code&scope=email&display=popup")
#     assert page.http_status == 200
#     # Fill both email & password fields with a test user data.
#     ghost.evaluate(script = """document.getElementById('email').value = 'ymhdwea_wisemanstein_1423128027@tfbnw.net';""")
#     ghost.evaluate(script = """document.getElementById('pass').value = 'mdptmp01';""")
#     # Click the allow button.
#     ghost.click('input#u_0_1')
#     ghost.wait_for_page_loaded()
#     XXX: Understand why ghost.py get a 'user denied' even if you simulate the click on accept.
