#!/usr/bin/env python3

import papier

from bson.objectid import ObjectId
from infinit.oracles.meta.server.transaction_status import CANCELED
from utils import Meta, Trophonius, User

with Meta(force_admin = True) as meta, Trophonius(meta) as trophonius:

  def _favorite_and_swagger(user, other_user):
    res = user.post('user/favorite', {'user_id': other_user.id})
    assert res['success']
    assert other_user.id in user.favorites
    res = user.post('user/add_swagger',
                    {'user1': user.id, 'user2': other_user.id})
    assert res['success']
    assert user.id in other_user.swaggers
    assert other_user.id in user.swaggers

  u1 = User(meta, 'jeanlouis@infinit.io') # User to be deleted.
  u1.login()
  u2 = User(meta, 'pascal@infinit.io')
  u2.login()
  u3 = User(meta, 'another@infinit.io')
  u3.login()
  assert meta.database.sessions.count() == 3
  assert meta.database.devices.find({'owner': ObjectId(u1.id)}).count() == 1

  # Make a transaction.
  txn, res = u1.sendfile(recipient_id = u2.id)
  assert res['success']
  txn_id = res['created_transaction_id']

  # Favourite another user.
  res = u1.post('user/favorite', {'user_id': u2.id})
  assert res['success']

  # Become a swagger and favourite of two users.
  _favorite_and_swagger(u2, u1)
  _favorite_and_swagger(u2, u3)
  _favorite_and_swagger(u3, u1)
  assert len(u2.swaggers) == 2
  assert len(u2.favorites) == 2

  # Delete!
  u1.delete('user')

  try:
    u1.login()
    assert False # if we get here, we managed to login
  except:
    pass

  # Check user's session has been invalidated.
  assert meta.database.sessions.count() == 2

  # Check user's fields have been correctly cleared.
  deleted_user = meta.database.users.find_one(
    {'_id': ObjectId(u1.id)}
  )
  assert len(deleted_user['swaggers']) == 0
  assert len(deleted_user['favorites']) == 0
  assert len(deleted_user['devices']) == 0
  assert deleted_user['register_status'] == 'deleted'

  # Check user's device is not in devices collection.
  assert meta.database.devices.find({'owner': ObjectId(u1.id)}).count() == 0

  # Check other users have been cleaned.
  assert len(u2.favorites) == 1
  assert len(u2.swaggers) == 2
  assert len(u3.favorites) == 0
  assert len(u3.swaggers) == 2

  # Check transaction is cancelled.
  transaction = meta.database.transactions.find_one(
    {'_id': ObjectId(txn_id)},
  )
  assert transaction['status'] == CANCELED
