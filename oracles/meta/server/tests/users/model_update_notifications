#!/usr/bin/env python3

from utils import *

with Stripe() as stripe:
  # Referral via file invitation.
  with Meta() as meta, Trophonius(meta) as trophonius:
    plans = {plan['name']: plan for plan in meta.database.plans.find()}
    alice = User(meta, 'alice@infinit.io')
    alice.login(trophonius = trophonius)
    bob = User(meta, 'bob@infinit.io', referral_code = alice.referral_code)
    assertEq(len(alice.notifications), 0)
    bob.login()
    notif = alice.next_notification()
    assertEq(notif.type, 42)
    # Make sure it doesn't spam notification when referred login.
    del alice.notifications[:]
    bob.login()
    assertEq(len(alice.notifications), 0)

    quotas = notif['account']['quotas']
    assertGT(quotas['send_to_self']['quota'],
             plans['basic']['quotas']['send_to_self']['default_quota'])
    assertEq(quotas['send_to_self']['quota'],
             alice.synchronize()['account']['quotas']['send_to_self']['quota'])
    assertGT(quotas['links']['quota'],
             plans['basic']['quotas']['links']['default_storage'])
    assertEq(quotas['links']['quota'],
             alice.synchronize()['account']['quotas']['links']['quota'])
    User(meta, 'bob2@infinit.io', referral_code = alice.referral_code).login()
    notif = alice.next_notification()
    assertEq(notif.type, 42)
    assertEq(notif['account']['plan'], 'plus')

  # Update plan manually.
  def update_plan(plan_name):
    with Meta(stripe_api_key = Stripe.key) as meta, Trophonius(meta) as trophonius:
      test_suffix = stripe.suffix()
      plans = {plan['name']: plan for plan in meta.database.plans.find()}
      alice = User(meta, 'alice_%s@infinit.io' % test_suffix)
      alice.login(trophonius = trophonius)
      previous_links_quota = alice.me['quotas']['links']['quota']
      alice.update_plan(plan_name, stripe_token = stripe.pay(alice.email))
      notif = alice.next_notification()
      assertEq(notif.type, 42)
      assertEq(notif['account']['plan'], plan_name)
      assertEq(alice.synchronize()['account']['plan'], plan_name)
      if plan_name != 'basic':
        assertGT(notif['account']['quotas']['links']['quota'],
                 previous_links_quota)
        assertEq(notif['account']['quotas']['links']['quota'],
                 alice.synchronize()['account']['quotas']['links']['quota'])

  update_plan('plus')
  update_plan('premium')
  update_plan('basic')

  # Send to self.
  with Meta() as meta, Trophonius(meta) as trophonius:
    alice = User(meta, "alice@infinit.io")
    alice.login(trophonius = trophonius)
    size = 100000
    res, _ = alice.sendfile(recipient = alice.id, total_size = size,
                           initialize = True)
    del alice.notifications[:]
    alice.transaction_update(res['_id'], transaction_status.FINISHED)
    types = set([notif.type for notif in alice.notifications])
    assert 42 in types
    for notif in alice.notifications:
      if notif.type == 42:
        assertEq(notif['account']['quotas']['send_to_self']['used'], 1)

  # Links.
  with Meta() as meta, Trophonius(meta) as trophonius:
    alice = User(meta, "alice@infinit.io")
    alice.login(trophonius = trophonius)
    size = 100000
    link = alice.getalink(files = [('bite', size)])
    del alice.notifications[:]
    meta.database.links.update({'hash': link['hash']},
      {'$set': {'file_size': size, 'quota_counted': True}})
    for notif in alice.notifications:
      if notif.type == 42:
        # We send a fake notification (before size is
        assertEq(notif['account']['quotas']['links']['used'], size)
    del alice.notifications[:]
    meta.database.links.find_and_modify(
      {'hash': link['hash']},
      {'$set': {'file_size': size, 'quota_counted': True}}, new = True)
    alice.link_update(link, transaction_status.FINISHED)
    types = set([notif.type for notif in alice.notifications])
    assert 42 in types
    for notif in alice.notifications:
      if notif.type == 42:
        assertEq(notif['account']['quotas']['links']['used'], size)

  # Avatar.
  with Meta() as meta, Trophonius(meta) as trophonius:
    plans = {plan['name']: plan for plan in meta.database.plans.find()}
    alice = User(meta, "alice@infinit.io")
    alice.login(trophonius = trophonius)
    del alice.notifications[:]
    with open('%s/avatar.jpg' % os.path.dirname(__file__), 'rb') as f:
      alice.post('user/avatar', body = f.read())
    notif = alice.next_notification()
    assertEq(notif.type, 42)
    assertEq(notif['account']['quotas']['send_to_self']['bonus'],
             1)
    # We should get it once.
    assertEq(len(alice.notifications), 0)
    with open('%s/avatar.jpg' % os.path.dirname(__file__), 'rb') as f:
      alice.post('user/avatar', body = f.read())
    assertEq(len(alice.notifications), 0)

  # Social post
  with Meta() as meta, Trophonius(meta) as trophonius:
    plans = {plan['name']: plan for plan in meta.database.plans.find()}
    alice = User(meta, "alice@infinit.io")
    alice.login(trophonius = trophonius)
    i = 0
    for medium in ['facebook', 'twitter']:
      i = i + 1
      del alice.notifications[:]
      alice.post('user/social_posts/' + medium)
      notif = alice.next_notification()
      assertEq(notif.type, 42)
      assertEq(notif['account']['quotas']['send_to_self']['bonus'],
               plans['basic']['quotas']['send_to_self']['bonuses']['social_post'] * i)
