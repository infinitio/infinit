#!/usr/bin/env python3

from utils import *
import requests

with Stripe() as stripe:
  with Meta(stripe_api_key = Stripe.key) as meta:
    test_suffix = stripe.suffix()
    domain = 'links.gruntech.org'
    def check_link(works):
      def get():
        meta.get('links/%s?custom_domain=%s' % (link['hash'], domain))
      if works:
        get()
      else:
        throws(get, 402)
    def check_domains(expected):
      assertEq(user.get('user/account').get('custom_domains', []),
               expected)
    def action(action):
      return action('user/account/custom_domains/%s' % domain,
                    raw = True)
    user = User(meta, 'user_%s@infinit.io' % test_suffix)
    user.login()
    user.update_plan('premium', stripe_token = stripe.pay(user.email))
    link = user.getalink()
    # Read link
    meta.get('links/%s' % link['hash'])
    check_link(False)
    # Read domains
    check_domains([])
    # Put domain
    r = action(user.put)
    assertEq(r.status_code, 201)
    assertEq(r.json(), {'name': domain})
    check_domains([{'name': domain}])
    check_link(True)
    user.update_plan('basic', stripe_token = stripe.pay(user.email))
    check_link(False)
    user.update_plan('premium')
    # Put domain again
    r = action(user.put)
    assertEq(r.status_code, 200)
    assertEq(r.json(), {'name': domain})
    check_domains([{'name': domain}])
    # Delete domain
    r = action(user.delete)
    assertEq(r.status_code, 200)
    assertEq(r.json(), {'name': domain})
    check_domains([])
    check_link(False)
    # Delete domain again
    r = action(user.delete)
    assertEq(r.status_code, 404)
    check_domains([])
