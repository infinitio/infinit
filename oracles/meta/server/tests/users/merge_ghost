#!/usr/bin/env python3

from utils import *
from pprint import pprint

from bson.objectid import ObjectId
from infinit.oracles.meta import error
from infinit.oracles.meta.server.transaction_status import CANCELED

from infinit.oracles.notification import notifications
for name, value in notifications.items():
  globals()[name.upper()] = value

from infinit.oracles.meta.server.transaction_status import INITIALIZED, ACCEPTED, FINISHED, GHOST_UPLOADED

class MailService(NoOpMailer):

  def __init__(self):
    self.codes = {}
    super().__init__(True)

  def template_message(self, template_message, message):
    merges = {}
    for entry in message['merge_vars'][0]['vars']:
      merges[entry['name']] = entry['content']
    if template_message == 'send-file-url':
      self.codes.update(
        {
          merges['sendername']: merges['ghost_code']
        })

# Normal.
with Meta(enable_emails = True, shorten_ghost_profile_url = False) as meta:
  alice = User(meta, 'alice@infinit.io')
  alice.login()
  bob = User(meta, 'bob@infinit.io')
  # Spoiler: Eve is bob...
  eve = 'eve@infinit.io'
  alice.send(eve)
  bob.login()
  assertEq(bob.get('users/%s' % eve)['register_status'], 'ghost')
  bob.put('user/accounts/%s' % eve)
  emails = meta.emailer.emails
  assertEq(len(emails), 1)
  assertEq(emails[0].template, 'Confirm New Email Address')
  bob.post('users/%s/accounts/%s/confirm' % (bob.email, eve),
           {'confirm_token': emails[0].variables['confirm_token']})
  # Spoiler: Eve is bob...
  assertEq(bob.get('users/%s' % eve)['register_status'], 'ok')
  assertEq(bob.id, bob.get('users/%s' % eve)['id'])
  assertEq(len(bob.swaggers), 1)
  assertEq(bob.swaggers[0], alice.id)

# Try to merge an existing user.
with Meta(enable_emails = True) as meta:
  alice = User(meta, 'alice@infinit.io')
  alice.login()
  bob = User(meta, 'bob@infinit.io')
  try:
    bob.post('user/accounts/email/add', {'email': alice.email})
    assert False
  except HTTPException:
    pass

  try:
    bob.post('user/accounts/email/add', {'email': bob.email})
    assert False
  except HTTPException:
    pass

  eve = 'eve@infinit.io'
  alice.send(eve)
  bob.login()
  bob.put('user/accounts/%s' % eve)
  # But eve registers...
  eve = User(meta, eve)
  throws(lambda:
         bob.post(
           'users/%s/accounts/%s/confirm' % (bob.id, eve.email),
           {'confirm_token': eve.email_confirmation_token}),
         HTTPException)

# Notifications.
with Meta(enable_emails = True) as meta:
  with Trophonius(meta) as trophonius:
    alice = User(meta, 'alice@infinit.io')
    alice.login(trophonius = trophonius)
    bob = User(meta, 'bob@infinit.io')
    bob.login(trophonius = trophonius)

    trophonius.connect_user(alice)
    trophonius.connect_user(bob)

    email = 'navet@infinit.io'
    alice.send(email)

    # New swagger notification.
    assertEq(alice.next_notification().type, NEW_SWAGGER)
    # Referral actions notification.
    assertEq(alice.next_notification().type, MODEL_UPDATE)

    meta.mailer = MailService()
    bob.put('user/accounts/%s' % email)
    emails = meta.emailer.emails
    assertEq(len(emails), 1)
    assertEq(emails[0].template, 'Confirm New Email Address')
    bob.post('users/%s/accounts/%s/confirm' % (bob.email, email),
             {'confirm_token': emails[0].variables['confirm_token']})

    trophonius.poll()
    assertEq(len(bob.notifications), 3)
    assertEq(bob.next_notification().type, PEER_TRANSACTION)
    assertEq(bob.next_notification().type, MODEL_UPDATE)
    assertEq(bob.next_notification().type, NEW_SWAGGER)

    # Ghost is now bob.
    assertEq(len(alice.notifications), 4)
    assertEq(alice.next_notification().type, PEER_TRANSACTION)
    assertEq(alice.next_notification().type, MODEL_UPDATE)
    assertEq(alice.next_notification().type, DELETED_SWAGGER)
    assertEq(alice.next_notification().type, NEW_SWAGGER)

    email = 'poireau@infinit.io'
    tr, _ = alice.send(email)
    # Ghost is a new swagger.
    assertEq(alice.next_notification().type, NEW_SWAGGER)
    # Referral actions notification.
    assertEq(alice.next_notification().type, MODEL_UPDATE)
    assertEq(bob.notifications, [])
    assertEq(len(bob.transactions), 1)
    meta.mailer = MailService()
    bob.put('user/accounts/%s' % email)
    emails = meta.emailer.emails
    assertEq(len(emails), 1)
    assertEq(emails[0].template, 'Confirm New Email Address')
    bob.post('users/%s/accounts/%s/confirm' % (bob.email, email),
             {'confirm_token': emails[0].variables['confirm_token']})
    assertEq(len(bob.transactions), 2)

# Check code.
with Meta(enable_emails = True) as meta:
  alice = User(meta, 'alice@infinit.io')
  alice.login()
  bob = User(meta, 'bob@infinit.io')
  eve = 'eve@infinit.io'
  meta.mailer = MailService()
  tr, _ = alice.send(eve)
  alice.transaction_update(tr['_id'], GHOST_UPLOADED)
  bob.login()
  assertEq(bob.get('users/%s' % eve)['register_status'], 'ghost')
  eve_id = bob.get('users/%s' % eve)['id']
  emails = meta.emailer.template('Transfer (Initial)')
  code = emails[0].variables['ghost_code']
  assertIn('expiration_day', emails[0].variables)
  throws(lambda: meta.get('ghost/code/00000'), 404)
  bob.post('ghost/%s/merge' % code)
  throws(lambda: meta.get('ghost/code/%s' % code), 404)

# Using code.
with Meta(enable_emails = True) as meta:
  alice = User(meta, 'alice@infinit.io')
  alice.login()
  luc = User(meta, 'luc@infinit.io')
  luc.login()
  bob = User(meta, 'bob@infinit.io')
  # Spoiler: Eve is bob...
  eve = 'eve@infinit.io'
  meta.mailer = MailService()
  tr, _ = alice.send(eve)
  alice.transaction_update(tr['_id'], GHOST_UPLOADED)
  tr, _ = luc.send(eve)
  luc.transaction_update(tr['_id'], GHOST_UPLOADED)
  bob.login()
  assertEq(bob.get('users/%s' % eve)['register_status'], 'ghost')
  eve_id = bob.get('users/%s' % eve)['id']
  emails = meta.emailer.template('Transfer (Initial)')
  codes = {}
  for email in emails:
    assertEq(email.template, 'Transfer (Initial)')
    codes[email.variables['sender']['fullname']] = \
      email.variables['ghost_code']
  assertEq(len(codes), 2)
  assertEq(codes[alice.fullname], codes[luc.fullname])
  code = codes[alice.fullname]
  assertEq(len(bob.transactions), 0)
  bob.post('ghost/%s/merge' % code, {})
  assertEq(bob.get('users/%s' % eve_id)['register_status'], 'merged')
  bob.synchronize(init = True)
  assertEq(len(bob.transactions), 2)
  assertEq(len(bob.swaggers), 2)
  try:
    bob.post('user/merge/%s' % code, {})
  except HTTPException as e:
    pass
