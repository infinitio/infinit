#!/usr/bin/env python3

import datetime

from utils import *
from infinit.oracles.meta import error

unconfirmed_email_leeway = 100

with Meta(enable_emails = True,
          unconfirmed_email_leeway = unconfirmed_email_leeway) as meta:
  email = 'foobar@infinit.io'
  fullname = 'jean louis'
  u = User(meta,
           email = email,
           fullname = fullname)

  # To make sure the system is not too fast (less than one sec), sleep.
  from time import sleep
  sleep(1)
  res = u.login()
  assert res['success']

# Normal process.
with Meta(enable_emails = True, unconfirmed_email_leeway = 0) as meta:
  email = 'foobar@infinit.io'
  fullname = 'jean louis'

  u = User(meta,
           email = email,
           fullname = fullname)
  # The unconfirmed email leeway is 0 so login without confirming email
  # should result to a EMAIL_NOT_CONFIRMED error.
  try:
    u.post('login', u.login_parameters)
  except HTTPException as e:
    assert e.status == 403
    assert e.content['code'] == error.EMAIL_NOT_CONFIRMED[0]
  else:
    raise Exception('invalid login should have yield 403 forbidden')

  res = u.post('users/%s/confirm-email' % u.email,
               {'confirm_token': u.email_confirmation_token})
  res = u.post('users/%s/confirm-email' % u.email,
               {'confirm_token': u.email_confirmation_token})
  u.login()

# Reask hash.
with Meta(
    enable_emails = True,
    unconfirmed_email_leeway = 0) as meta:
  email = 'foobar@infinit.io'
  fullname = 'jean louis'

  u = User(meta,
           email = email,
           fullname = fullname)
  # The unconfirmed email leeway is 0 so login without confirming email
  # should result to a EMAIL_NOT_CONFIRMED error.
  try:
    u.post('login', u.login_parameters)
  except HTTPException as e:
    assert e.status == 403
    assert e.content['code'] == error.EMAIL_NOT_CONFIRMED[0]
  else:
    raise Exception('invalid login should have yield 403 forbidden')
  assertEq(len(meta.emailer.emails), 1)
  res = u.post('users/%s/resend-confirmation-email' % u.email)
  emails = meta.emailer.emails
  assertEq(len(emails), 1)

  res = u.post('users/%s/resend-confirmation-email' % u.email)
  emails = meta.emailer.emails
  assertEq(len(emails), 1)

  client = Client(meta)
  res = client.post(
    'users/%s/confirm-email' % u.email,
    {'confirm_token': emails[0].variables['confirm_token']})
  # Check confirming email logs in
  assertEq(client.get('user/self')['email'], email)
  try:
    u.post('users/%s/resend-confirmation-email' % u.email)
  except HTTPException as e:
    assert e.status == 404
  else:
    raise Exception('invalid username didn\'t err')

  u.login()
