#!/usr/bin/env python3

import datetime
import utils

from utils import Meta, User, NoOpMailer
from infinit.oracles.meta import error

unconfirmed_email_leeway = 100

class MailService(NoOpMailer):

  def __init__(self):
    super().__init__(True)

  def template_message(self, template_message, message):
    merges = {}
    for entry in message['merge_vars'][0]['vars']:
      merges[entry['name']] = entry['content']
    if template_message == 'confirm-sign-up':
      self.email_confirmation_hash = merges['hash']
    elif template_message == 'reconfirm-sign-up':
      self.email_reconfirmation_hash = merges['hash']
    elif template_message == 'lost-password':
      self.reset_password_hash = merges['reset_password_hash']
    NoOpMailer.template_message(self, template_message, message)

with Meta(enable_emails = True,
          unconfirmed_email_leeway = unconfirmed_email_leeway) as meta:
  email = 'foobar@infinit.io'
  fullname = 'jean louis'
  u = User(meta,
           email = email,
           fullname = fullname)
  assert meta.mailer.sent

  # To make sure the system is not too fast (less than one sec), sleep.
  from time import sleep
  sleep(1)
  res = u.login()
  assert res['unconfirmed_email_leeway'] < unconfirmed_email_leeway
  assert res['unconfirmed_email_leeway'] > 0

# Normal process.
with Meta(enable_emails = True, unconfirmed_email_leeway = 0) as meta:
  email = 'foobar@infinit.io'
  fullname = 'jean louis'
  meta.mailer = MailService()

  u = User(meta,
           email = email,
           fullname = fullname)
  assert meta.mailer.sent
  assert hasattr(meta.mailer, 'email_confirmation_hash')
  # The unconfirmed email leeway is 0 so login without confirming email
  # should result to a EMAIL_NOT_CONFIRMED error.
  try:
    u.post('login', u.login_paremeters)
  except utils.HTTPException as e:
    assert e.status == 403
    assert e.content['code'] == error.EMAIL_NOT_CONFIRMED[0]
  else:
    raise Exception('invalid login should have yield 403 forbidden')

  res = u.post('user/confirm_email/%s' % meta.mailer.email_confirmation_hash)
  assert res['success']

  res = u.post('user/confirm_email/%s' % meta.mailer.email_confirmation_hash)
  assert res['success'] == False
  assert res['error_code'] == error.OPERATION_NOT_PERMITTED[0]

  u.login()

# Reask hash.
with Meta(
    enable_emails = True,
    unconfirmed_email_leeway = 0,
    email_confirmation_cooldown = datetime.timedelta(seconds = 1)) \
as meta:
  email = 'foobar@infinit.io'
  fullname = 'jean louis'
  meta.mailer = MailService()

  u = User(meta,
           email = email,
           fullname = fullname)
  assert meta.mailer.sent
  assert hasattr(meta.mailer, 'email_confirmation_hash')
  # The unconfirmed email leeway is 0 so login without confirming email
  # should result to a EMAIL_NOT_CONFIRMED error.
  try:
    u.post('login', u.login_paremeters)
  except utils.HTTPException as e:
    assert e.status == 403
    assert e.content['code'] == error.EMAIL_NOT_CONFIRMED[0]
  else:
    raise Exception('invalid login should have yield 403 forbidden')

  res = u.post('user/resend_confirmation_email/%s' % u.email)
  assert res['success']
  assert hasattr(meta.mailer, 'email_reconfirmation_hash')

  meta.mailer = MailService()
  # Cooldown.
  res = u.post('user/resend_confirmation_email/%s' % u.email)
  assert res['success']
  assert not hasattr(meta.mailer, 'email_reconfirmation_hash')

  from time import sleep
  sleep(2)

  res = u.post('user/resend_confirmation_email/%s' % u.email)
  assert res['success']
  assert hasattr(meta.mailer, 'email_reconfirmation_hash')

  res = u.post('user/confirm_email/%s' % str(meta.mailer.email_reconfirmation_hash))
  assert res['success']

  res = u.post('user/resend_confirmation_email/%s' % u.email)
  assert res['success'] == False
  assert res['error_code'] == error.EMAIL_ALREADY_CONFIRMED[0]

  u.login()

# Confirm by reseting password.
with Meta(enable_emails = True, unconfirmed_email_leeway = 0) as meta:
  email = 'foobar@infinit.io'
  fullname = 'jean louis'
  meta.mailer = MailService()

  u = User(meta,
           email = email,
           fullname = fullname)
  assert meta.mailer.sent
  assert hasattr(meta.mailer, 'email_confirmation_hash')
