#!/usr/bin/env python3

from utils import Meta, User, throws
import infinit.oracles.meta.server.transaction_status as transaction_status

import bson

with Meta() as meta:
  alice = User(meta, 'alice@infinit.io')
  alice.login()
  alice.put('user/contacts',
    {'contacts': [{'emails':['bob@infinit.io']}]})
  assert alice.swaggers == []
  bob = User(meta, 'bob@infinit.io')
  assert [str(bob.id)] == alice.swaggers
  alice.put('user/contacts',
    {'contacts': [{'emails':['bob@infinit.io']}]})
  assert [str(bob.id)] == alice.swaggers

  conrad = User(meta, 'conrad@infinit.io')
  conrad.login()
  conrad.put('user/contacts',
    {'contacts': [{'emails':['bob@infinit.io']}]})
  assert [str(bob.id)] == conrad.swaggers

  # Test contact-ing a ghost
  bob.login()
  transaction, res = bob.sendfile(recipient = 'daniel@infinit.io', use_identifier = False)
  assert res['success']
  conrad.put('user/contacts',
    {'contacts': [{'emails':['daniel@infinit.io']}]})
  assert [str(bob.id)] == conrad.swaggers
  daniel = User(meta, 'daniel@infinit.io')
  assert sorted([str(bob.id), str(daniel.id)]) == sorted(conrad.swaggers)

# Check contact interaction with merge-account
with Meta() as meta:
  alice = User(meta, 'alice@infinit.io')
  alice.login()
  alice.put('user/contacts' ,
    {'contacts': [{'emails':['marc@infinit.io']}]})
  alice2 = User(meta, 'alice2@infinit.io')
  alice2.login()
  alice2.put('user/contacts',
    {'contacts': [{'emails':['marc@infinit.io']}]})
  bob = User(meta, 'bob@infinit.io')
  bob.login()
  carl = User(meta, 'carl@infinit.io')
  carl.login()

  transaction, res = bob.sendfile(recipient = 'marc@infinit.io', use_identifier = False)
  #Cheat to get the ghost code
  marc_data = meta.database.users.find_one({'accounts.id': 'marc@infinit.io'})
  code = marc_data['ghost_code']
  carl.post('ghost/%s/merge' % (code)) # carl is marc!
  assert [str(carl.id)] == alice.swaggers
  assert [str(carl.id)] == alice2.swaggers


# check multiple
with Meta() as meta:
  alice = User(meta, 'alice@infinit.io')
  alice.login(country_code = 'FR')
  alice.put('user/contacts',
    {'contacts': [{'emails': ['marc@wanadoo.fr']}]})
  bob = User(meta, 'bob@infinit.io')
  bob.login(country_code = 'FR')
  bob.put('user/contacts',
    {'contacts': [{'emails': ['marc@wanadoo.fr']}]})
  carl = User(meta, 'carl@infinit.io')
  carl.login()
  carl.put('user/contacts',
    {'contacts': [{'emails':['marc@infinit.io']}]})
  marc = User(meta, 'marc@infinit.io')
  transaction, res = bob.sendfile(recipient = 'marc@wanadoo.fr', use_identifier = False)

  marc_data = meta.database.users.find_one({'accounts.id': 'marc@wanadoo.fr'})
  code = marc_data['ghost_code']
  marc.login()
  marc.post('ghost/%s/merge' % (code))
  #db = meta.database.users.find({}, fields={'identity':0, 'public_key': 0, 'devices':0})
  #db = list(db)
  #db = '\n\n'.join(map(str, db))
  #print(db)
  assert [str(marc.id)] == alice.swaggers
  assert [str(marc.id)] == bob.swaggers
  assert [str(marc.id)] == carl.swaggers

# Check no country code
with Meta() as meta:
  alice = User(meta, 'alice@infinit.io')
  alice.login()
  alice.put('user/contacts',
    {'contacts': [{'phones': ['0122334455', '33199887766','+48123456789']}]})

# Check random nastynesses in address book
with Meta() as meta:
  alice = User(meta, 'alice@infinit.io')
  alice.login(country_code = 'FR')
  alice.put('user/contacts',
    {'contacts':
        [{'phones': [x]} for x in ['', '4', 'ET telephone maison', '012345', '0122334455','0122334455']]
        + [{'phones': ['0133445566', '0133445566']}]
        + [{'emails': [x]} for x in ['marc2@infinit.io', 'bob', '12', 'bob@bob.com', 'bob@bob.com']]
        + [{'emails': ['john@doe.com', 'john@doe.com']}]
        + [{'emails': ['tango@tango.com'], 'phones': ['01234567']}]
    })
  bob = User(meta, 'bob@bob.com')
  bob.login(country_code = 'FR')
  #print('-----')
  #d = meta.database.users.find({}, ['accounts', 'register_status', 'phone_numbers'])
  #for e in d:
  #  del e['_id']
  #  print(e)
  #print('+++++')
  assert [str(bob.id)] == alice.swaggers
  john = User(meta, 'john@doe.com')
  john.login()
  assert str(john.id) in alice.swaggers
  marc = User(meta, 'marc@infinit.io')
  transaction, res = bob.sendfile(recipient = 'marc2@infinit.io', use_identifier = False)

  marc_data = meta.database.users.find_one({'accounts.id': 'marc2@infinit.io'})
  code = marc_data['ghost_code']
  marc.login()
  marc.post('ghost/%s/merge' % (code))
  assert str(marc.id) in alice.swaggers

# Check contacts and alternate email registration
with Meta() as meta:
  alice = User(meta, 'alice@infinit.io')
  alice.login(country_code = 'FR')
  bob = User(meta, 'bob@bob.com')
  bob.login(country_code = 'FR')
  email = 'marc@wanadoo.fr'
  alice.put('user/contacts',
    {'contacts': [{'emails': [email]}]})
  bob.put('user/accounts/%s' % email)
  token = meta.emailer.emails[0].variables['confirm_token']
  bob.post(
    'users/%s/accounts/%s/confirm' % (bob.email, email),
    {'confirm_token': token})
