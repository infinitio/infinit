#!/usr/bin/env python3

from utils import *
from utils import throws
from pprint import pprint

from bson.objectid import ObjectId
from infinit.oracles.meta import error
from infinit.oracles.meta.server.transaction_status import CANCELED

from infinit.oracles.notification import notifications
for name, value in notifications.items():
  globals()[name.upper()] = value

from infinit.oracles.meta.server.transaction_status import INITIALIZED, ACCEPTED, FINISHED, GHOST_UPLOADED

import requests
from urllib.parse import urlparse, parse_qs

def clear_url(url, _type = None):
  url = url.replace('https://www.infinit.io/invitation', 'ghost')
  assert '&code=' in url
  parsed_url = urlparse(url)
  query = parse_qs(parsed_url.query)
  query = {k: query[k][0] for k in query.keys()}
  if _type is not None:
    print(query['utm_source'], _type)
    assert query['utm_source'] == _type
  url = parsed_url.path + '?key=%s' % query['key']
  return url

def check_merge(meta, db_recipient, ghost_profile, _type = None):
  ghost = meta.database.users.find_one({"register_status": "ghost"})
  assert ghost['ghost_code'] == db_recipient['ghost_code']
  url = 'ghost/%s' % ghost['_id']
  # Check the ghost profile 'page'.
  url = clear_url(ghost_profile, _type = _type)
  res = meta.get(url)
  transactions = res['transactions']
  assert len(transactions) == 3
  recipients = set([transaction['recipient_id'] for transaction in transactions])
  assert len(recipients) == 1
  id = recipients.pop()
  assert id == str(ghost['_id'])

  # Merge ghost into eve.
  eve = User(meta, 'eve@infinit.io')
  eve.login()
  eve.post('ghost/%s/merge' % ghost['ghost_code'])

  # Check transactions.
  assert len(eve.transactions) == 3

  # Check if the page is gone.
  url = clear_url(ghost_profile)
  try:
    res = meta.get(url)
    assert False
  except HTTPException as e:
    assert e.status == 410

  try:
    eve.post('ghost/%s/merge' % ghost['ghost_code'])
    assert False
  except HTTPException as e:
    assert e.status == 410

# Ghost code in emails.
with Meta(enable_emails = True,
          shorten_ghost_profile_url = False) as meta:
  with Trophonius(meta) as trophonius:
    alice = User(meta, 'alice@infinit.io')
    alice.login(trophonius = trophonius)
    bob = User(meta, 'bob@infinit.io')
    bob.login(trophonius = trophonius)

    trophonius.connect_user(alice)
    trophonius.connect_user(bob)

    email = 'navet@infinit.io'
    # Check if the recipient always have the same ghost code & id.
    _, res0 = alice.sendfile(email, initialize = True)
    _, res1 = bob.sendfile(email, initialize = True)
    _, res2 = bob.sendfile(bob.swaggers[0], initialize = True)

    assert 'ghost_profile' not in res0['recipient']
    assert 'ghost_profile' not in res1['recipient']
    assert 'ghost_profile' not in res2['recipient']

    recipient = res0['recipient']
    t0 = res0['created_transaction_id']
    t1 = res1['created_transaction_id']
    t2 = res2['created_transaction_id']
    alice.transaction_update(t0, GHOST_UPLOADED)
    bob.transaction_update(t1, GHOST_UPLOADED)
    bob.transaction_update(t2, GHOST_UPLOADED)

    db_recipient = meta.database.users.find_one({"_id": ObjectId(bob.swaggers[0])})
    # Check if the 3 emails have been delivered and contain ghost_code and url.
    emails = meta.emailer.emails
    assertEq(len(emails), 3)
    ghost_profile = None
    for email in emails:
      assertEq(email.template, 'ghost-invitation')
      assertEq(email.variables['ghost_code'],
               db_recipient['ghost_code'])
      if ghost_profile is None:
        ghost_profile = email.variables['ghost_profile']
      else:
        assertEq(email.variables['ghost_profile'], ghost_profile)
    check_merge(meta, db_recipient, ghost_profile, 'email')

# With phone numbers.
# Ghost code in emails.
with Meta(enable_emails = True,
          shorten_ghost_profile_url = False) as meta:
  with Trophonius(meta) as trophonius:
    alice = User(meta, 'alice@infinit.io')
    alice.login(trophonius = trophonius)
    bob = User(meta, 'bob@infinit.io')
    bob.login(trophonius = trophonius)

    trophonius.connect_user(alice)
    trophonius.connect_user(bob)

    phone = "+336400000"
    # Check if the recipient always have the same ghost code & id.
    _, res0 = alice.sendfile(phone, initialize = True)
    _, res1 = bob.sendfile(phone, initialize = True)
    _, res2 = bob.sendfile(bob.swaggers[0], initialize = True)

    assert 'ghost_profile' in res0['recipient']
    assert 'ghost_profile' in res1['recipient']
    assert 'ghost_profile' in res2['recipient']

    recipient = res0['recipient']
    t0 = res0['created_transaction_id']
    t1 = res1['created_transaction_id']
    t2 = res2['created_transaction_id']
    alice.transaction_update(t0, GHOST_UPLOADED)
    bob.transaction_update(t1, GHOST_UPLOADED)
    bob.transaction_update(t2, GHOST_UPLOADED)

    db_recipient = meta.database.users.find_one({"_id": ObjectId(bob.swaggers[0])})
    assertEq(len(meta.emailer.emails), 0)
    ghost_profile = recipient['ghost_profile']
    check_merge(meta, db_recipient, ghost_profile, 'phone')

# Automaticaly consume ghost codes.
with Meta(enable_emails = True) as meta:
  alice_email = "alice@infinit.io"
  bob = User(meta, "bob@infinit.io")
  bob.login()
  transaction, res = bob.sendfile(recipient = alice_email, initialize = True)
  bob.transaction_update(res['created_transaction_id'], GHOST_UPLOADED)
  emails = meta.emailer.emails
  assertEq(len(emails), 1)
  ghost_code = emails[0].variables['ghost_code']
  alice = User(meta, alice_email)
  alice.login()
  assert len(alice.transactions) == 1
  try:
    alice.post('ghost/%s/merge' % ghost_code)
    assert False
  except HTTPException as e:
    assert e.status == 410

# Consume ghost code and Consumed ghost codes.
with Meta(enable_emails = True) as meta:
  alice_email = "alice@infinit.io"
  bob = User(meta, "bob@infinit.io")
  bob.login()
  transaction, res = bob.sendfile(recipient = alice_email, initialize = True)
  bob.transaction_update(res['created_transaction_id'], GHOST_UPLOADED)
  assert 'ghost_code' not in res['recipient']
  emails = meta.emailer.emails
  assertEq(len(emails), 1)
  assertEq(emails[0].template, 'ghost-invitation')
  ghost_code = emails[0].variables['ghost_code']
  eve = User(meta, "eve@infinit.io")
  eve.login()
  assert len(eve.transactions) == 0
  eve.post('ghost/%s/merge' % ghost_code)
  # Second time should do nothing.
  try:
    eve.post('ghost/%s/merge' % ghost_code)
    assert False
  except HTTPException as e:
    assert e.status == 410
  dimrok = User(meta, 'dimrok@infinit.io')
  dimrok.login()
  try:
    # Other people should get a 404.
    dimrok.post('ghost/%s/merge' % ghost_code)
    assert False
  except HTTPException as e:
    assert e.status == 404

# Old ghost without ghost_code.
with Meta(enable_emails = True) as meta:
  alice_email = "alice@infinit.io"
  bob = User(meta, "bob@infinit.io")
  bob.login()
  transaction, res = bob.sendfile(recipient = alice_email, initialize = True)
  bob.transaction_update(res['created_transaction_id'], GHOST_UPLOADED)
  assert 'ghost_code' not in res['recipient']
  meta.database.users.find_and_modify(
    {
      'register_status': 'ghost'
    },
    {
      '$unset': {
        'ghost_code': 1,
        'shorten_ghost_profile_url': 1
      }
    })
  emails = meta.emailer.emails
  assertEq(len(emails), 1)
  # Email are consummed when the getter is called.
  assertEq(len(meta.emailer.emails), 0)
  assertEq(emails[0].template, 'ghost-invitation')
  assert 'ghost_code' in emails[0].variables
  assert 'ghost_profile' in emails[0].variables
  transaction, res = bob.sendfile(recipient = alice_email, initialize = True)
  bob.transaction_update(res['created_transaction_id'], GHOST_UPLOADED)
  assert 'ghost_code' not in res['recipient']
  emails = meta.emailer.emails
  assertEq(len(emails), 1)
  assertEq(emails[0].template, 'ghost-invitation')
  assert 'ghost_code' not in emails[0].variables
  assert 'ghost_profile' in emails[0].variables
