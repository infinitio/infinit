#!/usr/bin/env python3

# Import utils first for papier and OpenSSL
from utils import Meta, User, NoOpMailer

from bson.objectid import ObjectId
from infinit.oracles.meta import error
from infinit.oracles.meta.server.transaction_status import CANCELED

unconfirmed_email_leeway = 100

class MailService(NoOpMailer):

  def __init__(self):
    super().__init__(True)

  def template_message(self, template_message, message):
    merges = {}
    for entry in message['merge_vars'][0]['vars']:
      merges[entry['name']] = entry['content']
    print(template_message)
    if template_message == 'change-email-address':
      self.change_email_hash = merges['hash']

with Meta(enable_emails = True,
          unconfirmed_email_leeway = unconfirmed_email_leeway) as meta:
  email = 'foobar@infinit.io'
  fullname = 'jean louis'
  u = User(meta,
           email = email,
           fullname = fullname)
  u.login()
  assert meta.mailer.sent
  user_data = u.data

  u2 = User(meta, 'jeantest@infinit.io') # User we're going to send a file to.
  u2.login()
  # Make a transaction.
  txn, res = u.sendfile(recipient_id = u2.id)
  assert res['success']
  txn_id = res['created_transaction_id']

  meta.mailer = MailService()
  new_email_address = 'barfoo@infinit.io'
  res = u.post('user/change_email_request',
               {'new_email': new_email_address, 'password': u.password})
  assert res['success']

  u.logout()

  res = u.post('user/change_email', {
    'hash': meta.mailer.change_email_hash,
    'new_email': new_email_address,
    'password': u.password,
  })
  assert res['success']

  try:
    u.login()
    assert False # We shouldn't be able to login with the old credentials.
  except:
    pass

  # Check user data has been changed in the database.
  new_user_data = meta.database.users.find_one(
    {'_id': ObjectId(user_data['_id'])},
    fields = ['email', 'public_key', 'identity']
  )
  assert new_user_data['email'] == new_email_address
  assert new_user_data['public_key'] != user_data['public_key']
  assert new_user_data['identity'] != user_data['identity']

  # Check user's session has been invalidated.
  assert meta.database.sessions.count() == 1

  # Check transaction is cancelled.
  transaction = meta.database.transactions.find_one(
    {'_id': ObjectId(txn_id)},
  )
  assert transaction['status'] == CANCELED

  # Test that our new address works. The password remained the same, this would
  # not be the case in real life (tm) as it's a hash including the email.
  res = meta.post('login', {
    'email': new_email_address,
    'password': u.password,
    'device_id': str(u2.device_id),
    'pick_trophonius': False,
  })
  assert res['success']
