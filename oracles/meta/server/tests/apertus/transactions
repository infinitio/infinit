#!/usr/bin/env python3

from utils import Meta, User
from uuid import uuid4
from random import random


class Apertus:
  def __init__(self, meta):
    self.port_ssl = 1000 + int(random() * 64535)
    self.port_tcp = self.port_ssl
    while (self.port_tcp == self.port_ssl):
      self.port_tcp = 1000 + int(random() * 64535)
    self.meta = meta
    self.uuid = uuid4()

  def register_or_ping(self):
    self.meta.put('apertus/%s' % str(self.uuid),
                  body = {"port_ssl": self.port_ssl, "port_tcp": self.port_tcp})

  def read(self):
    res = self.socket.recvfrom(65565)
    print(res)

  def __enter__(self):
    self.register_or_ping()
    self.update_bandwidth(0, 0)
    return self

  def update_bandwidth(self, bandwidth, count):
    self.meta.post('apertus/%s/bandwidth' % str(self.uuid), {'bandwidth': bandwidth,
                                                             'number_of_transfers': count})

  def __exit__(self, type, value, traceback):
    self.meta.delete('apertus/%s' % str(self.uuid))

with Meta() as meta:
  alice = User(meta, "alice@infinit.io")
  bob = User(meta, "bob@infinit.io")

  alice.login()
  bob.login()

  tr, res = alice.sendfile(bob.id)
  transaction_id = res['created_transaction_id']
  assert res['success']

  res = alice.get('apertus/fallback/%s' % transaction_id)
  assert not res['success']

  with Apertus(meta) as apertus, Apertus(meta) as apertus2:
    assert meta.database.apertus.find().count() == 2

    alicefb = alice.get('apertus/fallback/%s' % transaction_id)
    assert alicefb['success']

    bobfb = bob.get('apertus/fallback/%s' % transaction_id)
    assert bobfb['success']
    print(alicefb, bobfb)
    assert alicefb['fallback_host'] == bobfb['fallback_host']
    assert alicefb['fallback_port_ssl'] == bobfb['fallback_port_ssl']
    assert alicefb['fallback_port_tcp'] == bobfb['fallback_port_tcp']

  with Apertus(meta) as apertus2:
    # Now both have get the fallback, a new one will be determine.
    bobfb = bob.get('apertus/fallback/%s' % transaction_id)
    assert bobfb['success']
    print(alicefb, bobfb)
    assert (alicefb['fallback_port_ssl'] != bobfb['fallback_port_ssl'])
    assert (alicefb['fallback_port_tcp'] != bobfb['fallback_port_tcp'])

    alicefb = bob.get('apertus/fallback/%s' % transaction_id)
    assert alicefb['fallback_host'] == bobfb['fallback_host']
    assert alicefb['fallback_port_ssl'] == bobfb['fallback_port_ssl']
    assert alicefb['fallback_port_tcp'] == bobfb['fallback_port_tcp']

  bob.logout()
  alice.logout()
