#!/usr/bin/env python3

from utils import Meta, User
from uuid import uuid4
from random import random
import pymongo

class Apertus:
  def __init__(self, meta):
    self.port = 1000 + int(random() * 64535)
    self.meta = meta
    self.uuid = uuid4()

  def register_or_ping(self):
    self.meta.put('apertus/%s' % str(self.uuid), body = {"port": self.port})

  def __str__(self):
    return "127.0.0.1:" + str(self.port)

  def __enter__(self):
    self.register_or_ping()
    self.update_bandwidth(0, 0)
    return self

  def __exit__(self, type, value, traceback):
    self.meta.delete('apertus/%s' % str(self.uuid))

  def update_bandwidth(self, bandwidth, count):
    self.meta.post('apertus/%s/bandwidth' % str(self.uuid), {'bandwidth': bandwidth,
                                                             'number_of_transfers': count})

with Meta() as meta:
  assert len(meta.get('apertus')['apertus']) == 0

  alice = User(meta, "alice@infinit.io")
  bob = User(meta, "bob@infinit.io")
  alice.login()
  bob.login()

  tr, res = alice.sendfile(bob.id)
  transaction_id = res['created_transaction_id']
  assert res['success']

  res = alice.get('apertus/fallback/%s' % transaction_id)
  assert not res['success']

  with Apertus(meta) as ap0, Apertus(meta) as ap1, Apertus(meta) as ap2:
    assert len(meta.get('apertus')['apertus']) == 3
    assert meta.database.apertus.find().count() == 3

    bd1 = 910002199
    ap0.update_bandwidth(bd1, 1)
    assert meta.database.apertus.find({"load": {"$ne": 0}}).count() == 1

    ap2.update_bandwidth(bd1 * 2, 2)
    assert meta.database.apertus.find({"load": {"$ne": 0}}).count() == 2

    alicefb = alice.get('apertus/fallback/%s' % transaction_id)
    assert alicefb['success']
    bobfb = bob.get('apertus/fallback/%s' % transaction_id)
    assert bobfb['success']
    assert bobfb['fallback'] == alicefb['fallback']
    assert bobfb['fallback'] == str(ap1)

    ap1.update_bandwidth(bd1 * 3, 1)

    joh = User(meta, "joh@infinit.io")
    chuck = User(meta, "chuck@infinit.io")
    joh.login()
    chuck.login()

    tr2, res2 = joh.sendfile(chuck.id)
    transaction_id2 = res2['created_transaction_id']
    assert res2['success']

    johfb = joh.get('apertus/fallback/%s' % transaction_id2)
    assert johfb['success']
    chuckfb = chuck.get('apertus/fallback/%s' % transaction_id2)
    assert chuckfb['success']
    assert chuckfb['fallback'] == str(ap0)

    chuck.logout()
    joh.logout()

  bob.logout()
  alice.logout()
