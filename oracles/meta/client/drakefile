import drake
import drake.cxx
import drake.cxx.boost
import drake.valgrind

build = None
check = None
install = None
config = None
lib = None

def configure(elle,
              transaction_lib,
              transaction_config,
              server_python,
              boost = None,
              python3 = None,
              prefix = drake.Path('/usr/local'),
              cxx_toolkit = None,
              cxx_config = None,
              valgrind = None,
              valgrind_tests = False,
):

  global build, check, install, config, lib

  cxx_toolkit = cxx_toolkit or drake.cxx.Toolkit()
  cxx_config = cxx_config or drake.cxx.Config()

  config = drake.cxx.Config()
  config += elle.elle.config
  config += elle.reactor.config
  config += transaction_config
  config.add_local_include_path('src')
  local_cxx_config = cxx_config + config

  build = drake.Rule('build')
  install = drake.Rule('install')

  template_context = drake.templating.Context(
    sources = server_python,
    pythonpath = ('../server/lib/python',))

  def boost_config(name):
    config = getattr(boost, 'config_%s' % name)
    if cxx_toolkit.os in [drake.os.windows, drake.os.ios]:
      return drake.cxx.Config(config(static = True))
    else:
      res = drake.cxx.Config(config(link = False))
      lib = getattr(boost, '%s_dynamic' % name)
      res.library_add(drake.copy(lib, 'lib', strip_prefix = True))
      return res

  ## ------- ##
  ## Library ##
  ## ------- ##

  with template_context:
    sources = drake.nodes(
      'src/infinit/oracles/meta/Error.hh.tmpl',
      'src/infinit/oracles/meta/Error.cc.tmpl',
      'src/infinit/oracles/meta/Client.cc',
      'src/infinit/oracles/meta/Client.hh',
      'src/infinit/oracles/meta/Client.hxx',
      'src/infinit/oracles/meta/Admin.cc',
      'src/infinit/oracles/meta/Admin.hh',
    )

  if cxx_toolkit.os in [drake.os.windows, drake.os.ios]:
    Library = drake.cxx.StaticLib
    elle_lib = elle.elle.lib_static
    reactor_lib = elle.reactor.lib_static
    aws_lib = elle.aws.lib_static
  else:
    Library = drake.cxx.DynLib
    elle_lib = drake.copy(elle.elle.lib_dynamic, 'lib',
                          strip_prefix = True)
    reactor_lib = drake.copy(elle.reactor.lib_dynamic, 'lib',
                             strip_prefix = True)
    aws_lib = drake.copy(elle.aws.lib_dynamic, 'lib', strip_prefix = True)
    transaction_lib = drake.copy(transaction_lib, 'lib', strip_prefix = True)

  lib_cxx_config = drake.cxx.Config(local_cxx_config)
  lib_cxx_config += boost_config('regex')
  lib_cxx_config.lib_path_runtime('../lib')
  lib = Library(
    'lib/metaclient',
    sources + [aws_lib, reactor_lib, elle_lib, transaction_lib],
    cxx_toolkit,
    lib_cxx_config)

  build << lib

  ## ------ ##
  ## Binary ##
  ## ------ ##

  boost_po = boost_config('program_options')
  boost_system = boost_config('system')
  bin = drake.cxx.Executable(
    'bin/meta-client',
    [drake.node('main.cc'), lib, reactor_lib, elle_lib],
    cxx_toolkit,
    local_cxx_config + boost_po + boost_system)

  ## ------ ##
  ## Python ##
  ## ------ ##

  if python3 is not None and cxx_toolkit.os not in [drake.os.windows, drake.os.ios]:
    with template_context:
      python_sources = drake.nodes(
        'src/infinit/oracles/meta/python.cc.tmpl',
      )

    meta_python_cxx_config = drake.cxx.Config(local_cxx_config)
    meta_python_cxx_config += python3
    meta_python_cxx_config += boost.config_python()
    meta_python_cxx_config.lib_path_runtime('..')
    meta_python = drake.cxx.Module(
      'lib/python/infinit/oracles/meta/client',
      python_sources + [lib],
      cxx_toolkit,
      meta_python_cxx_config)
    build << meta_python

  ## ----- ##
  ## Check ##
  ## ----- ##

  tests = drake.TestSuite('tests')
  check = drake.TestSuite('check')

  test_sources = drake.nodes(
    'tests/meta_client.cc',
  )

  tests_cxx_config = drake.cxx.Config(local_cxx_config)
  tests_cxx_config.lib_path_runtime('../lib')
  tests_cxx_config.add_local_include_path('../../../elle/reactor/tests')
  if valgrind is not None:
    tests_cxx_config.define('VALGRIND')
  tests_cxx_config += boost_config('date_time')
  tests_cxx_config += boost_config('system')
  tests_cxx_config += boost_config('test')
  if cxx_toolkit.os is drake.os.windows:
    tests_cxx_config.lib('shlwapi')
    tests_cxx_config.lib('ws2_32')
    tests_cxx_config.lib('gdi32')
    tests_cxx_config.lib('mswsock')
  test_bin = drake.cxx.Executable(
    'tests/meta_client',
    test_sources + [lib, reactor_lib, elle_lib, aws_lib],
    cxx_toolkit,
    tests_cxx_config)
  if valgrind_tests:
    runner = drake.valgrind.ValgrindRunner(test_bin,
                                           valgrind = valgrind)
  else:
    runner = drake.Runner(test_bin)
  runner.reporting = drake.Runner.Reporting.on_failure
  tests << test_bin
  check << runner.status
