import drake
import sys

from itertools import chain

with open(str(drake.path_source('../../elle/drake-utils.py')), 'r') as f:
  exec(f.read(), globals(), globals())

build = None
check = None
install = None

def configure(
    prefix,
    python,
    bottle,
    mongobox,
    sendwithus,
    elle,
    meta,
    apns,
    apns_cert,
    apns_cert_prod,
    python_common,
    production_build,
):
  global build, check, install

  if python is not None:
    git = drake.git.Git()
    version = drake.node(
      'lib/python/infinit/oracles/sisyphus/version.py')
    PythonVersionGenerator(version, git = git,
                           production_build = production_build)

    sources = drake.nodes(
      'src/infinit/oracles/sisyphus/__init__.py',
      'src/infinit/oracles/sisyphus/boulders/__init__.py',
      'src/infinit/oracles/sisyphus/boulders/apns.py',
      'src/infinit/oracles/sisyphus/boulders/drip.py',
    )

    build = drake.Rule('build')
    build_python_path = drake.Path('lib/python')
    sources_built = drake.copy(sources, build_python_path, 'src')
    sources_built.append(version)
    sources_built += drake.copy(
      apns.nodes,
      'lib/python',
      drake.Path('..') / apns.root)
    elle_python = drake.copy(elle.elle.python, '.', '../../elle/elle')
    for source in sources_built:
      source.dependencies_add(elle_python)
    sisyphus = drake.python.Package(
      'python',
      build_python_path,
      sources_built + drake.copy(python_common, '.', '..') + drake.copy(bottle, build_python_path, True) + [version])
    build_binary = drake.copy(drake.node('sisyphus'), 'bin')
    build << sisyphus
    build << build_binary
    build << drake.copy(sendwithus.nodes, build_python_path,
                        drake.Path('..') / sendwithus.root)
    build << drake.copy([apns_cert, apns_cert_prod],
                        'share',
                        strip_prefix = True)

    check = drake.Rule('check')
    pythonpath = \
      drake.path_build(build_python_path / 'infinit')
    for name in (
        'boulders/drip/activity-reminder',
        'boulders/drip/confirm-signup',
        'boulders/drip/ghost-reminder',
        'boulders/drip/onboarding',
        'boulders/drip/retention',
    ):
      test = drake.node('tests/%s' % name)
      for source in sources_built:
        test.dependency_add(source)
      test.dependency_add(drake.node('tests/boulders/drip/utils.py'))
      test.dependency_add(meta)
      test.dependency_add(mongobox)
      test.dependency_add(sendwithus)
      runner = drake.Runner(
        test,
        env = {
          'PYTHONPATH': ':'.join(
            map(str, chain([pythonpath],
                           meta.pythonpath,
                           mongobox.pythonpath,
                           sendwithus.pythonpath)))
        })
      runner.reporting = drake.Runner.Reporting.on_failure
      check << runner.status

    install = drake.Rule('install')
    python_version = drake.Version(*sys.version_info[0:2])
    install << drake.install(
      sisyphus.nodes,
      prefix / ('lib/python%s' % python_version),
      sisyphus.root)
    install << drake.copy(build_binary, prefix / 'bin', True)
