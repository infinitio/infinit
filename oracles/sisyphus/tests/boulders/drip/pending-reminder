#!/usr/bin/env python3

# utils first, beware of system OpenSSL.
import utils
from utils import *

import elle.log

from infinit.oracles.transaction import statuses

import sisyphus
import sisyphus.boulders.drip

ELLE_LOG_COMPONENT = 'infinit.oracles.sisyphus.boulders.drip'

class PendingReminder(sisyphus.boulders.drip.PendingReminder):

  def __init__(self, sisyphus):
    super().__init__(sisyphus)
    self.__now = datetime.datetime.utcnow()

  @property
  def now(self):
    return self.__now

  @now.setter
  def now(self, value):
    self.__now = value

  def _pick_template(self, template, users):
    return sisyphus.boulders.drip.Drip._pick_template(
      self, template, users)

def check_mail(emails, email, template):
  utils.check_mail(emails, email, template)
  for t in emails[0][1]['transactions']:
    assertEq(t['files'], ['foobar'])
    assertEq(t['peer']['fullname'], 'ghost@infinit.io')

with mongobox.MongoBox() as mongo:
  with Meta(mongo_port = mongo.port, enable_emails = False) as meta:
    emailer = DummyEmailer()
    sisy = sisyphus.Sisyphus(mongo_port = mongo.port,
                             emailer = emailer)
    gestapo(sisy.mongo)
    reminder = PendingReminder(sisy)

    def forward(duration):
      reminder.now += duration
      meta.now = reminder.now

    # Check nothing is sent with no users
    sisy.boulders_run()
    assert not emailer.emails

    # Create an activated user
    device = 'device'
    email = 'user@infinit.io'
    sender = meta.user_register(email, '*' * 64, 'Foo Bar')
    sender_device = meta._create_device(sender)
    sender_device['id'] = uuid.UUID(sender_device['id'])
    meta.set_connection_status(
      sender['_id'], sender_device['id'], True, 'tropho-id')
    tid = transaction_create(meta, sender, 'ghost@infinit.io')
    meta._cloud_buffer(tid, sender)
    meta._transaction_update(tid, statuses['ghost_uploaded'],
                             device, None, sender)
    sisy.boulders_run()
    assert not emailer.emails
    meta.set_connection_status(
      sender['_id'], sender_device['id'], False, 'tropho-id')
    forward(reminder.delay_third_reminder* 1.1)

    # Check nothing is sent for a finished transaction
    sisy.boulders_run()
    assert not emailer.emails

    # Check nothing is sent too early
    meta.set_connection_status(
      sender['_id'], sender_device['id'], True, 'tropho-id')
    tid = transaction_create(meta, sender, 'ghost@infinit.io')
    meta.set_connection_status(
      sender['_id'], sender_device['id'], False, 'tropho-id')
    forward(reminder.delay_first_reminder * 0.5)
    sisy.boulders_run()
    assert not emailer.emails

    # Check first reminder
    forward(reminder.delay_first_reminder)
    sisy.boulders_run()
    check_mail(emailer.emails, email,
               'drip_pending-reminder_reminded-1')

    # Check coming online resets
    meta.set_connection_status(
      sender['_id'], sender_device['id'], True, 'tropho-id')
    sisy.boulders_run()
    assert not emailer.emails
    meta.set_connection_status(
      sender['_id'], sender_device['id'], False, 'tropho-id')
    forward(reminder.delay_first_reminder * 1.1)
    sisy.boulders_run()
    check_mail(emailer.emails, email,
               'drip_pending-reminder_reminded-1')
    forward(reminder.delay_second_reminder -
            reminder.delay_first_reminder)
    sisy.boulders_run()
    check_mail(emailer.emails, email,
               'drip_pending-reminder_reminded-2')
    forward(reminder.delay_third_reminder -
            reminder.delay_second_reminder)
    # with MongoExpectation(index_miss = 1):
    #   # reminded-{1,2,3} -> online will scan the reminded-1 bucket,
    #   # which is empty; no big deal.
    #   sisy.boulders_run()
    # check_mail(emailer.emails, email,
    #            'drip_pending-reminder_reminded-3')
    # forward(reminder.delay_third_reminder)
    with MongoExpectation(index_miss = 1):
      # Ditto.
      sisy.boulders_run()
    assert not emailer.emails
