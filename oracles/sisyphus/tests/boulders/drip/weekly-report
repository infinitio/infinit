#!/usr/bin/env python3

# utils first, beware of system OpenSSL.
from utils import *

import elle.log

from infinit.oracles.transaction import statuses

import sisyphus
import sisyphus.boulders.drip

ELLE_LOG_COMPONENT = 'infinit.oracles.sisyphus.boulders.drip'

class WeeklyReport(sisyphus.boulders.drip.WeeklyReport):

  def __init__(self, sisyphus):
    super().__init__(sisyphus)
    self.__now = datetime.datetime.utcnow()

  @property
  def now(self):
    return self.__now

  @now.setter
  def now(self, value):
    self.__now = value

  def _vars(self, element, user):
    with MongoExpectation(ignore = True):
      return super()._vars(element, user)

  def _pick_template(self, template, users):
    return sisyphus.boulders.drip.Drip._pick_template(
      self, template, users)

def check_mail(mails, recipient, count_peers, count_links):
  assert len(mails) == 1
  mail = mails[0]
  assert mail[0] == recipient
  content = mail[1]
  assert 'people' in content
  assert 'size' in content
  peers = content['peer_transactions']
  assertEq(len(peers), count_peers)
  for peer in peers:
    assert 'files' in peer
    assert 'peer' in peer
    assert 'size' in peer
  links = content['link_transactions']
  assertEq(len(links), count_links)
  for link in links:
    assert 'count' in link
    assert 'files' in link
    assert 'size' in link

with mongobox.MongoBox() as mongo:
  with Meta(mongo_port = mongo.port, enable_emails = False) as meta:
    emailer = DummyEmailer()
    sisy = sisyphus.Sisyphus(mongo_port = mongo.port,
                             emailer = emailer)
    gestapo(sisy.mongo)
    report = WeeklyReport(sisy)
    # This is a Monday
    report.now = datetime.datetime(2014, 12, 15, 10, 58, 11)
    def forward(duration):
      report.now += duration
      meta.now = report.now

    # Check nothing is sent with no users
    sisy.boulders_run()
    assert not emailer.emails

    # Create an activated user
    device = 'device'
    email = 'user@infinit.io'
    sender = meta.user_register(email, '*' * 64, 'Foo Bar')
    sender_device = meta._create_device(sender)
    transaction_create(meta, sender, 'ghost@infinit.io')

    # Check nothing is sent to a fresh user
    sisy.boulders_run()
    assert not emailer.emails

    # Check nothing is sent the first week
    forward(datetime.timedelta(weeks = 1))
    sisy.boulders_run()
    assert not emailer.emails

    # Create a ghost transaction
    transaction_create(meta, sender, 'ghost@infinit.io')
    tid1 = transaction_create(meta, sender, 'ghost@infinit.io',
                              size = 100)
    meta._cloud_buffer(tid1, sender)
    meta._transaction_update(tid1, statuses['ghost_uploaded'],
                             device, None, sender)
    recipient = meta.user_register('recipient@infinit.io',
                                   '*' * 64, 'Foo Bar')

    # Create a peer transaction
    forward(datetime.timedelta(minutes = 1))
    # FIXME: create_device should fill devices
    recipient_device = meta._create_device(recipient)
    recipient['devices'].append({'id': recipient_device['id']})
    transaction_create(meta, sender,
                       recipient['email'])
    tid2 = transaction_create(
      meta,
      sender,
      recipient['email'],
      files = ['foo', 'bar', 'baz', 'quux'],
      size = 10000)
    meta._transaction_update(tid2, statuses['accepted'],
                             recipient_device['id'],
                             recipient_device['name'],
                             recipient)
    meta._transaction_update(tid2, statuses['finished'],
                             recipient_device['id'],
                             recipient_device['name'],
                             recipient)

    # Create a link transaction
    forward(datetime.timedelta(minutes = 1))
    res = meta.link_generate([('lol', 10000000)], 'lol', '',
                             sender, sender_device)
    meta.link_update(res['transaction']['id'], 1.0,
                     statuses['finished'], sender)
    meta.link_update(res['transaction']['id'], 1.0,
                     statuses['finished'], sender)
    meta.link_by_hash(res['transaction']['hash'])
    meta.link_by_hash(res['transaction']['hash'])

    # Check report is sent the next week
    forward(datetime.timedelta(days = 2))
    sisy.boulders_run()
    emails = emailer.emails
    check_mail(emails, email, 2, 1)
    assertEq(emails[0][1]['peer_transactions'][0]['size'], 10000)
    assertEq(emails[0][1]['peer_transactions'][0]['files'],
             ['foo', 'bar', 'baz', 'quux'])
    assertEq(emails[0][1]['peer_transactions'][0]['peer']['fullname'],
             'Foo Bar')
    assertEq(emails[0][1]['peer_transactions'][1]['size'], 100)
    assertEq(emails[0][1]['peer_transactions'][1]['files'],
             ['foobar'])
    assertEq(emails[0][1]['peer_transactions'][1]['peer']['fullname'],
             'ghost@infinit.io')
    assertEq(emails[0][1]['link_transactions'][0]['size'], 10000000)
    assertEq(emails[0][1]['link_transactions'][0]['files'], ['lol'])
    assertEq(emails[0][1]['link_transactions'][0]['count'], 2)
    assertEq(emails[0][1]['size'], 20010100)
    assertEq(emails[0][1]['people'], 4)
    assertEq(emails[0][1]['start'],
             datetime.datetime(2014, 12, 15, 15, 00, 00))
    assertEq(emails[0][1]['end'],
             datetime.datetime(2014, 12, 22, 15, 00, 00))

    # Check report is empty the next week
    forward(datetime.timedelta(weeks = 1))
    sisy.boulders_run()
    emails = emailer.emails
    check_mail(emails, email, 0, 0)
    assertEq(emails[0][1]['start'],
             datetime.datetime(2014, 12, 22, 15, 00, 00))
    assertEq(emails[0][1]['end'],
             datetime.datetime(2014, 12, 29, 15, 00, 00))
