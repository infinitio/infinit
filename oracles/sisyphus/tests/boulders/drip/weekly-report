#!/usr/bin/env python3

# utils first, beware of system OpenSSL.
from utils import *

import elle.log

from infinit.oracles.transaction import statuses

import sisyphus
import sisyphus.boulders.drip

ELLE_LOG_COMPONENT = 'infinit.oracles.sisyphus.boulders.drip'

class WeeklyReport(sisyphus.boulders.drip.WeeklyReport):

  def __init__(self, sisyphus):
    super().__init__(sisyphus)
    self.__now = datetime.datetime.utcnow()

  @property
  def now(self):
    return self.__now

  @now.setter
  def now(self, value):
    self.__now = value

  def _pick_template(self, template, users):
    return sisyphus.boulders.drip.Drip._pick_template(
      self, template, users)

def check_mail(mails, recipient, count):
  assert len(mails) == 1
  mail = mails[0]
  assert mail[0] == recipient
  content = mail[1]
  print(content)
  assert 'SUMMARY_PEOPLE' in content
  assert 'SUMMARY_SIZE' in content
  assert 'SUMMARY_TIME' in content
  for i in range(count):
    assert 'TRANSACTION_%d_START' % i in content
    assert 'TRANSACTION_%d_FILENAME' % i in content
    if 'TRANSACTION_%d_IS_PEER' % i in content:
      assert 'TRANSACTION_%d_PEER' % i in content
    else:
      assert 'TRANSACTION_%d_IS_LINK' % i in content
  assert 'TRANSACTION_%d_START' % (count + 1) not in content

with mongobox.MongoBox() as mongo:
  with Meta(mongo_port = mongo.port, enable_emails = False) as meta:
    mandrill = Mandrill()
    sisy = sisyphus.Sisyphus(mongo_port = mongo.port,
                             mandrill = mandrill)
    # gestapo(sisy.mongo)
    report = WeeklyReport(sisy)
    # This is a Thursday
    report.now = datetime.datetime(2014, 12, 12, 10, 58, 11)

    def forward(duration):
      report.now += duration
      meta.now = report.now

    # Check nothing is sent with no users
    sisy.boulders_run()
    assert not mandrill.emails

    # Create an activated user
    device = 'device'
    email = 'user@infinit.io'
    sender = meta.user_register(email, '*' * 64, 'Foo Bar')
    sender_device = meta._create_device(sender)
    transaction_create(meta, sender, 'ghost@infinit.io')

    # Check nothing is sent to a fresh user
    sisy.boulders_run()
    assert not mandrill.emails

    # Check nothing is sent the first week
    forward(datetime.timedelta(weeks = 1))
    sisy.boulders_run()
    assert not mandrill.emails

    # Create a ghost transaction
    transaction_create(meta, sender, 'ghost@infinit.io')
    tid1 = transaction_create(meta, sender, 'ghost@infinit.io',
                              size = 100)
    meta._transaction_update(tid1, statuses['ghost_uploaded'],
                             device, None, sender)
    recipient = meta.user_register('recipient@infinit.io',
                                   '*' * 64, 'Foo Bar')

    # Create a peer transaction
    forward(datetime.timedelta(minutes = 1))
    recipient_device = meta._create_device(recipient)
    recipient['devices'].append(recipient_device['id'])
    transaction_create(meta, sender,
                       recipient['email'])
    tid2 = transaction_create(
      meta,
      sender,
      recipient['email'],
      files = ['foo', 'bar', 'baz', 'quux',
               'chiche', 't****', 'b*****'],
      size = 1024 * 10)
    meta._transaction_update(tid2, statuses['accepted'],
                             recipient_device['id'],
                             recipient_device['name'],
                             recipient)
    meta._transaction_update(tid2, statuses['finished'],
                             recipient_device['id'],
                             recipient_device['name'],
                             recipient)

    # Create a link transaction
    forward(datetime.timedelta(minutes = 1))
    res = meta.link_generate([('lol', 1024 * 1024 * 10)], 'lol', '',
                             sender, sender_device)
    meta.link_update(res['transaction']['id'], 1.0,
                     statuses['finished'], sender)
    meta.link_update(res['transaction']['id'], 1.0,
                     statuses['finished'], sender)
    meta.link_by_hash(res['transaction']['hash'])
    meta.link_by_hash(res['transaction']['hash'])

    # Check report is sent the next week
    forward(datetime.timedelta(days = 2))
    sisy.boulders_run()
    emails = mandrill.emails
    check_mail(emails, email, 3)
    assertEq(emails[0][1]['TRANSACTION_0_IS_LINK'], '1')
    assertEq(emails[0][1]['TRANSACTION_0_SIZE'], '10.0 MB')
    assertEq(emails[0][1]['TRANSACTION_0_FILENAME'], 'lol')
    assertEq(emails[0][1]['TRANSACTION_1_IS_PEER'], '1')
    assertEq(emails[0][1]['TRANSACTION_1_SIZE'], '10.0 KB')
    assertEq(emails[0][1]['TRANSACTION_1_FILENAME'],
             'foo, bar, baz and 4 other files')
    assertEq(emails[0][1]['TRANSACTION_1_PEER'], 'Foo Bar')
    assertEq(emails[0][1]['TRANSACTION_2_IS_PEER'], '1')
    assertEq(emails[0][1]['TRANSACTION_2_SIZE'], '100 B')
    assertEq(emails[0][1]['TRANSACTION_2_FILENAME'], 'foobar')
    assertEq(emails[0][1]['TRANSACTION_2_PEER'], 'ghost@infinit.io')
    assertEq(emails[0][1]['SUMMARY_SIZE'], '20.0 MB')
    assertEq(emails[0][1]['SUMMARY_PEOPLE'], '4')

    # Check report is empty the next week
    forward(datetime.timedelta(weeks = 1))
    sisy.boulders_run()
    emails = mandrill.emails
    assert len(emails) == 2
    if emails[0][0] == email:
      emails = emails[0:1]
    else:
      emails = emails[1:2]
    check_mail(emails, email, 0)
