#!/usr/bin/env python3

# utils first, beware of system OpenSSL.
import utils
from utils import *

import uuid

import elle.log

from infinit.oracles.transaction import statuses

import oracles.sisyphus
import oracles.sisyphus.boulders.drip

ELLE_LOG_COMPONENT = 'infinit.oracles.sisyphus.boulders.drip'

class DelightRecipient(oracles.sisyphus.boulders.drip.DelightRecipient):

  def _pick_template(self, template, users):
    return oracles.sisyphus.boulders.drip.Drip._pick_template(
      self, template, users)

def check_mail(mails, recipient, template):
  utils.check_mail(mails, recipient, template)
  assertEq(mails[0][1]['sender']['email'], 'sender@infinit.io')

class Metrics:

  def __init__(self):
    self.expected = {}
    self.got = {}

  def send(self, metrics, collection):
    for metric in metrics:
      self.got.setdefault(metric['template'], []).append(metric)
    # Do a better testing.
    for key in self.expected.keys():
      assertEq(len(self.got[key]), len(self.expected[key]))
      if key == 'drip_delight-recipient_1':
        assertEq(set([str(item['user']) for item in self.got[key]]),
                 set([str(item['user']) for item in self.expected[key]]))

with mongobox.MongoBox() as mongo:
  with Meta(mongo_port = mongo.port,
            enable_emails = False,
            force_admin = True) as meta:
    emailer = DummyEmailer()
    metrics = Metrics()
    sisy = oracles.sisyphus.Sisyphus(mongo_port = mongo.port,
                                     emailer = emailer,
                                     metrics = metrics)
    gestapo(sisy._Sisyphus__mongo)
    reminder = DelightRecipient(sisy)

    # Check nothing is sent with no users
    sisy.boulders_run()
    assert not emailer.emails

    # Create users
    ghost_email = 'ghost@infinit.io'
    recipient = user_register(meta, 'recipient@infinit.io')
    # FIXME: create_device should fill devices
    recipient_device = meta._create_device(recipient)
    recipient['devices'].append({'id': recipient_device['id']})
    sender = user_register(meta, 'sender@infinit.io')

    # Check nothing is sent with no transaction
    sisy.boulders_run()
    assert not emailer.emails

    # Check nothing is sent with ghost transactions
    tid = transaction_create(meta, sender, recipient_identifier = ghost_email)
    meta._cloud_buffer(tid, sender)
    meta._transaction_update(tid, statuses['ghost_uploaded'],
                             'device', 'device', sender)
    meta.transaction_download(tid)
    sisy.boulders_run()
    assert not emailer.emails

    # Check the mail is not sent upon creation
    tid = transaction_create(meta, sender, recipient_identifier = recipient['email'])
    sisy.boulders_run()
    assert not emailer.emails

    # Check the mail is not sent upon acceptation
    meta._transaction_update(tid, statuses['accepted'],
                             recipient_device['id'],
                             recipient_device['name'],
                             recipient)
    sisy.boulders_run()
    assert not emailer.emails

    # Check the mail is sent upon completion
    meta._transaction_update(tid, statuses['finished'],
                             recipient_device['id'],
                             recipient_device['name'],
                             recipient)
    metrics.expected.setdefault('drip_delight-recipient_1', []).append({'user': recipient['_id']})
    sisy.boulders_run()
    check_mail(emailer.emails,
               recipient['email'], 'drip_delight-recipient_1')

    # But not twice
    sisy.boulders_run()
    assert not emailer.emails

    # And not for subsequent transfers
    tid = transaction_create(meta, sender, recipient_identifier = recipient['email'])
    meta._transaction_update(tid, statuses['accepted'],
                             recipient_device['id'],
                             recipient_device['name'],
                             recipient)
    sisy.boulders_run()
    assert not emailer.emails
    assertEq(len(metrics.got), 1)
    assertEq(len(metrics.got['drip_delight-recipient_1']), 1)
