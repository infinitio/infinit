#!/usr/bin/env python3

# utils first, beware of system OpenSSL.
from utils import *

import uuid

import elle.log

from infinit.oracles.transaction import statuses

import sisyphus
import sisyphus.boulders.drip

ELLE_LOG_COMPONENT = 'infinit.oracles.sisyphus.boulders.drip'

class DelightRecipient(sisyphus.boulders.drip.DelightRecipient):

  def _pick_template(self, template, users):
    return sisyphus.boulders.drip.Drip._pick_template(
      self, template, users)

def check_mail(mails, recipient):
  assert len(mails) == 1
  mail = mails[0]
  assert mail[0] == recipient
  content = mail[1]
  assert content['USER_EMAIL'] == recipient
  assert content['SENDER_EMAIL'] == 'sender@infinit.io'

with mongobox.MongoBox() as mongo:
  with Meta(mongo_port = mongo.port,
            enable_emails = False,
            force_admin = True) as meta:
    mandrill = Mandrill()
    sisy = sisyphus.Sisyphus(mongo_port = mongo.port,
                             mandrill = mandrill)
    gestapo(sisy._Sisyphus__mongo)
    reminder = DelightRecipient(sisy)

    # Check nothing is sent with no users
    sisy.boulders_run()
    assert not mandrill.emails

    # Create users
    ghost_email = 'ghost@infinit.io'
    recipient = meta.user_register('recipient@infinit.io',
                                 '*' * 64, 'Foo Bar')
    recipient_device = meta._create_device(recipient)
    recipient['devices'].append(recipient_device['id'])
    sender = meta.user_register('sender@infinit.io',
                                '*' * 64, 'Foo Bar')

    # Check nothing is sent with no transaction
    sisy.boulders_run()
    assert not mandrill.emails

    # Check nothing is sent with ghost transactions
    tid = transaction_create(meta, sender, ghost_email)
    meta._transaction_update(tid, statuses['ghost_uploaded'],
                             'device', 'device', sender)
    meta.transaction_download(tid)
    sisy.boulders_run()
    assert not mandrill.emails

    # Check the mail is not sent upon creation
    tid = transaction_create(meta, sender, recipient['email'])
    sisy.boulders_run()
    assert not mandrill.emails

    # Check the mail is not sent upon acceptation
    meta._transaction_update(tid, statuses['accepted'],
                             recipient_device['id'],
                             recipient_device['name'],
                             recipient)
    sisy.boulders_run()
    assert not mandrill.emails

    # Check the mail is sent upon completion
    meta._transaction_update(tid, statuses['finished'],
                             recipient_device['id'],
                             recipient_device['name'],
                             recipient)
    sisy.boulders_run()
    check_mail(mandrill.emails, recipient['email'])

    # But not twice
    sisy.boulders_run()
    assert not mandrill.emails

    # And not for subsequent transfers
    tid = transaction_create(meta, sender, recipient['email'])
    meta._transaction_update(tid, statuses['accepted'],
                             recipient_device['id'],
                             recipient_device['name'],
                             recipient)
    sisy.boulders_run()
    assert not mandrill.emails
