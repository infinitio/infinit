#!/usr/bin/env python3

# utils first, beware of system OpenSSL.
import utils
from utils import *

import uuid

import elle.log

from infinit.oracles.transaction import statuses

import sisyphus
import sisyphus.boulders.drip

ELLE_LOG_COMPONENT = 'infinit.oracles.sisyphus.boulders.drip'

class DelightGhost(sisyphus.boulders.drip.DelightGhost):

  def _pick_template(self, template, users):
    return sisyphus.boulders.drip.Drip._pick_template(
      self, template, users)

def check_mail(mails, recipient, template):
  utils.check_mail(mails, recipient, template)
  assertEq(mails[0][1]['sender']['email'], 'sender@infinit.io')

with mongobox.MongoBox() as mongo:
  with Meta(mongo_port = mongo.port,
            enable_emails = False,
            force_admin = True) as meta:
    emailer = DummyEmailer()
    sisy = sisyphus.Sisyphus(mongo_port = mongo.port,
                             emailer = emailer)
    gestapo(sisy._Sisyphus__mongo)
    reminder = DelightGhost(sisy)

    # Check nothing is sent with no users
    sisy.boulders_run()
    check_no_mail(emailer.emails)

    # Create users
    ghost_email = 'ghost@infinit.io'
    sender = meta.user_register('sender@infinit.io',
                                '*' * 64, 'Foo Bar')

    # Check nothing is sent with no transaction
    sisy.boulders_run()
    check_no_mail(emailer.emails)

    # Check the mail is not sent upon creation
    tid = transaction_create(meta, sender, ghost_email)
    sisy.boulders_run()
    check_no_mail(emailer.emails)

    # Check the mail is not sent upon upload
    meta._cloud_buffer(tid, sender)
    meta._transaction_update(tid, statuses['ghost_uploaded'],
                             'device', 'device', sender)
    sisy.boulders_run()
    check_no_mail(emailer.emails)

    # Check the mail is sent upon completion
    meta.transaction_download(tid)
    sisy.boulders_run()
    check_mail(emailer.emails,
               'ghost@infinit.io', 'drip_delight-ghost_1')

    # But only once
    meta.transaction_download(tid)
    sisy.boulders_run()
    check_no_mail(emailer.emails)
