#!/usr/bin/env python3

from utils import *

import sisyphus
import sisyphus.boulders.drip


class Onboarding(sisyphus.boulders.drip.Onboarding):

  def __init__(self, sisyphus):
    super().__init__(sisyphus)
    self.__now = datetime.datetime.utcnow()

  @property
  def now(self):
    return self.__now

  @now.setter
  def now(self, value):
    self.__now = value

  def _pick_template(self, template, users):
    return sisyphus.boulders.drip.Drip._pick_template(
      self, template, users)


with mongobox.MongoBox() as mongo:
  with Meta(mongo_port = mongo.port, enable_emails = False) as meta:
    emailer = DummyEmailer()
    sisy = sisyphus.Sisyphus(mongo_port = mongo.port,
                                 emailer = emailer)
    gestapo(sisy._Sisyphus__mongo)
    onboarding = Onboarding(sisy)
    # Check nothing is sent with no users
    sisy.boulders_run()
    assert not emailer.emails

    # Add deleted users to check they don't receive email and they are
    # not scanned by our mongo queries.
    del1 = user_register(meta, 'del1@infinit.io')
    meta.user_delete(del1)
    del2 = user_register(meta, 'del2@infinit.io')
    meta.user_delete(del2)
    del3 = user_register(meta, 'del3@infinit.io')
    meta.user_delete(del3)

    # Check nothing is sent to a fresh user
    user_register(meta, 'user1@infinit.io')
    with MongoExpectation(object_miss = 1):
      # All undetermined users are scanned to see if they did a
      # transaction.
      sisy.boulders_run()
      assert not emailer.emails

    # Check unactivated 1 is sent to an aging user
    diff = onboarding.delay_first_reminder * 1.5
    onboarding.now += diff
    meta.now += diff
    # Add unrelevant users to check they are not scanned by our mongo
    # queries.
    user_register(meta, 'user2@infinit.io')
    user_register(meta, 'user3@infinit.io')
    user_register(meta, 'user4@infinit.io')
    # The activated and unactivated bucket will always inspect user1
    # to check last_transaction.time, hence the one miss.
    with MongoExpectation(object_miss = 1):
      sisy.boulders_run()
      emails = emailer.emails
      print(emails)
      assert len(emails) == 1
      assert emails[0][0] == 'user1@infinit.io'
      # Check it's not sent twice
      sisy.boulders_run()
      assert not emailer.emails
