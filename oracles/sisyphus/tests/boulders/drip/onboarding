#!/usr/bin/env python3

from utils import *

import sisyphus
import sisyphus.boulders.drip


class Onboarding(sisyphus.boulders.drip.Onboarding):

  def __init__(self, sisyphus):
    super().__init__(sisyphus)
    self.__now = datetime.datetime.utcnow()

  @property
  def now(self):
    return self.__now

  @now.setter
  def now(self, value):
    self.__now = value


with mongobox.MongoBox() as mongo:
  with Meta(mongo_port = mongo.port, enable_emails = False) as meta:
    mandrill = Mandrill()
    sisy = sisyphus.Sisyphus(mongo_port = mongo.port,
                                 mandrill = mandrill)
    sisy._Sisyphus__mongo.__class__ = GestapoMongoClient
    onboarding = Onboarding(sisy)
    # Check nothing is sent with no users
    sisy.cron()
    assert not mandrill.emails

    # Add deleted users to check they don't receive email and they are
    # not scanned by our mongo queries.
    del1 = meta.user_register('del1@infinit.io', '*' * 64, 'Foo Bar')
    meta.user_delete(del1)
    del2 = meta.user_register('del2@infinit.io', '*' * 64, 'Foo Bar')
    meta.user_delete(del2)
    del3 = meta.user_register('del3@infinit.io', '*' * 64, 'Foo Bar')
    meta.user_delete(del3)

    # Check nothing is sent to a fresh user
    meta.user_register('user1@infinit.io', '*' * 64, 'Foo Bar')
    sisy.cron()
    assert not mandrill.emails

    # Check unactivated 1 is sent to an aging user
    onboarding.now = datetime.datetime.utcnow() + datetime.timedelta(days = 2)
    meta.now = datetime.datetime.utcnow() + datetime.timedelta(days = 2)
    # Add unrelevant users to check they are not scanned by our mongo
    # queries.
    meta.user_register('user2@infinit.io', '*' * 64, 'Foo Bar')
    meta.user_register('user3@infinit.io', '*' * 64, 'Foo Bar')
    meta.user_register('user4@infinit.io', '*' * 64, 'Foo Bar')
    # The activated and unactivated bucket will always inspect user1
    # to check last_transaction_time, hence the one miss.
    with MongoExpectation(object_miss = 1):
      sisy.cron()
      emails = mandrill.emails
      assert len(emails) == 1
      assert emails[0][0] == 'user1@infinit.io'
      # Check it's not sent twice
      sisy.cron()
      assert not mandrill.emails
