#!/usr/bin/env python3

# utils first, beware of system OpenSSL.
from utils import *

import elle.log

from infinit.oracles.transaction import statuses

import sisyphus
import sisyphus.boulders.drip

ELLE_LOG_COMPONENT = 'infinit.oracles.sisyphus.boulders.drip'

class GhostReminder(sisyphus.boulders.drip.GhostReminder):

  def __init__(self, sisyphus):
    super().__init__(sisyphus)
    self.__now = datetime.datetime.utcnow()

  @property
  def now(self):
    return self.__now

  @now.setter
  def now(self, value):
    self.__now = value

def check_mail(mails, sender, recipient):
  assert len(mails) == 1
  mail = mails[0]
  assert mail[0] == recipient
  content = mail[1]
  assert content['SENDER_EMAIL'] == sender
  assert content['RECIPIENT_EMAIL'] == recipient
  assert 'SENDER_AVATAR' in content
  assert 'SENDER_FULLNAME' in content
  assert 'TRANSACTION_FILENAME' in content
  assert 'TRANSACTION_FILES_COUNT_OTHER' in content
  assert 'TRANSACTION_ID' in content
  assert 'TRANSACTION_KEY' in content
  assert 'TRANSACTION_MESSAGE' in content

def create_transaction(sender, recipient, files = ['foobar']):
  tid = meta.transaction_create(
    sender, recipient, files, 1, 42, False, device)
  tid = tid['created_transaction_id']
  meta._transaction_update(tid, statuses['initialized'],
                             'device', None, sender)
  return tid

with mongobox.MongoBox() as mongo:
  with Meta(mongo_port = mongo.port, enable_emails = False) as meta:
    mandrill = Mandrill()
    sisy = sisyphus.Sisyphus(mongo_port = mongo.port,
                                 mandrill = mandrill)
    sisy._Sisyphus__mongo.__class__ = GestapoMongoClient
    reminder = GhostReminder(sisy)

    def forward(duration):
      reminder.now += duration
      meta.now = reminder.now
    delay_diff = \
      reminder.delay_second_reminder - reminder.delay_first_reminder

    # Check nothing is sent with no users
    sisy.cron()
    assert not mandrill.emails

    # Create a ghost transaction
    device = 'device'
    sender = meta.user_register('sender@infinit.io',
                                '*' * 64, 'Foo Bar')
    ghost_email = 'ghost@infinit.io'
    tid = create_transaction(sender, ghost_email)
    ghost = meta.user_by_email(ghost_email)

    # Create a real transsaction to test mongo queries complexity
    bystander = meta.user_register('bystander@infinit.io',
                                   '*' * 64, 'Foo Bar')
    create_transaction(sender, 'bystander@infinit.io')

    # Check nothing is sent for a fresh transaction
    sisy.cron()
    assert not mandrill.emails

    # Check nothing is sent while the transaction is not uploaded.
    forward(reminder.delay_first_reminder * 2)
    sisy.cron()
    assert not mandrill.emails

    # Finish upload.
    meta._transaction_update(tid, statuses['ghost_uploaded'],
                             device, None, sender)

    # Check nothing is sent less than a day after upload
    forward(reminder.delay_first_reminder / 2)
    sisy.cron()
    assert not mandrill.emails

    # Check reminder 1 is sent 24h after upload
    forward(reminder.delay_first_reminder)
    sisy.cron()
    check_mail(mandrill.emails,
               'sender@infinit.io', ghost_email)
    sisy.cron()
    assert not mandrill.emails

    # Check reminder 2 is sent 72h after upload
    forward(delay_diff)
    sisy.cron()
    check_mail(mandrill.emails,
               'sender@infinit.io', ghost_email)
    sisy.cron()
    assert not mandrill.emails

    # Check reminder 1 is not sent for downloaded transactions
    tid = create_transaction(sender, ghost_email)
    meta._transaction_update(tid, statuses['ghost_uploaded'],
                             device, None, sender)
    forward(reminder.delay_first_reminder * 2)
    meta._transaction_update(tid, statuses['finished'],
                             device, None, ghost)
    sisy.cron()
    assert not mandrill.emails

    # Check reminder 2 is not sent for downloaded transactions
    tid = create_transaction(sender, ghost_email)
    meta._transaction_update(tid, statuses['ghost_uploaded'],
                             device, None, sender)
    forward(reminder.delay_first_reminder * 2)
    sisy.cron()
    check_mail(mandrill.emails, 'sender@infinit.io', ghost_email)
    forward(
      reminder.delay_second_reminder - reminder.delay_first_reminder)
    assert not mandrill.emails
    meta._transaction_update(tid, statuses['finished'],
                             device, None, ghost)
    sisy.cron()
    assert not mandrill.emails

    with elle.log.log('test two recipients'):
      ghost_email_1 = 'ghost1@infinit.io'
      ghost_email_2 = 'ghost2@infinit.io'
      tid_1 = create_transaction(sender, ghost_email_1, files = ['1'])
      tid_2 = create_transaction(sender, ghost_email_2, files = ['2'])
      meta._transaction_update(tid_1, statuses['ghost_uploaded'],
                               device, None, sender)
      meta._transaction_update(tid_2, statuses['ghost_uploaded'],
                               device, None, sender)
      forward((reminder.delay_first_reminder +
               reminder.delay_second_reminder) * 2)
      sisy.cron()
      mails = mandrill.emails
      assert len(mails) == 4
      mail_1 = 0
      mail_2 = 0
      for mail in mails:
        if mail[0] == 'ghost1@infinit.io':
          mail_1 += 1
          assert mail[1]['TRANSACTION_FILENAME'] == '1'
        elif mail[0] == 'ghost2@infinit.io':
          mail_2 += 1
          assert mail[1]['TRANSACTION_FILENAME'] == '2'
        else:
          raise Exception('unexpected recipient: %s' % mail[0])
      assert mail_1 == 2
      assert mail_2 == 2

    with elle.log.log('test same recipient twice'):
      ghost_email = 'lucky.ghost@infinit.io'
      tid_1 = create_transaction(sender, ghost_email, files = ['A'])
      tid_2 = create_transaction(sender, ghost_email, files = ['B'])
      meta._transaction_update(tid_1, statuses['ghost_uploaded'],
                               device, None, sender)
      meta._transaction_update(tid_2, statuses['ghost_uploaded'],
                               device, None, sender)
      forward(reminder.delay_first_reminder + delay_diff / 2)
      sisy.cron()
      mails = mandrill.emails
      assert len(mails) == 2
      mail_a = False
      mail_b = False
      for mail in mails:
        assert mail[0] == ghost_email
        if mail[1]['TRANSACTION_FILENAME'] == 'A':
          assert not mail_a
          mail_a = True
        elif mail[1]['TRANSACTION_FILENAME'] == 'B':
          assert not mail_b
          mail_b = True
        else:
          raise Exception('unexpected filename: %s' % mail[0])
      assert mail_a and mail_b
