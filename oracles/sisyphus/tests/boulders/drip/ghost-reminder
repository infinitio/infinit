#!/usr/bin/env python3

# utils first, beware of system OpenSSL.
from utils import *

import elle.log

from infinit.oracles.transaction import statuses

import oracles.sisyphus
import oracles.sisyphus.boulders.drip

ELLE_LOG_COMPONENT = 'infinit.oracles.sisyphus.boulders.drip'

class GhostReminder(oracles.sisyphus.boulders.drip.GhostReminder):

  def __init__(self, sisyphus):
    super().__init__(sisyphus)
    self.__now = datetime.datetime.utcnow()

  @property
  def now(self):
    return self.__now

  @now.setter
  def now(self, value):
    self.__now = value

  def _pick_template(self, template, users):
    return oracles.sisyphus.boulders.drip.Drip._pick_template(
      self, template, users)

with mongobox.MongoBox() as mongo:
  with Meta(mongo_port = mongo.port, enable_emails = False) as meta:
    emailer = DummyEmailer()
    sisy = oracles.sisyphus.Sisyphus(mongo_port = mongo.port, emailer = emailer)
    gestapo(sisy._Sisyphus__mongo)
    reminder = GhostReminder(sisy)

    def forward(duration):
      reminder.now += duration
      meta.now = reminder.now

    # Check nothing is sent with no users
    sisy.boulders_run()
    check_no_mail(emailer.emails)

    # Create a ghost transaction
    device = 'device'
    sender = user_register(meta, 'sender@infinit.io')
    ghost_email = 'ghost@infinit.io'
    tid = transaction_create(meta, sender, recipient_identifier = ghost_email)
    ghost = meta.user_by_email(ghost_email)

    # Create a real transsaction to test mongo queries complexity
    bystander = user_register(meta, 'bystander@infinit.io')
    transaction_create(meta, sender, recipient_identifier = 'bystander@infinit.io')

    # Check nothing is sent for a fresh transaction
    sisy.boulders_run()
    check_no_mail(emailer.emails)

    # Check nothing is sent while the transaction is not uploaded.
    forward(reminder.delay * 2)
    sisy.boulders_run()
    check_no_mail(emailer.emails)

    # Finish upload.
    meta._cloud_buffer(tid, sender)
    meta._transaction_update(tid, statuses['ghost_uploaded'],
                             device, None, sender)

    # Check nothing is sent less than a day after upload
    forward(reminder.delay / 2)
    sisy.boulders_run()
    check_no_mail(emailer.emails)

    # Check reminder 1 is sent 24h after upload
    forward(reminder.delay)
    sisy.boulders_run()
    check_mail_transaction(emailer.emails,
                           'sender@infinit.io', ghost_email)
    sisy.boulders_run()
    check_no_mail(emailer.emails)

    # Check reminder 1 is not sent for downloaded transactions
    tid = transaction_create(meta, sender, recipient_identifier = ghost_email)
    meta._cloud_buffer(tid, sender)
    meta._transaction_update(tid, statuses['ghost_uploaded'],
                             device, None, sender)
    forward(reminder.delay * 2)
    meta._transaction_update(tid, statuses['finished'],
                             device, None, ghost)
    sisy.boulders_run()
    check_no_mail(emailer.emails)

    with elle.log.log('test two recipients'):
      ghost_email_1 = 'ghost1@infinit.io'
      ghost_email_2 = 'ghost2@infinit.io'
      tid_1 = transaction_create(meta, sender, recipient_identifier = ghost_email_1,
                                 files = ['1'])
      tid_2 = transaction_create(meta, sender, recipient_identifier = ghost_email_2,
                                 files = ['2'])
      meta._cloud_buffer(tid_1, sender)
      meta._cloud_buffer(tid_2, sender)
      meta._transaction_update(tid_1, statuses['ghost_uploaded'],
                               device, None, sender)
      meta._transaction_update(tid_2, statuses['ghost_uploaded'],
                               device, None, sender)
      forward(reminder.delay * 2)
      sisy.boulders_run()
      mails = emailer.emails
      assert len(mails) == 2
      mail_1 = 0
      mail_2 = 0
      for mail in mails:
        if mail[0] == 'ghost1@infinit.io':
          mail_1 += 1
          assertEq(mail[1]['transaction']['files'], ['1'])
        elif mail[0] == 'ghost2@infinit.io':
          mail_2 += 1
          assertEq(mail[1]['transaction']['files'], ['2'])
        else:
          raise Exception('unexpected recipient: %s' % mail[0])
      assert mail_1 == 1
      assert mail_2 == 1

    with elle.log.log('test same recipient twice'):
      ghost_email = 'lucky.ghost@infinit.io'
      tid_1 = transaction_create(meta, sender, recipient_identifier = ghost_email,
                                 files = ['A'])
      tid_2 = transaction_create(meta, sender, recipient_identifier = ghost_email,
                                 files = ['B'])
      meta._cloud_buffer(tid_1, sender)
      meta._cloud_buffer(tid_2, sender)

      meta._transaction_update(tid_1, statuses['ghost_uploaded'],
                               device, None, sender)
      meta._transaction_update(tid_2, statuses['ghost_uploaded'],
                               device, None, sender)
      forward(reminder.delay * 1.5)
      sisy.boulders_run()
      mails = emailer.emails
      assert len(mails) == 2
      mail_a = False
      mail_b = False
      for mail in mails:
        assert mail[0] == ghost_email
        if mail[1]['transaction']['files'] == ['A']:
          assert not mail_a
          mail_a = True
        elif mail[1]['transaction']['files'] == ['B']:
          assert not mail_b
          mail_b = True
        else:
          raise Exception('unexpected filename: %s' % mail[0])
      assert mail_a and mail_b

# Check expiration_day field of mails.
with mongobox.MongoBox() as mongo:
  with Meta(mongo_port = mongo.port, enable_emails = False) as meta:
    emailer = DummyEmailer()
    sisy = oracles.sisyphus.Sisyphus(mongo_port = mongo.port, emailer = emailer)
    gestapo(sisy._Sisyphus__mongo)
    reminder = GhostReminder(sisy)

    def forward(duration):
      reminder.now += duration
      meta.now = reminder.now

    def day_of_week(from_date, days):
      weekdays = [
        'Monday',
        'Tuesday',
        'Wednesday',
        'Thursday',
        'Friday',
        'Saturday',
        'Sunday']
      return weekdays[(from_date + datetime.timedelta(days = days)).weekday()]

    # Ghost upload a transaction
    device = 'device'
    sender = user_register(meta, 'sender@infinit.io')
    ghost_email = 'ghost@infinit.io'
    tid = transaction_create(meta, sender, recipient_identifier = ghost_email)
    ctime = datetime.datetime.utcnow()
    meta._cloud_buffer(tid, sender)
    meta._transaction_update(tid, statuses['ghost_uploaded'],
                             device, None, sender)

    forward(reminder.delay + datetime.timedelta(minutes = 1))
    sisy.boulders_run()
    emails = emailer.emails
    assertEq(len(emails), 1)
    def days(count):
      return datetime.timedelta(days = count)
    # Number of days will be rounded down.
    assertEq(emails[0][1]['transaction']['expiration_day'],
             day_of_week(ctime, 6))
