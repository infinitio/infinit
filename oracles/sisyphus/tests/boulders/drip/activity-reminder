#!/usr/bin/env python3

# utils first, beware of system OpenSSL.
import utils
from utils import *

import elle.log

from infinit.oracles.transaction import statuses

import oracles.sisyphus
import oracles.sisyphus.boulders.drip

ELLE_LOG_COMPONENT = 'infinit.oracles.sisyphus.boulders.drip'

class ActivityReminder(oracles.sisyphus.boulders.drip.ActivityReminder):

  def __init__(self, sisyphus):
    super().__init__(sisyphus)
    self.__now = datetime.datetime.utcnow()

  @property
  def now(self):
    return self.__now

  @now.setter
  def now(self, value):
    self.__now = value

  def _pick_template(self, template, users):
    return oracles.sisyphus.boulders.drip.Drip._pick_template(
      self, template, users)

def check_mail(emails, email, template):
  utils.check_mail(emails, email, template)
  assertEq(len(emails[0][1]['transactions']), 1)


class Metrics:

  def send(self, metrics, collection):
    # FIXME: test
    pass


with mongobox.MongoBox() as mongo:
  with Meta(mongo_port = mongo.port, enable_emails = False) as meta:
    emailer = DummyEmailer()
    metrics = Metrics()
    sisy = oracles.sisyphus.Sisyphus(mongo_port = mongo.port,
                                     emailer = emailer)
    # gestapo(sisy.mongo)
    reminder = ActivityReminder(sisy)

    def forward(duration):
      reminder.now += duration
      meta.now = reminder.now

    # Check nothing is sent with no users
    sisy.boulders_run()
    assert not emailer.emails

    # Create an activated user
    email = 'user@infinit.io'
    sender = user_register(meta, email)
    sender_device = meta._create_device(sender)
    device = sender_device['id']
    sender_device['id'] = uuid.UUID(sender_device['id'])
    meta.set_connection_status(
      sender['_id'], sender_device['id'], True, 'tropho-id')
    tid = transaction_create(meta, sender,
                             device = sender_device,
                             recipient_identifier ='ghost@infinit.io')
    meta._cloud_buffer(tid, sender)
    meta._transaction_update(tid, statuses['ghost_uploaded'],
                             device, None, sender)
    recipient_id = meta.transaction_view(tid)['recipient_id']
    sisy.boulders_run()
    assert not emailer.emails
    meta.set_connection_status(
      sender['_id'], sender_device['id'], False, 'tropho-id')
    forward(reminder.delay(0) * 1.1)

    # Check nothing is sent for a finished transaction
    sisy.boulders_run()
    assert not emailer.emails

    # Check nothing is sent too early
    meta.set_connection_status(
      sender['_id'], sender_device['id'], True, 'tropho-id')
    tid = transaction_create(meta, sender,
                             device = sender_device,
                             recipient_identifier = 'ghost@infinit.io')
    meta.set_connection_status(
      sender['_id'], sender_device['id'], False, 'tropho-id')
    forward(reminder.delay(0) * 0.5)
    sisy.boulders_run()
    assert not emailer.emails
    import sys

    # Check first reminder
    import sys
    forward(reminder.delay(0) * 1.1)
    sisy.boulders_run()
    check_mail(emailer.emails, email, 'Pending')

    # Check coming online resets
    forward(reminder.delay(0) * 2)
    meta.set_connection_status(
      sender['_id'], sender_device['id'], True, 'tropho-id')
    sisy.boulders_run()
    assert not emailer.emails
    meta.set_connection_status(
      sender['_id'], sender_device['id'], False, 'tropho-id')
    forward(reminder.delay(0) * 1.1)
    sisy.boulders_run()
    forward(reminder.delay(0) * 0.6)
    sisy.boulders_run()
    assert not emailer.emails
    forward(reminder.delay(0) * 0.6)
    sisy.boulders_run()
    check_mail(emailer.emails, email, 'Pending')
    forward(reminder.delay(1) * 0.9)
    sisy.boulders_run()
    assert not emailer.emails
    forward(reminder.delay(1) * 0.2)
    sisy.boulders_run()
    check_mail(emailer.emails, email, 'Pending')

    # Accept and check emails stop
    meta._cloud_buffer(tid, sender)
    meta._transaction_update(tid, statuses['ghost_uploaded'],
                             device, None, sender)
    forward(reminder.delay(0) * 1.1)
    sisy.boulders_run()
    assert not emailer.emails
    forward(reminder.delay(0) * 1.1)
    sisy.boulders_run()
    assert not emailer.emails

    # Check failed transfers don't trigger
    failer = user_register(meta, 'failer@infinit.io')
    for status in ['failed', 'rejected', 'canceled']:
      tid = transaction_create(meta, failer,
                               recipient_identifier = email)
      sisy.boulders_run()
      assert not emailer.emails
      forward(reminder.delay(0) * 1.1)
      meta._transaction_update(tid, statuses[status],
                               device, None, sender)
      forward(reminder.delay(0) * 1.1)
      sisy.boulders_run()
      check_no_mail(emailer.emails)

    # Check unaccepted transfers trigger too
    other = user_register(meta, 'other@infinit.io')
    other_device = meta._create_device(sender)
    tid = transaction_create(meta, other,
                             recipient_identifier = email,
                             device = other_device)
    sisy.boulders_run()
    assert not emailer.emails
    forward(reminder.delay(0) * 1.1)
    sisy.boulders_run()
    check_mail(emailer.emails, email, 'Pending')

    # Check the whole serie
    meta.set_connection_status(
      sender['_id'], sender_device['id'], True, 'tropho-id')
    sisy.boulders_run()
    meta.set_connection_status(
      sender['_id'], sender_device['id'], False, 'tropho-id')
    sisy.boulders_run()
    assert not emailer.emails
    for i in range(5):
      forward(reminder.delay(i) * 0.8)
      sisy.boulders_run()
      assert not emailer.emails
      forward(reminder.delay(i) * 0.4)
      sisy.boulders_run()
      check_mail(emailer.emails, email, 'Pending')
    forward(reminder.delay(i) * 2)
    sisy.boulders_run()
    assert not emailer.emails
