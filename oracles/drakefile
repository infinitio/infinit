import drake
import drake.python
import drake.templating

meta = None
trophonius = None
apertus = None

build = None
check = None
install = None

oracles = None

transaction_lib = None

def configure(production_build,
              elle,
              papier_python,
              boost = None,
              python3 = None,
              php = None,
              prefix = drake.Path('/usr/local'),
              cxx_toolkit = None,
              cxx_config = None,
              valgrind = None,
              valgrind_tests = False
):

  global transaction_lib
  global meta, trophonius, apertus, oracles
  global build, check, install

  for name in ('build', 'check', 'install'):
    globals()[name] = drake.Rule(name)

  cxx_toolkit = cxx_toolkit or drake.cxx.Toolkit()
  cxx_config = cxx_config or drake.cxx.Config()

  config = drake.cxx.Config()
  config += elle.elle.config
  config += elle.reactor.config
  config.add_local_include_path('src')
  local_cxx_config = cxx_config + config

  python = drake.nodes(
    'src/infinit/__init__.py',
    'src/infinit/oracles/__init__.py',
    'src/infinit/oracles/utils.py',
    'src/infinit/oracles/notification.py',
    'src/infinit/oracles/servers.py',
    'src/infinit/oracles/transaction.py',
  )
  python_built = drake.copy(python, 'lib/python', 'src')

  with drake.templating.Context(sources = python_built,
                                pythonpath = ('lib/python',)):
    sources = drake.nodes(
      'src/infinit/oracles/Transaction.cc.tmpl',
      'src/infinit/oracles/Transaction.hh.tmpl',
      'src/infinit/oracles/TransactionStatuses.hh.tmpl',
      'src/infinit/oracles/PeerTransaction.hxx',
      'src/infinit/oracles/PeerTransaction.cc',
      'src/infinit/oracles/PeerTransaction.hh',
      'src/infinit/oracles/LinkTransaction.cc',
      'src/infinit/oracles/LinkTransaction.hh',
      'src/infinit/oracles/PeerTransaction.hh',
    )

  elle_lib = drake.copy(elle.elle.lib_dynamic, 'lib', strip_prefix = True)

  lib_cxx_config = drake.cxx.Config(local_cxx_config)
  lib_cxx_config.lib_path_runtime('.')
  if cxx_toolkit.os in [drake.os.windows, drake.os.ios]:
    Library = drake.cxx.StaticLib
  else:
    Library = drake.cxx.DynLib

  servers = drake.nodes('src/infinit/oracles/fist-servers')
  build << drake.copy(servers, 'bin', strip_prefix = True)

  transaction_lib = Library('lib/transaction',
                            sources + [elle_lib],
                            cxx_toolkit,
                            lib_cxx_config)

  bottle = drake.nodes('bottle/bottle.py')

  mongobox = drake.nodes(
    'mongobox/mongobox/__init__.py',
    'mongobox/mongobox/mongobox.py',
    'mongobox/mongobox/utils.py',
    'mongobox/mongobox/nose_plugin.py',
  )
  mongobox = drake.python.Package(
    'mongobox',
    'lib/python',
    drake.copy(mongobox, 'lib/python', strip_prefix = 'mongobox'))

  sendwithus = drake.nodes(
    'sendwithus_python/sendwithus/__init__.py',
    'sendwithus_python/sendwithus/encoder.py',
    'sendwithus_python/sendwithus/version.py',
  )
  sendwithus = drake.python.Package(
    'sendwithus_python',
    'lib/python',
    drake.copy(sendwithus, 'lib/python',
               strip_prefix = 'sendwithus_python'))

  apns = drake.nodes(
    'PyAPNs/apns.py',
  )
  apns = drake.python.Package(
    'PyAPNs',
    'lib/python',
    drake.copy(apns, 'lib/python', strip_prefix = 'PyAPNs'))
  apns_cert = drake.node('aps.pem')
  apns_cert_prod = drake.node('aps_production.pem')

  meta = drake.include('meta',
                       production_build = production_build,
                       elle = elle,
                       papier_python = papier_python,
                       python_common = python_built,
                       mongobox = mongobox,
                       transaction_lib = transaction_lib,
                       transaction_config = config,
                       python3 = python3,
                       php = php,
                       apns = apns,
                       apns_cert = apns_cert,
                       apns_cert_prod = apns_cert_prod,
                       boost = boost,
                       prefix = prefix,
                       cxx_toolkit = cxx_toolkit,
                       cxx_config = cxx_config,
                       valgrind = valgrind,
                       valgrind_tests = valgrind_tests,
  )

  trophonius = drake.include('trophonius',
                             elle = elle,
                             python_common = python_built,
                             boost = boost,
                             python3 = python3,
                             transaction_lib = transaction_lib,
                             transaction_config = config,
                             prefix = prefix,
                             meta_client = meta.client,
                             cxx_toolkit = cxx_toolkit,
                             cxx_config = cxx_config,
                             valgrind = valgrind,
                             valgrind_tests = valgrind_tests,
  )

  apertus = drake.include('apertus',
                          elle = elle,
                          reactor = elle.reactor,
                          protocol = elle.protocol,
                          meta_client = meta.client,
                          python3 = python3,
                          boost = boost,
                          prefix = prefix,
                          cxx_toolkit = cxx_toolkit,
                          cxx_config = cxx_config,
                          valgrind = valgrind,
                          valgrind_tests = valgrind_tests,
  )

  sisyphus = drake.include('sisyphus',
                           prefix = prefix,
                           python = python3,
                           bottle = bottle,
                           mongobox = mongobox,
                           sendwithus = sendwithus,
                           elle = elle,
                           meta = meta.server.meta,
                           python_common = python_built,
                           apns = apns,
                           apns_cert = apns_cert,
                           apns_cert_prod = apns_cert_prod,
                           production_build = production_build,
  )

  for name in ('build', 'check', 'install'):
    for oracle in [meta, trophonius, apertus, sisyphus]:
      globals()[name] << getattr(oracle, name)

  build << transaction_lib
  build << python_built

  if python3 is not None:
    oracles = []

    oracles += drake.copy(trophonius.server.python, '.',
                          strip_prefix='trophonius/server')
    oracles += drake.copy(apertus.server.python, '.',
                          strip_prefix='apertus/server')
    oracles += drake.copy(meta.server.python, '.',
                          strip_prefix = 'meta/server')
    oracles.append(drake.copy(elle.reactor.python_lib, 'lib/python',
                              strip_prefix = True))
    oracles.append(mongobox)
    oracles.append(sendwithus)
    build << oracles
