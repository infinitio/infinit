import drake
import drake.templating

meta = None
trophonius = None
apertus = None

build = None
check = None
install = None

oracles = None

transaction_lib = None

def configure(elle,
              papier_python,
              boost = None,
              python3 = None,
              prefix = drake.Path('/usr/local'),
              cxx_toolkit = None,
              cxx_config = None,
              valgrind = None):

  global transaction_lib
  global meta, trophonius, apertus, oracles
  global build, check, install

  for name in ('build', 'check', 'install'):
    globals()[name] = drake.Rule(name)

  cxx_toolkit = cxx_toolkit or drake.cxx.Toolkit()
  cxx_config = cxx_config or drake.cxx.Config()

  local_cxx_config = drake.cxx.Config(cxx_config)
  local_cxx_config += elle.elle.config
  local_cxx_config += elle.reactor.config
  local_cxx_config.add_local_include_path('src')

  python = drake.nodes(
    'src/infinit/__init__.py',
    'src/infinit/oracles/__init__.py',
    'src/infinit/oracles/notification.py',
    'src/infinit/oracles/servers.py',
    'src/infinit/oracles/transaction.py',
  )
  python_built = drake.copy(python, 'lib/python', 'src')

  with drake.templating.Context(sources = python_built,
                                pythonpath = ('lib/python',)):
    sources = drake.nodes(
      'src/infinit/oracles/Transaction.cc.tmpl',
      'src/infinit/oracles/Transaction.hh.tmpl',
      'src/infinit/oracles/PeerTransaction.hxx',
      'src/infinit/oracles/PeerTransaction.cc',
      'src/infinit/oracles/PeerTransaction.hh',
      'src/infinit/oracles/LinkTransaction.cc',
      'src/infinit/oracles/LinkTransaction.hh',
      'src/infinit/oracles/PeerTransaction.hh',
    )

  elle_lib = drake.copy(elle.elle.lib_dynamic, 'lib', strip_prefix = True)

  lib_cxx_config = drake.cxx.Config(local_cxx_config)
  lib_cxx_config.lib_path_runtime('.')
  if cxx_toolkit.os is drake.os.windows:
    Library = drake.cxx.StaticLib
  else:
    Library = drake.cxx.DynLib

  servers = drake.nodes('src/infinit/oracles/fist-servers')
  build << drake.copy(servers, 'bin', strip_prefix = True)

  transaction_lib = Library('lib/transaction',
                            sources + [elle_lib],
                            cxx_toolkit,
                            lib_cxx_config)

  meta = drake.include('meta',
                       elle = elle,
                       papier_python = papier_python,
                       python_common = python_built,
                       transaction_lib = transaction_lib,
                       python3 = python3,
                       boost = boost,
                       prefix = prefix,
                       cxx_toolkit = cxx_toolkit,
                       cxx_config = local_cxx_config)

  trophonius = drake.include('trophonius',
                             elle = elle,
                             python_common = python_built,
                             boost = boost,
                             python3 = python3,
                             transaction_lib = transaction_lib,
                             prefix = prefix,
                             meta_client = meta.client,
                             cxx_toolkit = cxx_toolkit,
                             cxx_config = local_cxx_config,
                             valgrind = valgrind,
  )

  apertus = drake.include('apertus',
                          elle = elle,
                          reactor = elle.reactor,
                          protocol = elle.protocol,
                          meta_client = meta.client,
                          python3 = python3,
                          boost = boost,
                          prefix = prefix,
                          cxx_toolkit = cxx_toolkit,
                          cxx_config = cxx_config)

  for name in ('build', 'check', 'install'):
    for oracle in [meta, trophonius, apertus]:
      globals()[name] << getattr(oracle, name)

  build << transaction_lib
  build << python_built

  oracles = []

  oracles += drake.copy(trophonius.server.python, '.',
                        strip_prefix='trophonius/server')
  oracles += drake.copy(apertus.server.python, '.',
                        strip_prefix='apertus/server')
  oracles += drake.copy(meta.server.python, '.',
                        strip_prefix = 'meta/server')
  oracles.append(drake.copy(elle.reactor.python_lib, 'lib/python',
                            strip_prefix = True))
  mongobox = drake.nodes(
    'mongobox/mongobox/__init__.py',
    'mongobox/mongobox/mongobox.py',
    'mongobox/mongobox/utils.py',
    'mongobox/mongobox/nose_plugin.py',
  )
  oracles += drake.copy(mongobox, 'lib/python',
                        strip_prefix='mongobox')
  build << oracles
