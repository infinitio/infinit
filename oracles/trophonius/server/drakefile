import sys

import drake
import drake.cxx
import drake.valgrind

build = None
install = None
check = None
tests = None
python_lib = None
python = None

def configure(elle,
              meta_client,
              boost,
              python3 = None,
              prefix = drake.Path('/usr/local'),
              cxx_toolkit = None,
              cxx_config = None,
              valgrind = None,
              valgrind_tests = False,
):

  # Rules
  global build, check, install, tests, python_lib, python

  cxx_toolkit = cxx_toolkit or drake.cxx.Toolkit()
  cxx_config = cxx_config or drake.cxx.Config()

  local_cxx_config = drake.cxx.Config(cxx_config)
  if cxx_toolkit.os in [drake.os.windows, drake.os.ios]:
    if cxx_toolkit.os is not drake.os.ios:
      boost_program_options = drake.cxx.Config(boost.config_program_options(static = True))
    if python3 is not None:
      boost_python = drake.cxx.Config(boost.config_python(static = True))
    boost_system = drake.cxx.Config(boost.config_system(static = True))
    boost_test = drake.cxx.Config(boost.config_test(static = True))
  else:
    boost_program_options = drake.cxx.Config(boost.config_program_options(link = False))
    boost_program_options.library_add(
      drake.copy(boost.program_options_dynamic,
                 'lib', strip_prefix = True))
    boost_python = drake.cxx.Config(boost.config_python(link = False))
    boost_python.library_add(
      drake.copy(boost.python_dynamic,
                 'lib', strip_prefix = True))
    boost_system = drake.cxx.Config(boost.config_system(link = False))
    boost_system.library_add(
      drake.copy(boost.system_dynamic,
                 'lib', strip_prefix = True))
    boost_test = drake.cxx.Config(boost.config_test(link = False))
    boost_test.library_add(
      drake.copy(boost.test_dynamic,
                 'lib', strip_prefix = True))
  if cxx_toolkit.os is not drake.os.ios:
    local_cxx_config += boost_program_options
  local_cxx_config += boost_system
  local_cxx_config += elle.elle.config
  local_cxx_config += elle.reactor.config
  local_cxx_config += meta_client.config
  local_cxx_config.add_local_include_path('src')
  local_cxx_config.lib_path_runtime('.')

  # SSL
  # FIXME: remove as soon as ssl is not leaked by elle
  ssl_libs = drake.copy((elle.openssl_lib_ssl,
                         elle.openssl_lib_crypto),
                        'lib', strip_prefix = True)


  elle_lib = drake.copy(elle.elle.lib_dynamic, 'lib', strip_prefix = True)
  reactor_lib = drake.copy(elle.reactor.lib_dynamic, 'lib', strip_prefix = True)
  meta_client_lib = drake.copy(meta_client.lib, 'lib', strip_prefix = True)

  sources = drake.nodes(
    'src/infinit/oracles/trophonius/server/Client.cc',
    'src/infinit/oracles/trophonius/server/Client.hh',
    'src/infinit/oracles/trophonius/server/Meta.cc',
    'src/infinit/oracles/trophonius/server/Meta.hh',
    'src/infinit/oracles/trophonius/server/User.cc',
    'src/infinit/oracles/trophonius/server/User.hh',
    'src/infinit/oracles/trophonius/server/Trophonius.cc',
    'src/infinit/oracles/trophonius/server/Trophonius.hh',
    'src/infinit/oracles/trophonius/server/fwd.hh',
    'src/infinit/oracles/trophonius/server/exceptions.cc',
    'src/infinit/oracles/trophonius/server/exceptions.hh',
  )

  lib = drake.cxx.DynLib('lib/trophonius',
                         sources + [elle_lib, reactor_lib, meta_client_lib],
                         cxx_toolkit,
                         local_cxx_config)

  exe_cxx_config = drake.cxx.Config(local_cxx_config)
  exe_cxx_config.lib_path_runtime('../lib')

  exe_sources = drake.nodes(
    'src/main.cc',
  )

  trophonius = drake.cxx.Executable(
    'bin/trophonius',
    # FIXME: remove SSL if elle stop leaking it.
    exe_sources + [lib, elle_lib,
                   reactor_lib, meta_client_lib] + ssl_libs,
    cxx_toolkit,
    exe_cxx_config)

  build = drake.Rule('build')
  build << trophonius

  if python3 is not None:
    python_sources = drake.nodes(
      'src/infinit/oracles/trophonius/server/python.cc',
    )
    python_cxx_config = drake.cxx.Config(local_cxx_config)
    python_cxx_config.lib_path_runtime('../../../..')
    python_cxx_config += python3
    python_cxx_config += boost_python
    datetime = drake.copy(elle.elle.python_plugin_datetime,
                          'lib', True)
    python_lib = drake.cxx.Module(
      'lib/python/infinit/oracles/trophonius/server',
      python_sources + [lib, datetime] + ssl_libs,
      cxx_toolkit, python_cxx_config)
    drake.Rule('python') << python_lib
    python = [python_lib,
              drake.touch('lib/python/infinit/oracles/trophonius/__init__.py'),
    ]
    build << python
    build << drake.touch('lib/python/infinit/__init__.py')
    build << drake.touch('lib/python/infinit/oracles/__init__.py')

  ## ----- ##
  ## Tests ##
  ## ----- ##

  check = drake.TestSuite('check')
  tests = drake.Rule('tests')

  cxx_config_tests = drake.cxx.Config(local_cxx_config)
  cxx_config_tests.lib_path_runtime('../lib')
  cxx_config_tests += boost_test
  if valgrind is not None:
    cxx_config_tests.define('VALGRIND')
  for name in ['trophonius']:
    test = drake.cxx.Executable(
      'tests/%s' % name,
      drake.nodes('tests/%s.cc' % name) + [lib,
                                           elle_lib,
                                           reactor_lib] + ssl_libs,
      cxx_toolkit,
      cxx_config_tests)
    tests << test
    if valgrind_tests:
      runner = drake.valgrind.ValgrindRunner(exe = test,
                                             valgrind = valgrind)
    else:
      runner = drake.Runner(exe = test)
    runner.reporting = drake.Runner.Reporting.on_failure
    check << runner.status

  ## ------- ##
  ## Install ##
  ## ------- ##

  install = drake.Rule('install')
  install << drake.install(trophonius, prefix)

  git = drake.git.Git()
  with drake.templating.Context(content = {
      'version': git.description(),
      'version_major': git.version().split('.')[0],
      'version_minor': git.version().split('.')[1],
      'trophonius_path': '/opt/infinit/trophonius/bin/trophonius',
  }):
    drake.node('control.tmpl')
    drake.node('etc/trophonius.conf.tmpl')

  configuration = drake.nodes(
    'etc/trophonius.conf',
    'etc/init.d/trophonius',
    'etc/logrotate.d/trophonius',
    'etc/rsyslog.d/trophonius.conf',
  )
  package = [drake.copy(trophonius, 'debian/opt/infinit/trophonius')]
  package += drake.copy(configuration, 'debian')
  package += drake.copy(drake.nodes('control'),
                        'debian/DEBIAN')
  debian = drake.Rule('debian')
  debian << drake.debian.Packager(
    'fist-trophonius_%s_amd64.deb' % git.description(),
    package, 'debian', preload = elle.elle.dpkg_preload).package
