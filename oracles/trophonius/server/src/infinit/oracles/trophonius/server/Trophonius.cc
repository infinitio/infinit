#include <boost/functional/hash.hpp>

#include <elle/log.hh>
#include <elle/network/hostname.hh>
#include <elle/os/environ.hh>

#include <reactor/scheduler.hh>
#include <reactor/exception.hh>
#include <reactor/network/exception.hh>

#include <infinit/oracles/trophonius/server/Meta.hh>
#include <infinit/oracles/trophonius/server/User.hh>
#include <infinit/oracles/trophonius/server/Trophonius.hh>

#include <boost/filesystem.hpp>
#include <boost/uuid/random_generator.hpp>
#include <boost/uuid/uuid_io.hpp>

ELLE_LOG_COMPONENT("infinit.oracles.trophonius.server.Trophonius")

extern const std::vector<char> server_certificate;
extern const std::vector<char> server_key;
extern const std::vector<char> server_dh1024;

namespace infinit
{
  namespace oracles
  {
    namespace trophonius
    {
      namespace server
      {
        UnknownClient::UnknownClient(std::string const& user_id,
                                     boost::uuids::uuid const& device_id):
          elle::Exception(elle::sprintf("Unknown client: %s:%s",
                                        user_id, device_id))
        {}

        static
        boost::uuids::uuid
        generate_uuid()
        {
          boost::mt19937 rng;
          rng.seed(std::time(0));
          boost::uuids::basic_random_generator<boost::mt19937> gen(&rng);
          return gen();
        }

        Trophonius::Trophonius(
          int port_ssl,
          int port_tcp,
          std::string const& meta_protocol,
          std::string const& meta_host,
          int meta_port,
          int notifications_port,
          boost::posix_time::time_duration const& user_ping_period,
          boost::posix_time::time_duration const& meta_ping_period,
          boost::posix_time::time_duration const& user_auth_max_time,
          bool meta_fatal,
          boost::optional<std::string> zone):
          Waitable("trophonius"),
          _certificate(nullptr),
          _server_ssl(nullptr),
          _server_tcp(nullptr),
          _port_ssl(port_ssl),
          _port_tcp(port_tcp),
          _notifications(),
          _accepter_ssl(nullptr),
          _accepter_tcp(nullptr),
          _meta_fatal(meta_fatal),
          _meta_accepter(
            elle::sprintf("%s meta accepter", *this),
            std::bind(&Trophonius::_serve_notifier, std::ref(*this))),
          _uuid(generate_uuid()),
          _meta(meta_protocol, meta_host, meta_port),
          _meta_pinger(
            reactor::Scheduler::scheduler()->every(
              [&]
              {
                this->_ready.wait();
                try
                {
                  this->_meta_register();
                }
                catch (elle::Exception const& e)
                {
                  ELLE_ERR("%s: unable to ping: %s", *this, e.what());
                }
              },
              "pinger",
              meta_ping_period
              )
            ),
          _terminating(false),
          _ping_period(user_ping_period),
          _user_auth_max_time(user_auth_max_time),
          _remove_lock(),
          _zone(zone)
        {
 #ifndef INFINIT_WINDOWS
          if (!elle::os::getenv("TROPHONIUS_LISTEN_SIGNALS","").empty())
            reactor::scheduler().signal_handle(SIGUSR1,
              std::bind(&Trophonius::disconnect_all_users, this));
 #endif
          elle::SafeFinally kill_accepters{
            [&]
            {
              this->_accepter_ssl->terminate_now();
              this->_accepter_tcp->terminate_now();
              this->_meta_accepter.terminate_now();
              this->_meta_pinger->terminate_now();
              this->_signal();
            }
          };

          try
          {
            this->_certificate.reset(new reactor::network::SSLCertificate(
             server_certificate, server_key, server_dh1024));
            ELLE_DEBUG("%s: loaded SSL certificate", *this);
            this->_server_ssl.reset(new reactor::network::SSLServer(
              std::move(this->_certificate)));
            this->_server_ssl->shutdown_asynchronous(true);
            this->_server_ssl->listen(this->_port_ssl);
            this->_port_ssl = this->_server_ssl->port();
            this->_accepter_ssl.reset(new reactor::Thread(
              *reactor::Scheduler::scheduler(),
              elle::sprintf("%s user SSL accepter", *this),
              std::bind(&Trophonius::_serve,
                        std::ref(*this),
                        std::ref(*this->_server_ssl))));
            ELLE_LOG("%s: listen for SSL users on port %s", *this,
                     this->port_ssl());
            this->_server_tcp.reset(new reactor::network::TCPServer{});
            this->_server_tcp->listen(this->_port_tcp);
            this->_port_tcp = this->_server_tcp->port();
            this->_accepter_tcp.reset(new reactor::Thread(
              *reactor::Scheduler::scheduler(),
              elle::sprintf("%s user TCP accepter", *this),
              std::bind(&Trophonius::_serve,
                        std::ref(*this),
                        std::ref(*this->_server_tcp))));
            ELLE_LOG("%s: listen for TCP users on port %s", *this,
                     this->port_tcp());
          }
          catch (...)
          {
            ELLE_ERR("%s: unable to listen (users): %s",
                     *this, elle::exception_string());
            throw;
          }

          try
          {
            this->_notifications.listen(notifications_port);
            ELLE_LOG("%s: listen for meta on port %s",
                     *this, this->notification_port());
          }
          catch (...)
          {
            ELLE_ERR("%s: unable to listen notifications: %s",
                     *this, elle::exception_string());
            throw;
          }

          ELLE_LOG("%s: register to meta", *this)
            try
            {
              this->_meta_register();
            }
            catch (...)
            {
              if (this->_meta_fatal)
                throw;
              ELLE_WARN("%s: couldn't register to meta: %s",
                        *this, elle::exception_string());
            }
          this->_ready.open();

          kill_accepters.abort();
        }

        void
        Trophonius::_meta_register()
        {
          this->_meta.register_trophonius(
            this->_uuid, this->notification_port(),
            this->port_tcp(),
            this->port_ssl(),
            elle::network::hostname(),
            this->_users.size(),
            this->_zone);
        }

        void
        Trophonius::stop()
        {
          this->_signal();
        }

        Trophonius::~Trophonius()
        {
          if (!this->_terminating)
            terminate();
        }

        void
        Trophonius::terminate()
        {
          this->_terminating = true;
          this->_accepter_ssl->terminate_now();
          this->_accepter_tcp->terminate_now();
          this->_meta_accepter.terminate_now();
          this->_meta_pinger->terminate_now();

          disconnect_all_users();

          while (!this->_metas.empty())
          {
            // Remove the client from the set first or it will try to clean
            // itself up.
            auto it = this->_metas.begin();
            auto client = *it;
            this->_metas.erase(it);
            client->terminate();
            delete client;
          }

          // Make sure a client is not being removed the individual way in
          // Trophonius::client_remove.
          reactor::Lock(this->_remove_lock.write());

          try
          {
            this->_meta.unregister_trophonius(this->_uuid);
            ELLE_LOG("%s: unregistered from meta", *this);
          }
          catch (...)
          {
            ELLE_WARN("%s: unable to unregister from meta: %s",
                      *this, elle::exception_string());
            if (this->_meta_fatal)
              throw;
          }
        }

        /*-------.
        | Server |
        `-------*/

        int
        Trophonius::port_ssl() const
        {
          return this->_server_ssl->port();
        }

        int
        Trophonius::port_tcp() const
        {
          return this->_server_tcp->port();
        }

        int
        Trophonius::notification_port() const
        {
          return this->_notifications.port();
        }

        void
        Trophonius::_serve(reactor::network::Server& server)
        {
          while (true)
          {
            try
            {
              std::unique_ptr<reactor::network::Socket> socket(server.accept());
              auto user = new User(*this, std::move(socket));
              this->_users_pending.insert(user);
            }
            catch (reactor::network::SSLHandshakeError const& e)
            {
              ELLE_TRACE("%s: refuse bad SSL handshake: %s", *this, e);
            }
          }
        }

        User&
        Trophonius::user(std::string const& user_id,
                         boost::uuids::uuid const& device)
        {
          auto& index = this->_users.get<1>();
          boost::tuple<std::string, boost::uuids::uuid> key(user_id, device);
          auto it = index.find(key);
          if (it == index.end())
            throw UnknownClient(user_id, device);
          return **it;
        }

        void
        Trophonius::_serve_notifier()
        {
          while (true)
          {
            std::unique_ptr<reactor::network::Socket> socket(
              this->_notifications.accept());
            this->_metas.emplace(new Meta(*this, std::move(socket)));
          }
        }

        /*--------.
        | Clients |
        `--------*/

        // std::size_t
        // Trophonius::hash_user_device::operator()(User* user) const
        // {
        //   auto key = std::make_pair(user->user_id(), user->device_id());
        //   boost::hash<decltype(key)> hasher;
        //   return hasher(key);
        // }

        void
        Trophonius::client_remove(Client& c)
        {
          reactor::Lock lock(this->_remove_lock);

          // Remove the client from the set first to ensure other cleanup does
          // not duplicate this.
          if (this->_users.erase(static_cast<User*>(&c)) ||
              this->_users_pending.erase(static_cast<User*>(&c)))
          {
            // Terminate all handlers for the clients. We are most likely
            // invoked by one of those handler, so they must take care of not
            // commiting suicide.
            c.terminate();
            // Unregister the client from meta.
            static_cast<User&>(c).unregister();
            // Delete the client later since we are probably since inside one of
            // its handlers and it would cause premature destruction of this
            // thread.
            reactor::run_later(
              elle::sprintf("remove client %s", c),
              [&c] {delete &c;});
          }
          else if (this->_metas.erase(static_cast<Meta*>(&c)))
          {
            c.terminate();
            reactor::run_later(
              elle::sprintf("remove client %s", c),
              [&c] {delete &c;});
          }
        }
        void
        Trophonius::disconnect_all_users()
        {
          while (!this->_users.empty())
          {
            // Remove the client from the set first or it will try to clean
            // itself up.
            auto it = this->_users.begin();
            auto client = *it;
            this->_users.erase(it);
            client->terminate();
            delete client;
          }
          while (!this->_users_pending.empty())
          {
            // Remove the client from the set first or it will try to clean
            // itself up.
            auto it = this->_users_pending.begin();
            auto client = *it;
            this->_users_pending.erase(it);
            client->terminate();
            delete client;
          }
        }
        /*----------.
        | Printable |
        `----------*/

        void
        Trophonius::print(std::ostream& stream) const
        {
          stream << "Trophonius";
        }
      }
    }
  }
}

const std::vector<char> server_certificate =
{
  0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43,
  0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d,
  0x2d, 0x2d, 0x2d, 0x0a, 0x4d, 0x49, 0x49, 0x47, 0x37, 0x6a, 0x43, 0x43,
  0x42, 0x4e, 0x61, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x4a,
  0x41, 0x4f, 0x7a, 0x61, 0x78, 0x49, 0x4b, 0x32, 0x4a, 0x6f, 0x67, 0x32,
  0x4d, 0x41, 0x30, 0x47, 0x43, 0x53, 0x71, 0x47, 0x53, 0x49, 0x62, 0x33,
  0x44, 0x51, 0x45, 0x42, 0x42, 0x51, 0x55, 0x41, 0x4d, 0x49, 0x47, 0x71,
  0x4d, 0x51, 0x73, 0x77, 0x43, 0x51, 0x59, 0x44, 0x0a, 0x56, 0x51, 0x51,
  0x47, 0x45, 0x77, 0x4a, 0x47, 0x55, 0x6a, 0x45, 0x57, 0x4d, 0x42, 0x51,
  0x47, 0x41, 0x31, 0x55, 0x45, 0x43, 0x42, 0x4d, 0x4e, 0x53, 0x57, 0x78,
  0x6c, 0x4c, 0x57, 0x52, 0x6c, 0x4c, 0x55, 0x5a, 0x79, 0x59, 0x57, 0x35,
  0x6a, 0x5a, 0x54, 0x45, 0x4f, 0x4d, 0x41, 0x77, 0x47, 0x41, 0x31, 0x55,
  0x45, 0x42, 0x78, 0x4d, 0x46, 0x55, 0x47, 0x46, 0x79, 0x61, 0x58, 0x4d,
  0x78, 0x0a, 0x45, 0x7a, 0x41, 0x52, 0x42, 0x67, 0x4e, 0x56, 0x42, 0x41,
  0x6f, 0x54, 0x43, 0x6b, 0x6c, 0x75, 0x5a, 0x6d, 0x6c, 0x75, 0x61, 0x58,
  0x51, 0x75, 0x61, 0x57, 0x38, 0x78, 0x4d, 0x54, 0x41, 0x76, 0x42, 0x67,
  0x4e, 0x56, 0x42, 0x41, 0x4d, 0x55, 0x4b, 0x48, 0x52, 0x79, 0x62, 0x33,
  0x42, 0x6f, 0x62, 0x32, 0x35, 0x70, 0x64, 0x58, 0x4d, 0x75, 0x4b, 0x69,
  0x34, 0x71, 0x4c, 0x6d, 0x46, 0x77, 0x0a, 0x61, 0x53, 0x35, 0x77, 0x63,
  0x6d, 0x39, 0x6b, 0x64, 0x57, 0x4e, 0x30, 0x61, 0x57, 0x39, 0x75, 0x4c,
  0x6d, 0x6c, 0x75, 0x5a, 0x6d, 0x6c, 0x75, 0x61, 0x58, 0x51, 0x75, 0x61,
  0x57, 0x38, 0x78, 0x4b, 0x7a, 0x41, 0x70, 0x42, 0x67, 0x6b, 0x71, 0x68,
  0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x43, 0x51, 0x45, 0x57, 0x48,
  0x47, 0x46, 0x6b, 0x62, 0x57, 0x6c, 0x75, 0x4b, 0x32, 0x4e, 0x6c, 0x0a,
  0x63, 0x6e, 0x52, 0x70, 0x5a, 0x6d, 0x6c, 0x6a, 0x59, 0x58, 0x52, 0x6c,
  0x51, 0x47, 0x6c, 0x75, 0x5a, 0x6d, 0x6c, 0x75, 0x61, 0x58, 0x51, 0x75,
  0x61, 0x57, 0x38, 0x77, 0x48, 0x68, 0x63, 0x4e, 0x4d, 0x54, 0x51, 0x77,
  0x4d, 0x54, 0x45, 0x30, 0x4d, 0x54, 0x51, 0x79, 0x4d, 0x7a, 0x45, 0x32,
  0x57, 0x68, 0x63, 0x4e, 0x4d, 0x6a, 0x51, 0x77, 0x4d, 0x54, 0x45, 0x30,
  0x4d, 0x54, 0x51, 0x79, 0x0a, 0x4d, 0x7a, 0x45, 0x32, 0x57, 0x6a, 0x43,
  0x42, 0x71, 0x6a, 0x45, 0x4c, 0x4d, 0x41, 0x6b, 0x47, 0x41, 0x31, 0x55,
  0x45, 0x42, 0x68, 0x4d, 0x43, 0x52, 0x6c, 0x49, 0x78, 0x46, 0x6a, 0x41,
  0x55, 0x42, 0x67, 0x4e, 0x56, 0x42, 0x41, 0x67, 0x54, 0x44, 0x55, 0x6c,
  0x73, 0x5a, 0x53, 0x31, 0x6b, 0x5a, 0x53, 0x31, 0x47, 0x63, 0x6d, 0x46,
  0x75, 0x59, 0x32, 0x55, 0x78, 0x44, 0x6a, 0x41, 0x4d, 0x0a, 0x42, 0x67,
  0x4e, 0x56, 0x42, 0x41, 0x63, 0x54, 0x42, 0x56, 0x42, 0x68, 0x63, 0x6d,
  0x6c, 0x7a, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51,
  0x51, 0x4b, 0x45, 0x77, 0x70, 0x4a, 0x62, 0x6d, 0x5a, 0x70, 0x62, 0x6d,
  0x6c, 0x30, 0x4c, 0x6d, 0x6c, 0x76, 0x4d, 0x54, 0x45, 0x77, 0x4c, 0x77,
  0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x46, 0x43, 0x68, 0x30, 0x63, 0x6d,
  0x39, 0x77, 0x0a, 0x61, 0x47, 0x39, 0x75, 0x61, 0x58, 0x56, 0x7a, 0x4c,
  0x69, 0x6f, 0x75, 0x4b, 0x69, 0x35, 0x68, 0x63, 0x47, 0x6b, 0x75, 0x63,
  0x48, 0x4a, 0x76, 0x5a, 0x48, 0x56, 0x6a, 0x64, 0x47, 0x6c, 0x76, 0x62,
  0x69, 0x35, 0x70, 0x62, 0x6d, 0x5a, 0x70, 0x62, 0x6d, 0x6c, 0x30, 0x4c,
  0x6d, 0x6c, 0x76, 0x4d, 0x53, 0x73, 0x77, 0x4b, 0x51, 0x59, 0x4a, 0x4b,
  0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x0a, 0x41, 0x51, 0x6b, 0x42,
  0x46, 0x68, 0x78, 0x68, 0x5a, 0x47, 0x31, 0x70, 0x62, 0x69, 0x74, 0x6a,
  0x5a, 0x58, 0x4a, 0x30, 0x61, 0x57, 0x5a, 0x70, 0x59, 0x32, 0x46, 0x30,
  0x5a, 0x55, 0x42, 0x70, 0x62, 0x6d, 0x5a, 0x70, 0x62, 0x6d, 0x6c, 0x30,
  0x4c, 0x6d, 0x6c, 0x76, 0x4d, 0x49, 0x49, 0x43, 0x49, 0x6a, 0x41, 0x4e,
  0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42,
  0x0a, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x67, 0x38,
  0x41, 0x4d, 0x49, 0x49, 0x43, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x67, 0x45,
  0x41, 0x37, 0x38, 0x75, 0x37, 0x57, 0x62, 0x4c, 0x48, 0x75, 0x49, 0x49,
  0x38, 0x65, 0x78, 0x78, 0x69, 0x41, 0x77, 0x4c, 0x4b, 0x6b, 0x4e, 0x39,
  0x33, 0x46, 0x31, 0x59, 0x45, 0x69, 0x54, 0x6f, 0x62, 0x56, 0x43, 0x39,
  0x77, 0x6c, 0x4a, 0x65, 0x44, 0x0a, 0x72, 0x68, 0x4c, 0x31, 0x2b, 0x4d,
  0x54, 0x49, 0x73, 0x69, 0x79, 0x33, 0x47, 0x62, 0x5a, 0x43, 0x52, 0x5a,
  0x6b, 0x54, 0x56, 0x78, 0x74, 0x46, 0x75, 0x6f, 0x46, 0x6c, 0x47, 0x38,
  0x34, 0x76, 0x50, 0x42, 0x67, 0x44, 0x4f, 0x4c, 0x48, 0x31, 0x57, 0x63,
  0x66, 0x34, 0x6d, 0x54, 0x65, 0x56, 0x75, 0x4f, 0x65, 0x51, 0x78, 0x6a,
  0x75, 0x5a, 0x43, 0x71, 0x66, 0x4a, 0x39, 0x55, 0x79, 0x55, 0x0a, 0x73,
  0x62, 0x67, 0x55, 0x58, 0x56, 0x56, 0x66, 0x58, 0x6c, 0x55, 0x37, 0x41,
  0x59, 0x44, 0x59, 0x52, 0x61, 0x6c, 0x75, 0x68, 0x6f, 0x31, 0x6a, 0x4e,
  0x51, 0x74, 0x45, 0x5a, 0x44, 0x43, 0x63, 0x73, 0x75, 0x2b, 0x62, 0x59,
  0x50, 0x75, 0x4f, 0x2f, 0x66, 0x50, 0x33, 0x48, 0x51, 0x2f, 0x76, 0x6d,
  0x4b, 0x79, 0x71, 0x4c, 0x6d, 0x76, 0x53, 0x55, 0x66, 0x76, 0x34, 0x71,
  0x35, 0x6f, 0x69, 0x0a, 0x44, 0x6f, 0x75, 0x6e, 0x48, 0x61, 0x61, 0x57,
  0x33, 0x36, 0x4e, 0x33, 0x6b, 0x51, 0x32, 0x35, 0x6a, 0x30, 0x76, 0x77,
  0x52, 0x2b, 0x31, 0x71, 0x54, 0x47, 0x58, 0x37, 0x74, 0x72, 0x53, 0x51,
  0x47, 0x51, 0x2b, 0x48, 0x4a, 0x65, 0x31, 0x42, 0x68, 0x52, 0x67, 0x6c,
  0x74, 0x70, 0x68, 0x35, 0x38, 0x48, 0x2f, 0x5a, 0x66, 0x64, 0x74, 0x38,
  0x36, 0x62, 0x77, 0x69, 0x57, 0x31, 0x6b, 0x71, 0x0a, 0x45, 0x66, 0x6f,
  0x32, 0x58, 0x62, 0x77, 0x73, 0x64, 0x4a, 0x68, 0x4c, 0x46, 0x61, 0x75,
  0x34, 0x55, 0x6d, 0x68, 0x64, 0x57, 0x52, 0x68, 0x36, 0x70, 0x4b, 0x71,
  0x6b, 0x2b, 0x43, 0x37, 0x49, 0x6e, 0x70, 0x47, 0x35, 0x33, 0x65, 0x37,
  0x4c, 0x4e, 0x76, 0x6e, 0x31, 0x4c, 0x35, 0x43, 0x6c, 0x4b, 0x72, 0x4b,
  0x6f, 0x4a, 0x54, 0x44, 0x78, 0x6e, 0x30, 0x53, 0x42, 0x64, 0x77, 0x42,
  0x76, 0x0a, 0x6a, 0x46, 0x73, 0x2f, 0x4c, 0x39, 0x4f, 0x77, 0x74, 0x6f,
  0x31, 0x47, 0x6d, 0x42, 0x53, 0x79, 0x4e, 0x6f, 0x35, 0x32, 0x6a, 0x45,
  0x30, 0x37, 0x49, 0x72, 0x39, 0x34, 0x43, 0x52, 0x45, 0x64, 0x74, 0x33,
  0x50, 0x53, 0x78, 0x68, 0x4d, 0x4b, 0x65, 0x55, 0x50, 0x6c, 0x61, 0x30,
  0x77, 0x30, 0x35, 0x67, 0x6d, 0x69, 0x71, 0x74, 0x30, 0x4e, 0x6e, 0x68,
  0x4a, 0x30, 0x4e, 0x34, 0x65, 0x58, 0x0a, 0x58, 0x4d, 0x30, 0x4f, 0x65,
  0x57, 0x4d, 0x34, 0x68, 0x4c, 0x6b, 0x78, 0x38, 0x34, 0x6f, 0x52, 0x6a,
  0x35, 0x6d, 0x4d, 0x37, 0x55, 0x37, 0x4a, 0x44, 0x49, 0x36, 0x59, 0x59,
  0x45, 0x75, 0x6d, 0x52, 0x46, 0x59, 0x41, 0x4d, 0x75, 0x47, 0x66, 0x6b,
  0x47, 0x59, 0x68, 0x57, 0x44, 0x4b, 0x61, 0x78, 0x75, 0x6d, 0x4b, 0x6d,
  0x64, 0x57, 0x30, 0x4c, 0x67, 0x6d, 0x31, 0x42, 0x32, 0x65, 0x55, 0x0a,
  0x47, 0x56, 0x75, 0x7a, 0x6e, 0x6b, 0x55, 0x73, 0x4c, 0x78, 0x6a, 0x72,
  0x75, 0x58, 0x34, 0x51, 0x4e, 0x6c, 0x49, 0x4b, 0x52, 0x34, 0x44, 0x63,
  0x77, 0x46, 0x42, 0x79, 0x65, 0x58, 0x4c, 0x6b, 0x78, 0x54, 0x41, 0x6d,
  0x59, 0x52, 0x4e, 0x73, 0x41, 0x41, 0x62, 0x6b, 0x42, 0x38, 0x67, 0x76,
  0x6e, 0x49, 0x5a, 0x54, 0x33, 0x73, 0x69, 0x57, 0x2b, 0x55, 0x42, 0x4e,
  0x46, 0x6a, 0x52, 0x6d, 0x0a, 0x75, 0x74, 0x59, 0x66, 0x46, 0x48, 0x4f,
  0x30, 0x76, 0x32, 0x58, 0x58, 0x2f, 0x44, 0x6a, 0x32, 0x73, 0x70, 0x71,
  0x71, 0x49, 0x6d, 0x64, 0x6c, 0x49, 0x32, 0x31, 0x48, 0x31, 0x71, 0x58,
  0x46, 0x78, 0x4e, 0x2b, 0x6a, 0x44, 0x62, 0x48, 0x62, 0x51, 0x79, 0x51,
  0x64, 0x48, 0x68, 0x31, 0x67, 0x50, 0x63, 0x55, 0x58, 0x76, 0x6a, 0x68,
  0x53, 0x48, 0x47, 0x49, 0x61, 0x4a, 0x52, 0x43, 0x37, 0x0a, 0x77, 0x2b,
  0x34, 0x64, 0x52, 0x59, 0x76, 0x69, 0x4f, 0x62, 0x7a, 0x4d, 0x73, 0x33,
  0x41, 0x76, 0x42, 0x6b, 0x51, 0x63, 0x36, 0x71, 0x79, 0x70, 0x67, 0x6b,
  0x6d, 0x50, 0x38, 0x4a, 0x63, 0x47, 0x2b, 0x62, 0x47, 0x78, 0x4b, 0x79,
  0x47, 0x79, 0x50, 0x32, 0x75, 0x58, 0x59, 0x62, 0x30, 0x6c, 0x30, 0x62,
  0x34, 0x46, 0x6a, 0x64, 0x6b, 0x72, 0x4d, 0x64, 0x62, 0x59, 0x65, 0x30,
  0x74, 0x68, 0x0a, 0x2b, 0x55, 0x33, 0x7a, 0x32, 0x69, 0x30, 0x50, 0x45,
  0x64, 0x30, 0x64, 0x4d, 0x4a, 0x62, 0x61, 0x48, 0x32, 0x62, 0x66, 0x38,
  0x66, 0x73, 0x58, 0x53, 0x36, 0x58, 0x43, 0x37, 0x6f, 0x54, 0x69, 0x58,
  0x6e, 0x79, 0x51, 0x42, 0x38, 0x4b, 0x71, 0x6e, 0x58, 0x48, 0x6a, 0x70,
  0x4e, 0x57, 0x68, 0x39, 0x37, 0x54, 0x65, 0x75, 0x42, 0x79, 0x54, 0x4e,
  0x64, 0x65, 0x6a, 0x6b, 0x6d, 0x68, 0x44, 0x0a, 0x72, 0x49, 0x4d, 0x43,
  0x41, 0x77, 0x45, 0x41, 0x41, 0x61, 0x4f, 0x43, 0x41, 0x52, 0x4d, 0x77,
  0x67, 0x67, 0x45, 0x50, 0x4d, 0x42, 0x30, 0x47, 0x41, 0x31, 0x55, 0x64,
  0x44, 0x67, 0x51, 0x57, 0x42, 0x42, 0x54, 0x4f, 0x42, 0x34, 0x32, 0x4f,
  0x76, 0x4a, 0x70, 0x57, 0x66, 0x65, 0x6f, 0x35, 0x44, 0x77, 0x75, 0x33,
  0x44, 0x4a, 0x48, 0x4c, 0x6f, 0x66, 0x4a, 0x4f, 0x53, 0x54, 0x43, 0x42,
  0x0a, 0x33, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x6a, 0x42, 0x49, 0x48,
  0x58, 0x4d, 0x49, 0x48, 0x55, 0x67, 0x42, 0x54, 0x4f, 0x42, 0x34, 0x32,
  0x4f, 0x76, 0x4a, 0x70, 0x57, 0x66, 0x65, 0x6f, 0x35, 0x44, 0x77, 0x75,
  0x33, 0x44, 0x4a, 0x48, 0x4c, 0x6f, 0x66, 0x4a, 0x4f, 0x53, 0x61, 0x47,
  0x42, 0x73, 0x4b, 0x53, 0x42, 0x72, 0x54, 0x43, 0x42, 0x71, 0x6a, 0x45,
  0x4c, 0x4d, 0x41, 0x6b, 0x47, 0x0a, 0x41, 0x31, 0x55, 0x45, 0x42, 0x68,
  0x4d, 0x43, 0x52, 0x6c, 0x49, 0x78, 0x46, 0x6a, 0x41, 0x55, 0x42, 0x67,
  0x4e, 0x56, 0x42, 0x41, 0x67, 0x54, 0x44, 0x55, 0x6c, 0x73, 0x5a, 0x53,
  0x31, 0x6b, 0x5a, 0x53, 0x31, 0x47, 0x63, 0x6d, 0x46, 0x75, 0x59, 0x32,
  0x55, 0x78, 0x44, 0x6a, 0x41, 0x4d, 0x42, 0x67, 0x4e, 0x56, 0x42, 0x41,
  0x63, 0x54, 0x42, 0x56, 0x42, 0x68, 0x63, 0x6d, 0x6c, 0x7a, 0x0a, 0x4d,
  0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x4b, 0x45,
  0x77, 0x70, 0x4a, 0x62, 0x6d, 0x5a, 0x70, 0x62, 0x6d, 0x6c, 0x30, 0x4c,
  0x6d, 0x6c, 0x76, 0x4d, 0x54, 0x45, 0x77, 0x4c, 0x77, 0x59, 0x44, 0x56,
  0x51, 0x51, 0x44, 0x46, 0x43, 0x68, 0x30, 0x63, 0x6d, 0x39, 0x77, 0x61,
  0x47, 0x39, 0x75, 0x61, 0x58, 0x56, 0x7a, 0x4c, 0x69, 0x6f, 0x75, 0x4b,
  0x69, 0x35, 0x68, 0x0a, 0x63, 0x47, 0x6b, 0x75, 0x63, 0x48, 0x4a, 0x76,
  0x5a, 0x48, 0x56, 0x6a, 0x64, 0x47, 0x6c, 0x76, 0x62, 0x69, 0x35, 0x70,
  0x62, 0x6d, 0x5a, 0x70, 0x62, 0x6d, 0x6c, 0x30, 0x4c, 0x6d, 0x6c, 0x76,
  0x4d, 0x53, 0x73, 0x77, 0x4b, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49,
  0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x6b, 0x42, 0x46, 0x68, 0x78, 0x68,
  0x5a, 0x47, 0x31, 0x70, 0x62, 0x69, 0x74, 0x6a, 0x0a, 0x5a, 0x58, 0x4a,
  0x30, 0x61, 0x57, 0x5a, 0x70, 0x59, 0x32, 0x46, 0x30, 0x5a, 0x55, 0x42,
  0x70, 0x62, 0x6d, 0x5a, 0x70, 0x62, 0x6d, 0x6c, 0x30, 0x4c, 0x6d, 0x6c,
  0x76, 0x67, 0x67, 0x6b, 0x41, 0x37, 0x4e, 0x72, 0x45, 0x67, 0x72, 0x59,
  0x6d, 0x69, 0x44, 0x59, 0x77, 0x44, 0x41, 0x59, 0x44, 0x56, 0x52, 0x30,
  0x54, 0x42, 0x41, 0x55, 0x77, 0x41, 0x77, 0x45, 0x42, 0x2f, 0x7a, 0x41,
  0x4e, 0x0a, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77,
  0x30, 0x42, 0x41, 0x51, 0x55, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x67,
  0x45, 0x41, 0x48, 0x5a, 0x6a, 0x77, 0x71, 0x42, 0x35, 0x65, 0x4b, 0x6c,
  0x4d, 0x6e, 0x63, 0x4a, 0x72, 0x6d, 0x70, 0x52, 0x48, 0x39, 0x54, 0x4a,
  0x4e, 0x6a, 0x53, 0x75, 0x67, 0x37, 0x47, 0x6c, 0x4f, 0x4c, 0x57, 0x6b,
  0x38, 0x32, 0x50, 0x73, 0x66, 0x6a, 0x0a, 0x6e, 0x59, 0x50, 0x33, 0x6e,
  0x38, 0x64, 0x72, 0x75, 0x48, 0x64, 0x77, 0x38, 0x6c, 0x7a, 0x75, 0x51,
  0x38, 0x71, 0x71, 0x65, 0x31, 0x4c, 0x46, 0x52, 0x59, 0x4f, 0x79, 0x45,
  0x6e, 0x74, 0x7a, 0x6b, 0x42, 0x38, 0x64, 0x2f, 0x49, 0x55, 0x49, 0x35,
  0x39, 0x74, 0x72, 0x6c, 0x6a, 0x31, 0x65, 0x69, 0x6a, 0x52, 0x53, 0x77,
  0x57, 0x52, 0x36, 0x6f, 0x6c, 0x34, 0x5a, 0x54, 0x48, 0x49, 0x49, 0x0a,
  0x45, 0x42, 0x63, 0x4c, 0x6b, 0x5a, 0x79, 0x4f, 0x56, 0x4d, 0x4c, 0x49,
  0x67, 0x51, 0x61, 0x39, 0x31, 0x76, 0x2b, 0x38, 0x74, 0x4b, 0x4e, 0x74,
  0x34, 0x32, 0x79, 0x45, 0x37, 0x7a, 0x56, 0x4f, 0x70, 0x61, 0x58, 0x4d,
  0x36, 0x4b, 0x73, 0x46, 0x75, 0x35, 0x35, 0x32, 0x70, 0x70, 0x7a, 0x79,
  0x34, 0x43, 0x37, 0x6d, 0x64, 0x58, 0x62, 0x54, 0x6c, 0x75, 0x62, 0x61,
  0x44, 0x51, 0x71, 0x72, 0x0a, 0x5a, 0x5a, 0x6d, 0x42, 0x65, 0x2b, 0x65,
  0x33, 0x71, 0x67, 0x6c, 0x50, 0x4b, 0x58, 0x67, 0x49, 0x45, 0x75, 0x72,
  0x78, 0x73, 0x36, 0x75, 0x66, 0x56, 0x30, 0x67, 0x65, 0x38, 0x4a, 0x33,
  0x6e, 0x4e, 0x38, 0x35, 0x71, 0x77, 0x53, 0x48, 0x61, 0x70, 0x2f, 0x57,
  0x54, 0x63, 0x43, 0x67, 0x68, 0x53, 0x39, 0x67, 0x5a, 0x53, 0x4f, 0x2f,
  0x65, 0x57, 0x6c, 0x6a, 0x74, 0x68, 0x55, 0x37, 0x4e, 0x0a, 0x6a, 0x78,
  0x43, 0x48, 0x36, 0x75, 0x77, 0x6d, 0x50, 0x6d, 0x59, 0x51, 0x2b, 0x7a,
  0x57, 0x73, 0x33, 0x43, 0x59, 0x6f, 0x79, 0x57, 0x78, 0x48, 0x79, 0x77,
  0x41, 0x53, 0x68, 0x44, 0x6d, 0x56, 0x6c, 0x33, 0x51, 0x42, 0x72, 0x68,
  0x71, 0x78, 0x53, 0x5a, 0x32, 0x66, 0x68, 0x35, 0x73, 0x6c, 0x37, 0x31,
  0x65, 0x4b, 0x34, 0x44, 0x39, 0x4e, 0x64, 0x43, 0x66, 0x75, 0x53, 0x73,
  0x79, 0x57, 0x0a, 0x4f, 0x72, 0x6d, 0x4b, 0x6c, 0x52, 0x50, 0x62, 0x63,
  0x47, 0x53, 0x5a, 0x68, 0x4a, 0x54, 0x6e, 0x7a, 0x4e, 0x75, 0x51, 0x37,
  0x74, 0x66, 0x42, 0x57, 0x46, 0x6d, 0x7a, 0x31, 0x56, 0x42, 0x2f, 0x4a,
  0x4f, 0x6b, 0x31, 0x4e, 0x41, 0x63, 0x51, 0x70, 0x4c, 0x49, 0x31, 0x4c,
  0x4f, 0x4e, 0x4b, 0x4b, 0x44, 0x37, 0x4c, 0x6e, 0x78, 0x4a, 0x50, 0x2f,
  0x6d, 0x45, 0x70, 0x33, 0x71, 0x48, 0x6c, 0x0a, 0x6d, 0x77, 0x71, 0x62,
  0x55, 0x4f, 0x4c, 0x36, 0x48, 0x72, 0x4d, 0x39, 0x4b, 0x38, 0x4f, 0x70,
  0x37, 0x45, 0x45, 0x37, 0x31, 0x6b, 0x75, 0x49, 0x6d, 0x41, 0x6b, 0x45,
  0x6c, 0x36, 0x58, 0x7a, 0x55, 0x61, 0x58, 0x6e, 0x30, 0x74, 0x64, 0x59,
  0x49, 0x31, 0x6e, 0x64, 0x58, 0x41, 0x56, 0x77, 0x65, 0x6a, 0x30, 0x31,
  0x45, 0x64, 0x2b, 0x6a, 0x62, 0x78, 0x30, 0x74, 0x62, 0x6f, 0x75, 0x44,
  0x0a, 0x4c, 0x79, 0x51, 0x2f, 0x49, 0x75, 0x5a, 0x41, 0x57, 0x6c, 0x41,
  0x68, 0x48, 0x54, 0x59, 0x65, 0x66, 0x32, 0x67, 0x77, 0x48, 0x37, 0x31,
  0x7a, 0x4e, 0x2f, 0x6e, 0x41, 0x2b, 0x62, 0x57, 0x4b, 0x6f, 0x4b, 0x6e,
  0x38, 0x43, 0x41, 0x58, 0x4b, 0x67, 0x30, 0x62, 0x66, 0x59, 0x44, 0x4b,
  0x32, 0x62, 0x32, 0x59, 0x43, 0x62, 0x53, 0x33, 0x6f, 0x6c, 0x32, 0x6e,
  0x58, 0x4b, 0x71, 0x45, 0x49, 0x0a, 0x31, 0x47, 0x79, 0x61, 0x44, 0x72,
  0x4a, 0x37, 0x71, 0x5a, 0x42, 0x36, 0x38, 0x4c, 0x69, 0x66, 0x30, 0x67,
  0x54, 0x6d, 0x75, 0x42, 0x58, 0x47, 0x67, 0x67, 0x51, 0x44, 0x6e, 0x58,
  0x53, 0x54, 0x35, 0x50, 0x69, 0x4e, 0x4b, 0x2f, 0x72, 0x6a, 0x41, 0x64,
  0x51, 0x30, 0x6f, 0x6e, 0x48, 0x4b, 0x71, 0x65, 0x4a, 0x66, 0x41, 0x45,
  0x54, 0x2f, 0x4c, 0x6e, 0x66, 0x78, 0x44, 0x36, 0x6f, 0x5a, 0x0a, 0x68,
  0x6c, 0x76, 0x6f, 0x47, 0x45, 0x57, 0x6e, 0x42, 0x61, 0x58, 0x43, 0x72,
  0x66, 0x2b, 0x55, 0x70, 0x56, 0x4e, 0x61, 0x54, 0x32, 0x6f, 0x71, 0x72,
  0x7a, 0x38, 0x30, 0x44, 0x6a, 0x5a, 0x75, 0x78, 0x65, 0x74, 0x4d, 0x47,
  0x55, 0x32, 0x34, 0x62, 0x36, 0x4d, 0x66, 0x75, 0x76, 0x52, 0x63, 0x77,
  0x51, 0x39, 0x32, 0x7a, 0x43, 0x45, 0x39, 0x43, 0x46, 0x74, 0x39, 0x35,
  0x49, 0x61, 0x63, 0x0a, 0x5a, 0x54, 0x48, 0x35, 0x73, 0x37, 0x30, 0x70,
  0x39, 0x67, 0x7a, 0x37, 0x68, 0x4b, 0x37, 0x62, 0x6f, 0x2f, 0x5a, 0x50,
  0x36, 0x46, 0x51, 0x69, 0x6e, 0x76, 0x5a, 0x36, 0x57, 0x61, 0x71, 0x62,
  0x62, 0x74, 0x32, 0x6f, 0x6d, 0x6d, 0x4b, 0x78, 0x54, 0x70, 0x35, 0x35,
  0x6d, 0x5a, 0x57, 0x6b, 0x65, 0x74, 0x5a, 0x34, 0x74, 0x57, 0x69, 0x59,
  0x6b, 0x64, 0x56, 0x62, 0x54, 0x73, 0x45, 0x34, 0x0a, 0x36, 0x59, 0x49,
  0x3d, 0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43,
  0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d,
  0x2d, 0x2d, 0x2d, 0x0a
};

const std::vector<char> server_key =
{
  0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x52,
  0x53, 0x41, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4b,
  0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a, 0x4d, 0x49, 0x49, 0x4a,
  0x4b, 0x51, 0x49, 0x42, 0x41, 0x41, 0x4b, 0x43, 0x41, 0x67, 0x45, 0x41,
  0x37, 0x38, 0x75, 0x37, 0x57, 0x62, 0x4c, 0x48, 0x75, 0x49, 0x49, 0x38,
  0x65, 0x78, 0x78, 0x69, 0x41, 0x77, 0x4c, 0x4b, 0x6b, 0x4e, 0x39, 0x33,
  0x46, 0x31, 0x59, 0x45, 0x69, 0x54, 0x6f, 0x62, 0x56, 0x43, 0x39, 0x77,
  0x6c, 0x4a, 0x65, 0x44, 0x72, 0x68, 0x4c, 0x31, 0x2b, 0x4d, 0x54, 0x49,
  0x0a, 0x73, 0x69, 0x79, 0x33, 0x47, 0x62, 0x5a, 0x43, 0x52, 0x5a, 0x6b,
  0x54, 0x56, 0x78, 0x74, 0x46, 0x75, 0x6f, 0x46, 0x6c, 0x47, 0x38, 0x34,
  0x76, 0x50, 0x42, 0x67, 0x44, 0x4f, 0x4c, 0x48, 0x31, 0x57, 0x63, 0x66,
  0x34, 0x6d, 0x54, 0x65, 0x56, 0x75, 0x4f, 0x65, 0x51, 0x78, 0x6a, 0x75,
  0x5a, 0x43, 0x71, 0x66, 0x4a, 0x39, 0x55, 0x79, 0x55, 0x73, 0x62, 0x67,
  0x55, 0x58, 0x56, 0x56, 0x66, 0x0a, 0x58, 0x6c, 0x55, 0x37, 0x41, 0x59,
  0x44, 0x59, 0x52, 0x61, 0x6c, 0x75, 0x68, 0x6f, 0x31, 0x6a, 0x4e, 0x51,
  0x74, 0x45, 0x5a, 0x44, 0x43, 0x63, 0x73, 0x75, 0x2b, 0x62, 0x59, 0x50,
  0x75, 0x4f, 0x2f, 0x66, 0x50, 0x33, 0x48, 0x51, 0x2f, 0x76, 0x6d, 0x4b,
  0x79, 0x71, 0x4c, 0x6d, 0x76, 0x53, 0x55, 0x66, 0x76, 0x34, 0x71, 0x35,
  0x6f, 0x69, 0x44, 0x6f, 0x75, 0x6e, 0x48, 0x61, 0x61, 0x57, 0x0a, 0x33,
  0x36, 0x4e, 0x33, 0x6b, 0x51, 0x32, 0x35, 0x6a, 0x30, 0x76, 0x77, 0x52,
  0x2b, 0x31, 0x71, 0x54, 0x47, 0x58, 0x37, 0x74, 0x72, 0x53, 0x51, 0x47,
  0x51, 0x2b, 0x48, 0x4a, 0x65, 0x31, 0x42, 0x68, 0x52, 0x67, 0x6c, 0x74,
  0x70, 0x68, 0x35, 0x38, 0x48, 0x2f, 0x5a, 0x66, 0x64, 0x74, 0x38, 0x36,
  0x62, 0x77, 0x69, 0x57, 0x31, 0x6b, 0x71, 0x45, 0x66, 0x6f, 0x32, 0x58,
  0x62, 0x77, 0x73, 0x0a, 0x64, 0x4a, 0x68, 0x4c, 0x46, 0x61, 0x75, 0x34,
  0x55, 0x6d, 0x68, 0x64, 0x57, 0x52, 0x68, 0x36, 0x70, 0x4b, 0x71, 0x6b,
  0x2b, 0x43, 0x37, 0x49, 0x6e, 0x70, 0x47, 0x35, 0x33, 0x65, 0x37, 0x4c,
  0x4e, 0x76, 0x6e, 0x31, 0x4c, 0x35, 0x43, 0x6c, 0x4b, 0x72, 0x4b, 0x6f,
  0x4a, 0x54, 0x44, 0x78, 0x6e, 0x30, 0x53, 0x42, 0x64, 0x77, 0x42, 0x76,
  0x6a, 0x46, 0x73, 0x2f, 0x4c, 0x39, 0x4f, 0x77, 0x0a, 0x74, 0x6f, 0x31,
  0x47, 0x6d, 0x42, 0x53, 0x79, 0x4e, 0x6f, 0x35, 0x32, 0x6a, 0x45, 0x30,
  0x37, 0x49, 0x72, 0x39, 0x34, 0x43, 0x52, 0x45, 0x64, 0x74, 0x33, 0x50,
  0x53, 0x78, 0x68, 0x4d, 0x4b, 0x65, 0x55, 0x50, 0x6c, 0x61, 0x30, 0x77,
  0x30, 0x35, 0x67, 0x6d, 0x69, 0x71, 0x74, 0x30, 0x4e, 0x6e, 0x68, 0x4a,
  0x30, 0x4e, 0x34, 0x65, 0x58, 0x58, 0x4d, 0x30, 0x4f, 0x65, 0x57, 0x4d,
  0x34, 0x0a, 0x68, 0x4c, 0x6b, 0x78, 0x38, 0x34, 0x6f, 0x52, 0x6a, 0x35,
  0x6d, 0x4d, 0x37, 0x55, 0x37, 0x4a, 0x44, 0x49, 0x36, 0x59, 0x59, 0x45,
  0x75, 0x6d, 0x52, 0x46, 0x59, 0x41, 0x4d, 0x75, 0x47, 0x66, 0x6b, 0x47,
  0x59, 0x68, 0x57, 0x44, 0x4b, 0x61, 0x78, 0x75, 0x6d, 0x4b, 0x6d, 0x64,
  0x57, 0x30, 0x4c, 0x67, 0x6d, 0x31, 0x42, 0x32, 0x65, 0x55, 0x47, 0x56,
  0x75, 0x7a, 0x6e, 0x6b, 0x55, 0x73, 0x0a, 0x4c, 0x78, 0x6a, 0x72, 0x75,
  0x58, 0x34, 0x51, 0x4e, 0x6c, 0x49, 0x4b, 0x52, 0x34, 0x44, 0x63, 0x77,
  0x46, 0x42, 0x79, 0x65, 0x58, 0x4c, 0x6b, 0x78, 0x54, 0x41, 0x6d, 0x59,
  0x52, 0x4e, 0x73, 0x41, 0x41, 0x62, 0x6b, 0x42, 0x38, 0x67, 0x76, 0x6e,
  0x49, 0x5a, 0x54, 0x33, 0x73, 0x69, 0x57, 0x2b, 0x55, 0x42, 0x4e, 0x46,
  0x6a, 0x52, 0x6d, 0x75, 0x74, 0x59, 0x66, 0x46, 0x48, 0x4f, 0x30, 0x0a,
  0x76, 0x32, 0x58, 0x58, 0x2f, 0x44, 0x6a, 0x32, 0x73, 0x70, 0x71, 0x71,
  0x49, 0x6d, 0x64, 0x6c, 0x49, 0x32, 0x31, 0x48, 0x31, 0x71, 0x58, 0x46,
  0x78, 0x4e, 0x2b, 0x6a, 0x44, 0x62, 0x48, 0x62, 0x51, 0x79, 0x51, 0x64,
  0x48, 0x68, 0x31, 0x67, 0x50, 0x63, 0x55, 0x58, 0x76, 0x6a, 0x68, 0x53,
  0x48, 0x47, 0x49, 0x61, 0x4a, 0x52, 0x43, 0x37, 0x77, 0x2b, 0x34, 0x64,
  0x52, 0x59, 0x76, 0x69, 0x0a, 0x4f, 0x62, 0x7a, 0x4d, 0x73, 0x33, 0x41,
  0x76, 0x42, 0x6b, 0x51, 0x63, 0x36, 0x71, 0x79, 0x70, 0x67, 0x6b, 0x6d,
  0x50, 0x38, 0x4a, 0x63, 0x47, 0x2b, 0x62, 0x47, 0x78, 0x4b, 0x79, 0x47,
  0x79, 0x50, 0x32, 0x75, 0x58, 0x59, 0x62, 0x30, 0x6c, 0x30, 0x62, 0x34,
  0x46, 0x6a, 0x64, 0x6b, 0x72, 0x4d, 0x64, 0x62, 0x59, 0x65, 0x30, 0x74,
  0x68, 0x2b, 0x55, 0x33, 0x7a, 0x32, 0x69, 0x30, 0x50, 0x0a, 0x45, 0x64,
  0x30, 0x64, 0x4d, 0x4a, 0x62, 0x61, 0x48, 0x32, 0x62, 0x66, 0x38, 0x66,
  0x73, 0x58, 0x53, 0x36, 0x58, 0x43, 0x37, 0x6f, 0x54, 0x69, 0x58, 0x6e,
  0x79, 0x51, 0x42, 0x38, 0x4b, 0x71, 0x6e, 0x58, 0x48, 0x6a, 0x70, 0x4e,
  0x57, 0x68, 0x39, 0x37, 0x54, 0x65, 0x75, 0x42, 0x79, 0x54, 0x4e, 0x64,
  0x65, 0x6a, 0x6b, 0x6d, 0x68, 0x44, 0x72, 0x49, 0x4d, 0x43, 0x41, 0x77,
  0x45, 0x41, 0x0a, 0x41, 0x51, 0x4b, 0x43, 0x41, 0x67, 0x42, 0x61, 0x41,
  0x5a, 0x65, 0x4e, 0x34, 0x49, 0x77, 0x55, 0x6c, 0x6c, 0x58, 0x4c, 0x51,
  0x2b, 0x6b, 0x4b, 0x42, 0x6b, 0x63, 0x77, 0x50, 0x36, 0x42, 0x38, 0x30,
  0x74, 0x32, 0x62, 0x41, 0x49, 0x4e, 0x33, 0x67, 0x75, 0x4c, 0x33, 0x38,
  0x7a, 0x4d, 0x4b, 0x36, 0x4c, 0x55, 0x49, 0x72, 0x68, 0x78, 0x43, 0x76,
  0x49, 0x50, 0x78, 0x6b, 0x37, 0x61, 0x6d, 0x0a, 0x56, 0x77, 0x47, 0x71,
  0x5a, 0x57, 0x4d, 0x7a, 0x30, 0x52, 0x4f, 0x35, 0x62, 0x78, 0x66, 0x4e,
  0x72, 0x35, 0x6d, 0x74, 0x38, 0x79, 0x59, 0x4c, 0x6b, 0x41, 0x4b, 0x67,
  0x78, 0x2f, 0x74, 0x62, 0x7a, 0x78, 0x64, 0x4a, 0x51, 0x4e, 0x39, 0x39,
  0x33, 0x32, 0x4c, 0x76, 0x76, 0x74, 0x48, 0x6c, 0x4c, 0x78, 0x6e, 0x39,
  0x75, 0x6d, 0x69, 0x30, 0x69, 0x4c, 0x74, 0x41, 0x49, 0x6a, 0x4f, 0x4c,
  0x0a, 0x57, 0x6b, 0x42, 0x52, 0x49, 0x73, 0x72, 0x46, 0x41, 0x7a, 0x69,
  0x6c, 0x66, 0x70, 0x57, 0x69, 0x6d, 0x45, 0x73, 0x7a, 0x43, 0x4e, 0x6b,
  0x77, 0x4f, 0x78, 0x31, 0x61, 0x2f, 0x44, 0x74, 0x4c, 0x6a, 0x43, 0x76,
  0x49, 0x68, 0x74, 0x49, 0x48, 0x30, 0x64, 0x4d, 0x52, 0x33, 0x69, 0x58,
  0x41, 0x58, 0x65, 0x7a, 0x5a, 0x4e, 0x55, 0x6c, 0x57, 0x49, 0x67, 0x35,
  0x6b, 0x46, 0x4d, 0x6d, 0x38, 0x0a, 0x6e, 0x70, 0x31, 0x4f, 0x38, 0x69,
  0x38, 0x2f, 0x41, 0x39, 0x79, 0x4b, 0x52, 0x4a, 0x58, 0x39, 0x77, 0x68,
  0x56, 0x52, 0x53, 0x41, 0x2b, 0x61, 0x76, 0x47, 0x69, 0x54, 0x64, 0x41,
  0x48, 0x35, 0x49, 0x70, 0x50, 0x70, 0x4b, 0x4c, 0x52, 0x6e, 0x4b, 0x79,
  0x57, 0x65, 0x4d, 0x67, 0x61, 0x58, 0x66, 0x74, 0x70, 0x66, 0x4c, 0x70,
  0x31, 0x6c, 0x47, 0x6a, 0x43, 0x38, 0x72, 0x70, 0x72, 0x64, 0x0a, 0x32,
  0x36, 0x79, 0x47, 0x48, 0x36, 0x6b, 0x52, 0x47, 0x37, 0x67, 0x57, 0x4b,
  0x38, 0x46, 0x44, 0x75, 0x36, 0x45, 0x50, 0x53, 0x32, 0x31, 0x64, 0x63,
  0x6b, 0x37, 0x30, 0x6a, 0x6f, 0x39, 0x67, 0x53, 0x6e, 0x54, 0x51, 0x6d,
  0x4f, 0x46, 0x6f, 0x6a, 0x5a, 0x63, 0x6d, 0x71, 0x72, 0x51, 0x7a, 0x38,
  0x35, 0x2f, 0x77, 0x2f, 0x4c, 0x31, 0x4d, 0x6d, 0x42, 0x53, 0x53, 0x53,
  0x74, 0x70, 0x6c, 0x0a, 0x6e, 0x65, 0x32, 0x6a, 0x56, 0x65, 0x33, 0x48,
  0x61, 0x69, 0x54, 0x4e, 0x43, 0x6d, 0x36, 0x6b, 0x43, 0x45, 0x5a, 0x70,
  0x38, 0x49, 0x57, 0x79, 0x35, 0x4b, 0x67, 0x38, 0x64, 0x76, 0x6d, 0x33,
  0x75, 0x68, 0x58, 0x53, 0x73, 0x46, 0x46, 0x79, 0x58, 0x48, 0x2b, 0x77,
  0x67, 0x6f, 0x53, 0x32, 0x6a, 0x38, 0x51, 0x38, 0x52, 0x34, 0x72, 0x58,
  0x59, 0x53, 0x4a, 0x32, 0x37, 0x74, 0x4f, 0x34, 0x0a, 0x41, 0x4a, 0x75,
  0x44, 0x7a, 0x2f, 0x4f, 0x35, 0x73, 0x4d, 0x38, 0x2b, 0x66, 0x4c, 0x79,
  0x56, 0x48, 0x2b, 0x30, 0x56, 0x6c, 0x46, 0x34, 0x74, 0x7a, 0x67, 0x75,
  0x34, 0x52, 0x39, 0x49, 0x37, 0x71, 0x30, 0x65, 0x62, 0x73, 0x6a, 0x42,
  0x30, 0x76, 0x6c, 0x37, 0x71, 0x31, 0x49, 0x4e, 0x79, 0x55, 0x4b, 0x61,
  0x4f, 0x6d, 0x4c, 0x51, 0x6f, 0x73, 0x6f, 0x43, 0x69, 0x57, 0x31, 0x32,
  0x64, 0x0a, 0x2f, 0x45, 0x4c, 0x50, 0x31, 0x4c, 0x78, 0x38, 0x73, 0x6e,
  0x55, 0x36, 0x65, 0x73, 0x52, 0x66, 0x4a, 0x5a, 0x63, 0x72, 0x42, 0x30,
  0x34, 0x36, 0x72, 0x4f, 0x37, 0x62, 0x35, 0x6e, 0x65, 0x73, 0x43, 0x4f,
  0x6d, 0x45, 0x67, 0x6b, 0x33, 0x4b, 0x4d, 0x61, 0x47, 0x4a, 0x32, 0x71,
  0x69, 0x64, 0x63, 0x39, 0x79, 0x75, 0x6e, 0x76, 0x71, 0x48, 0x4b, 0x69,
  0x75, 0x44, 0x73, 0x44, 0x6c, 0x4a, 0x0a, 0x55, 0x67, 0x33, 0x52, 0x54,
  0x45, 0x42, 0x54, 0x6a, 0x34, 0x34, 0x47, 0x6c, 0x45, 0x54, 0x6d, 0x46,
  0x2f, 0x4f, 0x4d, 0x67, 0x71, 0x70, 0x4a, 0x4a, 0x42, 0x65, 0x6c, 0x6a,
  0x32, 0x6d, 0x43, 0x77, 0x58, 0x46, 0x66, 0x43, 0x34, 0x73, 0x75, 0x4c,
  0x74, 0x48, 0x52, 0x76, 0x6f, 0x64, 0x31, 0x48, 0x2f, 0x34, 0x65, 0x6b,
  0x31, 0x30, 0x65, 0x66, 0x6f, 0x73, 0x31, 0x7a, 0x74, 0x49, 0x51, 0x0a,
  0x51, 0x6b, 0x32, 0x47, 0x37, 0x2b, 0x2f, 0x77, 0x77, 0x78, 0x31, 0x45,
  0x4e, 0x4d, 0x44, 0x61, 0x30, 0x38, 0x38, 0x52, 0x54, 0x4a, 0x6a, 0x4d,
  0x7a, 0x6b, 0x6a, 0x73, 0x61, 0x2f, 0x56, 0x32, 0x55, 0x6a, 0x41, 0x6b,
  0x5a, 0x71, 0x32, 0x74, 0x39, 0x5a, 0x6e, 0x44, 0x41, 0x78, 0x6e, 0x39,
  0x30, 0x48, 0x79, 0x70, 0x4a, 0x52, 0x53, 0x38, 0x42, 0x45, 0x63, 0x4f,
  0x48, 0x35, 0x31, 0x78, 0x0a, 0x67, 0x58, 0x6b, 0x48, 0x54, 0x72, 0x79,
  0x50, 0x4d, 0x75, 0x52, 0x62, 0x75, 0x73, 0x54, 0x6b, 0x57, 0x50, 0x59,
  0x74, 0x34, 0x50, 0x30, 0x75, 0x2f, 0x54, 0x62, 0x32, 0x30, 0x42, 0x44,
  0x64, 0x62, 0x4a, 0x7a, 0x76, 0x4a, 0x52, 0x2b, 0x56, 0x72, 0x75, 0x31,
  0x50, 0x49, 0x39, 0x38, 0x67, 0x51, 0x51, 0x4b, 0x43, 0x41, 0x51, 0x45,
  0x41, 0x2b, 0x67, 0x31, 0x54, 0x31, 0x34, 0x45, 0x44, 0x0a, 0x57, 0x52,
  0x78, 0x66, 0x74, 0x49, 0x6b, 0x39, 0x42, 0x35, 0x67, 0x77, 0x70, 0x58,
  0x69, 0x48, 0x5a, 0x69, 0x41, 0x68, 0x64, 0x6d, 0x49, 0x54, 0x44, 0x63,
  0x32, 0x63, 0x44, 0x7a, 0x68, 0x4b, 0x53, 0x74, 0x62, 0x68, 0x38, 0x43,
  0x43, 0x4e, 0x38, 0x43, 0x74, 0x47, 0x68, 0x62, 0x5a, 0x6f, 0x44, 0x32,
  0x45, 0x6f, 0x76, 0x59, 0x61, 0x6a, 0x37, 0x34, 0x52, 0x78, 0x62, 0x61,
  0x43, 0x6f, 0x0a, 0x6f, 0x67, 0x58, 0x5a, 0x64, 0x50, 0x56, 0x37, 0x32,
  0x76, 0x36, 0x6d, 0x79, 0x4a, 0x7a, 0x70, 0x51, 0x44, 0x78, 0x52, 0x67,
  0x37, 0x2b, 0x49, 0x4a, 0x57, 0x46, 0x64, 0x7a, 0x4b, 0x6e, 0x34, 0x53,
  0x51, 0x30, 0x58, 0x31, 0x49, 0x4d, 0x6a, 0x77, 0x52, 0x74, 0x6e, 0x35,
  0x4d, 0x37, 0x2f, 0x54, 0x67, 0x73, 0x48, 0x6e, 0x75, 0x45, 0x70, 0x72,
  0x64, 0x44, 0x33, 0x53, 0x48, 0x61, 0x79, 0x0a, 0x6e, 0x33, 0x39, 0x52,
  0x79, 0x51, 0x70, 0x65, 0x46, 0x33, 0x74, 0x30, 0x45, 0x69, 0x79, 0x37,
  0x66, 0x56, 0x39, 0x70, 0x79, 0x67, 0x69, 0x4b, 0x35, 0x6a, 0x71, 0x76,
  0x55, 0x63, 0x48, 0x34, 0x78, 0x49, 0x56, 0x43, 0x46, 0x72, 0x59, 0x4a,
  0x35, 0x6e, 0x30, 0x51, 0x4e, 0x74, 0x57, 0x4a, 0x34, 0x71, 0x64, 0x2b,
  0x63, 0x44, 0x39, 0x48, 0x36, 0x2b, 0x2b, 0x4c, 0x51, 0x78, 0x65, 0x41,
  0x0a, 0x47, 0x64, 0x46, 0x64, 0x78, 0x76, 0x45, 0x64, 0x4a, 0x55, 0x49,
  0x47, 0x30, 0x6b, 0x62, 0x6b, 0x74, 0x6e, 0x52, 0x51, 0x77, 0x76, 0x51,
  0x33, 0x54, 0x68, 0x53, 0x6f, 0x57, 0x35, 0x75, 0x43, 0x34, 0x4a, 0x73,
  0x56, 0x39, 0x70, 0x32, 0x56, 0x72, 0x45, 0x67, 0x77, 0x57, 0x74, 0x35,
  0x52, 0x38, 0x7a, 0x39, 0x38, 0x62, 0x79, 0x42, 0x6d, 0x54, 0x64, 0x38,
  0x2b, 0x6c, 0x64, 0x72, 0x52, 0x0a, 0x67, 0x46, 0x67, 0x67, 0x54, 0x31,
  0x70, 0x75, 0x6e, 0x34, 0x4c, 0x69, 0x76, 0x79, 0x68, 0x57, 0x46, 0x6f,
  0x31, 0x33, 0x75, 0x41, 0x68, 0x5a, 0x57, 0x4e, 0x63, 0x56, 0x71, 0x2b,
  0x6a, 0x2f, 0x52, 0x44, 0x4b, 0x65, 0x72, 0x7a, 0x75, 0x6d, 0x75, 0x45,
  0x6d, 0x52, 0x4d, 0x63, 0x69, 0x56, 0x5a, 0x43, 0x62, 0x6b, 0x69, 0x66,
  0x2b, 0x57, 0x4e, 0x42, 0x4a, 0x32, 0x6e, 0x62, 0x73, 0x4a, 0x0a, 0x73,
  0x75, 0x57, 0x56, 0x38, 0x70, 0x41, 0x31, 0x6f, 0x46, 0x31, 0x50, 0x34,
  0x77, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x39, 0x58, 0x2f, 0x7a, 0x4a,
  0x68, 0x68, 0x6e, 0x71, 0x74, 0x7a, 0x6b, 0x47, 0x51, 0x59, 0x44, 0x2f,
  0x39, 0x56, 0x49, 0x70, 0x4e, 0x42, 0x37, 0x31, 0x31, 0x50, 0x48, 0x36,
  0x42, 0x69, 0x78, 0x68, 0x72, 0x30, 0x4a, 0x70, 0x74, 0x52, 0x74, 0x38,
  0x68, 0x55, 0x44, 0x0a, 0x4f, 0x53, 0x57, 0x61, 0x6d, 0x4f, 0x51, 0x58,
  0x71, 0x32, 0x64, 0x6e, 0x74, 0x68, 0x33, 0x4a, 0x72, 0x64, 0x71, 0x32,
  0x75, 0x51, 0x34, 0x49, 0x31, 0x4f, 0x6b, 0x32, 0x78, 0x6a, 0x67, 0x6d,
  0x61, 0x45, 0x58, 0x46, 0x68, 0x59, 0x75, 0x36, 0x73, 0x59, 0x30, 0x56,
  0x56, 0x53, 0x71, 0x68, 0x47, 0x65, 0x59, 0x74, 0x4b, 0x61, 0x2b, 0x43,
  0x46, 0x37, 0x33, 0x49, 0x6b, 0x2f, 0x43, 0x38, 0x0a, 0x76, 0x4a, 0x41,
  0x4d, 0x73, 0x4a, 0x39, 0x66, 0x6c, 0x59, 0x39, 0x74, 0x58, 0x41, 0x47,
  0x48, 0x55, 0x71, 0x76, 0x6a, 0x59, 0x75, 0x5a, 0x6f, 0x74, 0x58, 0x6d,
  0x31, 0x69, 0x4b, 0x66, 0x32, 0x4f, 0x30, 0x52, 0x35, 0x45, 0x4e, 0x54,
  0x72, 0x30, 0x79, 0x45, 0x45, 0x66, 0x69, 0x52, 0x6d, 0x53, 0x4a, 0x37,
  0x6c, 0x56, 0x50, 0x6a, 0x67, 0x6c, 0x61, 0x56, 0x6f, 0x73, 0x4f, 0x72,
  0x5a, 0x0a, 0x34, 0x4b, 0x78, 0x37, 0x56, 0x4b, 0x75, 0x6a, 0x2f, 0x54,
  0x49, 0x2f, 0x78, 0x75, 0x35, 0x4c, 0x4d, 0x71, 0x4b, 0x79, 0x6e, 0x79,
  0x4f, 0x50, 0x4e, 0x54, 0x2b, 0x67, 0x54, 0x49, 0x70, 0x79, 0x57, 0x42,
  0x6b, 0x58, 0x6b, 0x58, 0x62, 0x45, 0x45, 0x36, 0x4a, 0x62, 0x79, 0x41,
  0x53, 0x61, 0x6c, 0x59, 0x61, 0x6b, 0x49, 0x78, 0x70, 0x34, 0x56, 0x6f,
  0x65, 0x64, 0x71, 0x7a, 0x36, 0x63, 0x0a, 0x50, 0x31, 0x47, 0x6c, 0x35,
  0x67, 0x2b, 0x2f, 0x44, 0x34, 0x51, 0x32, 0x5a, 0x6c, 0x66, 0x46, 0x74,
  0x6b, 0x43, 0x47, 0x6d, 0x4f, 0x6f, 0x39, 0x33, 0x59, 0x69, 0x32, 0x37,
  0x55, 0x53, 0x66, 0x53, 0x68, 0x31, 0x2f, 0x67, 0x4c, 0x6c, 0x71, 0x65,
  0x57, 0x6f, 0x4a, 0x77, 0x64, 0x59, 0x31, 0x6e, 0x53, 0x4b, 0x4e, 0x6a,
  0x65, 0x45, 0x4f, 0x34, 0x66, 0x51, 0x75, 0x6f, 0x53, 0x6f, 0x38, 0x0a,
  0x65, 0x45, 0x61, 0x31, 0x6e, 0x4a, 0x31, 0x4f, 0x6b, 0x59, 0x66, 0x43,
  0x44, 0x61, 0x52, 0x44, 0x31, 0x59, 0x73, 0x2b, 0x67, 0x4b, 0x32, 0x54,
  0x50, 0x74, 0x6b, 0x32, 0x4f, 0x36, 0x61, 0x30, 0x76, 0x41, 0x30, 0x32,
  0x45, 0x31, 0x75, 0x53, 0x34, 0x51, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41,
  0x77, 0x41, 0x2b, 0x77, 0x6b, 0x46, 0x79, 0x56, 0x31, 0x38, 0x4a, 0x46,
  0x65, 0x49, 0x50, 0x5a, 0x0a, 0x44, 0x70, 0x5a, 0x45, 0x39, 0x7a, 0x51,
  0x47, 0x75, 0x39, 0x68, 0x2b, 0x47, 0x31, 0x48, 0x6c, 0x56, 0x4c, 0x72,
  0x53, 0x33, 0x5a, 0x58, 0x63, 0x36, 0x6e, 0x4c, 0x32, 0x67, 0x39, 0x78,
  0x64, 0x61, 0x56, 0x57, 0x30, 0x43, 0x30, 0x77, 0x35, 0x7a, 0x57, 0x5a,
  0x52, 0x52, 0x70, 0x47, 0x2b, 0x4a, 0x57, 0x44, 0x54, 0x52, 0x75, 0x4d,
  0x5a, 0x34, 0x36, 0x6b, 0x65, 0x69, 0x41, 0x6c, 0x75, 0x0a, 0x49, 0x70,
  0x31, 0x71, 0x4f, 0x62, 0x6a, 0x63, 0x4a, 0x2b, 0x79, 0x73, 0x70, 0x38,
  0x64, 0x62, 0x71, 0x57, 0x71, 0x4b, 0x41, 0x34, 0x4f, 0x69, 0x49, 0x32,
  0x6f, 0x64, 0x48, 0x61, 0x76, 0x45, 0x73, 0x4c, 0x52, 0x2b, 0x4c, 0x6d,
  0x38, 0x59, 0x42, 0x6a, 0x66, 0x4f, 0x6d, 0x4b, 0x68, 0x56, 0x76, 0x52,
  0x34, 0x2b, 0x63, 0x62, 0x68, 0x4b, 0x4a, 0x74, 0x78, 0x43, 0x55, 0x32,
  0x72, 0x56, 0x0a, 0x4c, 0x72, 0x41, 0x79, 0x54, 0x53, 0x74, 0x79, 0x72,
  0x79, 0x2b, 0x30, 0x4c, 0x2b, 0x77, 0x7a, 0x30, 0x2f, 0x62, 0x4c, 0x5a,
  0x72, 0x37, 0x59, 0x64, 0x77, 0x6e, 0x72, 0x34, 0x30, 0x6e, 0x62, 0x66,
  0x4f, 0x41, 0x65, 0x72, 0x68, 0x2b, 0x43, 0x6b, 0x30, 0x63, 0x58, 0x68,
  0x4e, 0x76, 0x32, 0x51, 0x44, 0x42, 0x30, 0x42, 0x51, 0x70, 0x74, 0x36,
  0x47, 0x61, 0x35, 0x34, 0x75, 0x36, 0x62, 0x0a, 0x39, 0x6c, 0x77, 0x71,
  0x70, 0x53, 0x53, 0x79, 0x30, 0x37, 0x6d, 0x76, 0x74, 0x71, 0x36, 0x69,
  0x4e, 0x43, 0x55, 0x46, 0x30, 0x36, 0x63, 0x30, 0x39, 0x5a, 0x50, 0x70,
  0x59, 0x4d, 0x31, 0x56, 0x67, 0x30, 0x6a, 0x48, 0x61, 0x32, 0x52, 0x4d,
  0x43, 0x63, 0x78, 0x2f, 0x70, 0x56, 0x4e, 0x37, 0x67, 0x4f, 0x43, 0x79,
  0x54, 0x36, 0x51, 0x4e, 0x4f, 0x73, 0x6c, 0x31, 0x74, 0x37, 0x32, 0x38,
  0x0a, 0x4c, 0x6d, 0x54, 0x34, 0x43, 0x4e, 0x2f, 0x51, 0x6a, 0x2b, 0x34,
  0x46, 0x51, 0x4b, 0x4f, 0x5a, 0x44, 0x50, 0x58, 0x58, 0x76, 0x58, 0x31,
  0x76, 0x5a, 0x46, 0x43, 0x46, 0x4e, 0x67, 0x39, 0x5a, 0x56, 0x54, 0x2b,
  0x63, 0x65, 0x47, 0x4b, 0x61, 0x37, 0x4a, 0x77, 0x36, 0x2b, 0x67, 0x77,
  0x49, 0x73, 0x4f, 0x4a, 0x6c, 0x6e, 0x57, 0x31, 0x6d, 0x57, 0x37, 0x53,
  0x67, 0x59, 0x66, 0x6d, 0x47, 0x0a, 0x56, 0x7a, 0x43, 0x56, 0x42, 0x51,
  0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x30, 0x38, 0x4e, 0x35, 0x70, 0x71,
  0x75, 0x34, 0x69, 0x49, 0x38, 0x66, 0x68, 0x6d, 0x4a, 0x46, 0x41, 0x75,
  0x49, 0x6b, 0x56, 0x6c, 0x36, 0x72, 0x35, 0x48, 0x4b, 0x56, 0x5a, 0x71,
  0x51, 0x65, 0x52, 0x66, 0x34, 0x38, 0x48, 0x42, 0x62, 0x7a, 0x65, 0x37,
  0x55, 0x61, 0x59, 0x61, 0x6f, 0x4a, 0x4c, 0x38, 0x62, 0x59, 0x0a, 0x6a,
  0x2f, 0x61, 0x54, 0x5a, 0x47, 0x6c, 0x50, 0x64, 0x56, 0x4c, 0x4b, 0x2b,
  0x4e, 0x65, 0x64, 0x55, 0x4b, 0x4b, 0x57, 0x70, 0x2b, 0x62, 0x35, 0x59,
  0x6b, 0x71, 0x45, 0x39, 0x67, 0x77, 0x77, 0x6a, 0x30, 0x55, 0x47, 0x57,
  0x4c, 0x39, 0x37, 0x31, 0x59, 0x35, 0x52, 0x2b, 0x4c, 0x6f, 0x32, 0x75,
  0x6d, 0x6e, 0x76, 0x59, 0x59, 0x56, 0x77, 0x47, 0x43, 0x73, 0x64, 0x64,
  0x79, 0x45, 0x53, 0x0a, 0x58, 0x7a, 0x30, 0x6e, 0x39, 0x51, 0x77, 0x77,
  0x67, 0x57, 0x52, 0x5a, 0x73, 0x51, 0x37, 0x55, 0x31, 0x57, 0x31, 0x56,
  0x35, 0x4c, 0x6f, 0x56, 0x55, 0x4d, 0x78, 0x67, 0x72, 0x64, 0x38, 0x73,
  0x53, 0x4b, 0x4d, 0x62, 0x62, 0x2f, 0x2f, 0x50, 0x35, 0x75, 0x61, 0x42,
  0x4a, 0x59, 0x6e, 0x45, 0x6c, 0x2f, 0x44, 0x6c, 0x58, 0x47, 0x35, 0x49,
  0x59, 0x47, 0x41, 0x48, 0x78, 0x6d, 0x4b, 0x45, 0x0a, 0x41, 0x7a, 0x7a,
  0x62, 0x2f, 0x4b, 0x6e, 0x43, 0x58, 0x62, 0x77, 0x76, 0x33, 0x63, 0x76,
  0x62, 0x6c, 0x4f, 0x2f, 0x38, 0x51, 0x75, 0x6e, 0x4e, 0x64, 0x69, 0x61,
  0x32, 0x79, 0x4c, 0x67, 0x73, 0x72, 0x45, 0x38, 0x4a, 0x59, 0x6f, 0x42,
  0x75, 0x49, 0x33, 0x72, 0x50, 0x6a, 0x4b, 0x51, 0x68, 0x6c, 0x32, 0x70,
  0x46, 0x32, 0x39, 0x67, 0x58, 0x43, 0x52, 0x74, 0x52, 0x77, 0x69, 0x42,
  0x6c, 0x0a, 0x43, 0x32, 0x70, 0x64, 0x54, 0x6d, 0x78, 0x35, 0x31, 0x42,
  0x72, 0x57, 0x76, 0x34, 0x4b, 0x57, 0x75, 0x4d, 0x68, 0x63, 0x47, 0x6c,
  0x42, 0x75, 0x49, 0x6f, 0x31, 0x4e, 0x56, 0x57, 0x6b, 0x61, 0x36, 0x66,
  0x35, 0x49, 0x79, 0x6c, 0x59, 0x50, 0x53, 0x79, 0x72, 0x70, 0x39, 0x61,
  0x39, 0x6a, 0x6d, 0x67, 0x35, 0x36, 0x52, 0x6e, 0x54, 0x62, 0x55, 0x6c,
  0x69, 0x55, 0x41, 0x62, 0x4e, 0x44, 0x0a, 0x65, 0x59, 0x38, 0x6b, 0x47,
  0x59, 0x5a, 0x50, 0x4b, 0x52, 0x32, 0x43, 0x58, 0x5a, 0x62, 0x63, 0x41,
  0x34, 0x4e, 0x30, 0x48, 0x34, 0x4a, 0x4f, 0x4e, 0x6b, 0x51, 0x6a, 0x47,
  0x42, 0x47, 0x4f, 0x6f, 0x51, 0x4b, 0x43, 0x41, 0x51, 0x42, 0x2f, 0x39,
  0x68, 0x2b, 0x32, 0x72, 0x4c, 0x64, 0x32, 0x57, 0x6a, 0x79, 0x4f, 0x41,
  0x78, 0x2b, 0x6a, 0x6f, 0x39, 0x6d, 0x6e, 0x6f, 0x49, 0x7a, 0x48, 0x0a,
  0x67, 0x38, 0x6e, 0x66, 0x56, 0x6e, 0x4b, 0x54, 0x50, 0x55, 0x43, 0x71,
  0x64, 0x44, 0x31, 0x42, 0x79, 0x47, 0x5a, 0x74, 0x61, 0x44, 0x74, 0x6f,
  0x77, 0x77, 0x68, 0x56, 0x64, 0x33, 0x70, 0x4a, 0x66, 0x39, 0x70, 0x42,
  0x72, 0x42, 0x54, 0x69, 0x61, 0x4d, 0x36, 0x6d, 0x77, 0x64, 0x56, 0x78,
  0x6d, 0x45, 0x6d, 0x70, 0x36, 0x69, 0x69, 0x43, 0x68, 0x64, 0x69, 0x4f,
  0x39, 0x44, 0x42, 0x37, 0x0a, 0x68, 0x72, 0x42, 0x56, 0x39, 0x2f, 0x74,
  0x76, 0x78, 0x34, 0x75, 0x53, 0x36, 0x77, 0x45, 0x70, 0x41, 0x63, 0x77,
  0x47, 0x4b, 0x71, 0x4b, 0x4d, 0x7a, 0x39, 0x32, 0x30, 0x32, 0x35, 0x57,
  0x65, 0x69, 0x6b, 0x4b, 0x68, 0x77, 0x64, 0x46, 0x42, 0x53, 0x76, 0x50,
  0x4b, 0x57, 0x64, 0x72, 0x57, 0x6a, 0x2f, 0x66, 0x74, 0x34, 0x56, 0x72,
  0x65, 0x4d, 0x31, 0x57, 0x2b, 0x6d, 0x70, 0x6b, 0x2f, 0x0a, 0x72, 0x55,
  0x75, 0x31, 0x4f, 0x51, 0x61, 0x75, 0x47, 0x4d, 0x61, 0x36, 0x36, 0x6d,
  0x47, 0x49, 0x32, 0x48, 0x4a, 0x49, 0x38, 0x46, 0x76, 0x39, 0x69, 0x63,
  0x4f, 0x59, 0x62, 0x4d, 0x4c, 0x75, 0x56, 0x63, 0x2b, 0x43, 0x4c, 0x68,
  0x53, 0x41, 0x50, 0x41, 0x76, 0x71, 0x4d, 0x45, 0x77, 0x47, 0x75, 0x47,
  0x59, 0x5a, 0x35, 0x6e, 0x2b, 0x49, 0x2b, 0x43, 0x4b, 0x70, 0x35, 0x35,
  0x30, 0x6c, 0x0a, 0x55, 0x35, 0x75, 0x2b, 0x70, 0x70, 0x57, 0x48, 0x78,
  0x5a, 0x45, 0x64, 0x34, 0x56, 0x76, 0x62, 0x68, 0x74, 0x6f, 0x7a, 0x37,
  0x66, 0x72, 0x4b, 0x64, 0x54, 0x4b, 0x2b, 0x74, 0x78, 0x61, 0x65, 0x51,
  0x74, 0x77, 0x79, 0x6f, 0x33, 0x5a, 0x66, 0x2f, 0x4a, 0x35, 0x58, 0x2b,
  0x54, 0x56, 0x77, 0x42, 0x2f, 0x39, 0x71, 0x49, 0x4c, 0x37, 0x2b, 0x2b,
  0x42, 0x34, 0x66, 0x43, 0x70, 0x56, 0x48, 0x0a, 0x65, 0x6c, 0x32, 0x6c,
  0x43, 0x39, 0x33, 0x63, 0x43, 0x5a, 0x36, 0x69, 0x75, 0x35, 0x74, 0x6f,
  0x4d, 0x6b, 0x2b, 0x52, 0x50, 0x45, 0x39, 0x66, 0x61, 0x79, 0x58, 0x48,
  0x5a, 0x4e, 0x75, 0x6c, 0x34, 0x43, 0x38, 0x5a, 0x4f, 0x49, 0x38, 0x2b,
  0x7a, 0x51, 0x59, 0x56, 0x32, 0x46, 0x39, 0x41, 0x4b, 0x43, 0x79, 0x77,
  0x54, 0x72, 0x6b, 0x46, 0x41, 0x75, 0x6a, 0x6d, 0x0a, 0x2d, 0x2d, 0x2d,
  0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x52, 0x53, 0x41, 0x20, 0x50, 0x52,
  0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d,
  0x2d, 0x2d, 0x0a
};

const std::vector<char> server_dh1024 =
{
  0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x44,
  0x48, 0x20, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53,
  0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a, 0x4d, 0x49, 0x47, 0x48, 0x41, 0x6f,
  0x47, 0x42, 0x41, 0x4d, 0x33, 0x34, 0x33, 0x50, 0x43, 0x44, 0x46, 0x50,
  0x6a, 0x73, 0x34, 0x72, 0x4f, 0x58, 0x6f, 0x6f, 0x70, 0x36, 0x6c, 0x59,
  0x30, 0x2f, 0x31, 0x71, 0x46, 0x59, 0x61, 0x7a, 0x5a, 0x53, 0x78, 0x2b,
  0x42, 0x36, 0x4d, 0x67, 0x2b, 0x4e, 0x50, 0x46, 0x51, 0x53, 0x32, 0x44,
  0x2f, 0x38, 0x4c, 0x69, 0x46, 0x67, 0x48, 0x44, 0x47, 0x78, 0x0a, 0x31,
  0x53, 0x55, 0x79, 0x74, 0x65, 0x38, 0x35, 0x51, 0x68, 0x74, 0x5a, 0x71,
  0x62, 0x76, 0x78, 0x47, 0x46, 0x68, 0x6c, 0x61, 0x79, 0x67, 0x46, 0x50,
  0x78, 0x64, 0x5a, 0x75, 0x58, 0x34, 0x6b, 0x5a, 0x78, 0x72, 0x52, 0x4a,
  0x32, 0x44, 0x5a, 0x39, 0x6e, 0x4b, 0x6f, 0x37, 0x4c, 0x57, 0x37, 0x30,
  0x53, 0x2f, 0x4d, 0x36, 0x73, 0x65, 0x6a, 0x4f, 0x2f, 0x30, 0x43, 0x5a,
  0x76, 0x2b, 0x49, 0x0a, 0x4a, 0x62, 0x70, 0x53, 0x45, 0x43, 0x2b, 0x6d,
  0x52, 0x37, 0x51, 0x75, 0x61, 0x36, 0x63, 0x73, 0x4a, 0x35, 0x44, 0x69,
  0x54, 0x7a, 0x2b, 0x69, 0x6d, 0x4a, 0x51, 0x51, 0x37, 0x64, 0x58, 0x55,
  0x64, 0x31, 0x58, 0x6e, 0x70, 0x64, 0x33, 0x4b, 0x33, 0x48, 0x74, 0x75,
  0x32, 0x54, 0x56, 0x35, 0x54, 0x63, 0x34, 0x72, 0x41, 0x67, 0x45, 0x43,
  0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x44, 0x48,
  0x20, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x2d,
  0x2d, 0x2d, 0x2d, 0x2d, 0x0a
};
