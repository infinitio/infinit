#ifndef INFINIT_ORACLES_TROPHONIUS_CLIENT_HH
# define INFINIT_ORACLES_TROPHONIUS_CLIENT_HH

# include <functional>
# include <queue>

# include <boost/date_time/posix_time/posix_time_types.hpp>

# include <elle/Error.hh>
# include <elle/format/json.hh>
# include <elle/json/json.hh>

# include <reactor/Barrier.hh>

# include <infinit/oracles/PeerTransaction.hh>
# include <infinit/oracles/LinkTransaction.hh>

namespace infinit
{
  namespace oracles
  {
    namespace trophonius
    {
      enum class NotificationType: int
      {
        <%! from infinit.oracles.notification import notifications %>
        %for name, value in notifications.items():
          ${name} = ${value},
        %endfor
      };

      /*-----------.
      | Exceptions |
      `-----------*/

      class ConnectionError
        : public elle::Error
      {
      public:
        typedef elle::Error Super;
        ConnectionError(std::string host, int port, std::string message);
        ELLE_ATTRIBUTE_R(std::string, host);
        ELLE_ATTRIBUTE_R(int, port);
      };

      class Unreachable
        : public ConnectionError
      {
      public:
        typedef ConnectionError Super;
        Unreachable(std::string host, int port, std::string message);
      };

      /// Base class for all notifications.
      struct Notification:
        public elle::Printable
      {
        NotificationType notification_type;

        ELLE_SERIALIZE_CONSTRUCT(Notification)
        {}

        Notification(NotificationType const type):
          notification_type{type}
        {}

        virtual ~Notification() = default;

        virtual
        void
        print(std::ostream& stream) const override;
      };

      struct ConfigurationNotification:
        public Notification
      {
        ConfigurationNotification(elle::json::Object json);
        elle::json::Object configuration;
      };

      struct InvalidCredentialsNotification:
        public Notification
      {
        InvalidCredentialsNotification()
          : Notification(NotificationType::invalid_credentials)
        {}
      };

      namespace json = elle::format::json;

      struct ConnectionEnabledNotification:
        public Notification
      {
        uint32_t response_code;
        std::string response_details;

        ELLE_SERIALIZE_CONSTRUCT(ConnectionEnabledNotification,
                                 Notification)
        {}
      };

      struct NewSwaggerNotification:
        public Notification
      {
        std::string user_id;

        ELLE_SERIALIZE_CONSTRUCT(NewSwaggerNotification,
                                 Notification)
        {}
      };

      struct DeletedSwaggerNotification:
        public Notification
      {
        std::string user_id;
        ELLE_SERIALIZE_CONSTRUCT(DeletedSwaggerNotification,
                                 Notification)
        {}
      };

      struct DeletedFavoriteNotification:
        public Notification
      {
        std::string user_id;
        ELLE_SERIALIZE_CONSTRUCT(DeletedFavoriteNotification,
                                 Notification)
        {}
      };

      struct UserStatusNotification:
        public Notification
      {
        std::string user_id;
        bool user_status;
        std::string device_id;
        bool device_status;

        ELLE_SERIALIZE_CONSTRUCT(UserStatusNotification,
                                 Notification)
        {}

        UserStatusNotification():
          Notification{NotificationType::user_status}
        {}

        void
        print(std::ostream& stream) const override;
      };

      struct LinkTransactionNotification:
        public Notification,
        public LinkTransaction
      {
        ELLE_SERIALIZE_CONSTRUCT(LinkTransactionNotification,
                                 Notification,
                                 LinkTransaction)
        {}

        virtual
        void
        print(std::ostream& stream) const override;
      };

      class PeerTransactionNotification
        : public Notification
        , public PeerTransaction
      {
      public:
        PeerTransactionNotification(elle::serialization::SerializerIn& input);
      };

      struct PeerReachabilityNotification:
        public Notification
      {
        PeerReachabilityNotification();
        std::string transaction_id;
        bool status;
        typedef std::pair<std::string, int> Endpoint;
        std::vector<Endpoint> endpoints_local;
        std::vector<Endpoint> endpoints_public;
      };

      struct MessageNotification:
        public Notification
      {
        std::string sender_id;
        std::string message;

        ELLE_SERIALIZE_CONSTRUCT(MessageNotification,
                                 Notification)
        {}
      };

      class Client:
        public elle::Printable
      {
      public:
        typedef std::function<void (bool)> ConnectCallback;
        typedef std::function<void (void)> ReconnectPokeFailedCallback;
      private:
        struct Impl;
        Impl* _impl;

      public:
        Client(ConnectCallback connect_callback,
               ReconnectPokeFailedCallback reconnect_failed_callback,
               std::vector<unsigned char> server_fingerprint,
               boost::posix_time::time_duration reconnection_cooldown = 10_sec);
        Client(std::string host,
               int port,
               ConnectCallback connect_callback,
               ReconnectPokeFailedCallback reconnect_failed_callback,
               std::vector<unsigned char> server_fingerprint,
               boost::posix_time::time_duration reconnection_cooldown = 10_sec);
        ~Client();

      public:
        void
        poke_timeout(reactor::Duration const& timeout);

        void
        connect_timeout(reactor::Duration const& timeout);

        void
        connect(std::string const& _id,
                std::string const& session_id,
                std::string const& device_id);
        void
        server(std::string const& host, int port);
        void
        disconnect();

        //GenericNotification
        std::unique_ptr<Notification>
        poll();

        int
        reconnected() const;
        ELLE_ATTRIBUTE_rx(reactor::Barrier, connected);
        ELLE_ATTRIBUTE_rw(boost::posix_time::time_duration, ping_period);
        ELLE_ATTRIBUTE_RW(boost::posix_time::time_duration,
                          reconnection_cooldown);

      /*----------.
      | Printable |
      `----------*/
      public:
        virtual
        void
        print(std::ostream& stream) const override;
      };

      std::ostream&
      operator <<(std::ostream& out,
                  NotificationType t);
    }
  }
}

#endif
