import drake
import drake.cxx
import drake.cxx.boost
import drake.valgrind

build = None
check = None
install = None
config = None
lib = None

def configure(elle,
              python_common,
              transaction_lib,
              transaction_config,
              boost = None,
              python3 = None,
              prefix = drake.Path('/usr/local'),
              cxx_toolkit = None,
              cxx_config = None,
              valgrind = None,
              valgrind_tests = False,
):

  global build, check, install, config, lib

  config = drake.cxx.Config()
  config += elle.elle.config
  config += elle.reactor.config
  config += transaction_config
  config.add_local_include_path('src')

  cxx_toolkit = cxx_toolkit or drake.cxx.Toolkit()
  cxx_config = cxx_config or drake.cxx.Config()

  if cxx_toolkit.os in [drake.os.windows, drake.os.ios, drake.os.android]:
    boost_filesystem = drake.cxx.Config(boost.config_filesystem(static = True))
    boost_system = drake.cxx.Config(boost.config_system(static = True))
    boost_test = drake.cxx.Config(boost.config_test(static = True))
  else:
    boost_filesystem = drake.cxx.Config(boost.config_filesystem(link = False))
    boost_filesystem.library_add(
      drake.copy(boost.filesystem_dynamic,
                 'lib', strip_prefix = True))
    boost_system = drake.cxx.Config(boost.config_system(link = False))
    boost_system.library_add(
      drake.copy(boost.system_dynamic,
                 'lib', strip_prefix = True))
    boost_test = drake.cxx.Config(boost.config_test(link = False))
    boost_test.library_add(
      drake.copy(boost.test_dynamic,
                 'lib', strip_prefix = True))

  local_cxx_config = cxx_config + config

  build = drake.Rule('build')
  install = drake.Rule('install')

  template_context = drake.templating.Context(
    sources = python_common,
    pythonpath = ('../../lib/python',))

  ## ------- ##
  ## Library ##
  ## ------- ##

  with template_context:
    sources = drake.nodes(
      'src/infinit/oracles/trophonius/Client.cc',
      'src/infinit/oracles/trophonius/ClientPrinter.cc.tmpl',
      'src/infinit/oracles/trophonius/Client.hh.tmpl',
      'src/infinit/oracles/trophonius/fwd.hh',
    )

  if cxx_toolkit.os in [drake.os.windows, drake.os.ios, drake.os.android]:
    Library = drake.cxx.StaticLib
    elle_lib = elle.elle.lib_static
    reactor_lib = elle.reactor.lib_static
  else:
    Library = drake.cxx.DynLib
    elle_lib = drake.copy(elle.elle.lib_dynamic, 'lib',
                          strip_prefix = True)
    reactor_lib = drake.copy(elle.reactor.lib_dynamic, 'lib',
                             strip_prefix = True)
    transaction_lib = drake.copy(transaction_lib, 'lib',
                                 strip_prefix = True)

  lib_cxx_config = drake.cxx.Config(local_cxx_config)
  lib_cxx_config.lib_path_runtime('../lib')
  lib = Library('lib/trophonius-client',
                sources + [reactor_lib, elle_lib, transaction_lib],
                cxx_toolkit,
                lib_cxx_config)
  build << lib

  ## ------ ##
  ## Python ##
  ## ------ ##

  # if python3 is not None:
  #   python_sources = drake.nodes(
  #     'src/infinit/oracles/trophonius/python.cc',
  #   )

  #   trophonius_python_cxx_config = drake.cxx.Config(local_cxx_config)
  #   trophonius_python_cxx_config += python3
  #   trophonius_python_cxx_config += boost.config_python()
  #   trophonius_python_cxx_config.lib_path_runtime('..')
  #   trophonius_python = drake.cxx.Module(
  #     'lib/python/infinit/oracles/trophonius/client',
  #     python_sources + [lib],
  #     cxx_toolkit,
  #     trophonius_python_cxx_config)
  #   build << trophonius_python

  ## ----- ##
  ## Tests ##
  ## ----- ##

  check = drake.TestSuite('check')
  tests = drake.Rule('tests')

  cxx_config_tests = drake.cxx.Config(local_cxx_config)
  cxx_config_tests.lib_path_runtime('../lib')
  cxx_config_tests += boost_filesystem
  cxx_config_tests += boost_test
  cxx_config_tests += boost_system
  if cxx_toolkit.os is drake.os.windows:
    cxx_config_tests.lib('shlwapi')
    cxx_config_tests.lib('ws2_32')
    cxx_config_tests.lib('gdi32')
    cxx_config_tests.lib('mswsock')
  if cxx_toolkit.os is drake.os.android:
    cxx_config_tests.lib('stdc++')
    cxx_config_tests.lib('atomic')
  if valgrind is not None:
    cxx_config_tests.define('VALGRIND')
  for name in ['trophonius']:
    test = drake.cxx.Executable(
      'tests/%s' % name,
      drake.nodes('tests/%s.cc' % name) + [lib,
                                           elle_lib,
                                           reactor_lib,
                                           elle.openssl_lib_ssl,
                                           elle.openssl_lib_crypto],
      cxx_toolkit,
      cxx_config_tests)
    tests << test
    if valgrind_tests:
      runner = drake.valgrind.ValgrindRunner(
        exe = test,
        valgrind = valgrind,
        valgrind_args = ['--suppressions=%s' % (drake.path_source() / 'elle' / 'valgrind.suppr')])
    else:
      runner = drake.Runner(exe = test)
    runner.reporting = drake.Runner.Reporting.on_failure
    check << runner.status
