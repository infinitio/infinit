import drake.cxx
import drake.cxx.boost
import drake.cxx.qt
import drake

def configure(cxx_toolkit, cxx_config, enable_horizon = True,
              optimization = True, prefix = '/usr', boost = None, qt = None):

  prefix = drake.Path(prefix)

  # Version
  version_major = '0'
  version_minor = '1'

  cxx_config.define('INFINIT_VERSION_MAJOR', version_major)
  cxx_config.define('INFINIT_VERSION_MINOR', version_minor)
  cxx_config.define('INFINIT_VERSION', '%s.%s' % (version_major, version_minor))

  # UDT
  asio_udt = drake.include('asio-udt', cxx_toolkit, cxx_config, boost = boost)
  asio_udt_lib = drake.copy(asio_udt.library, '', 'asio-udt')
  udt_lib = drake.copy(asio_udt.udt.library, '', 'asio-udt/udt')
  cxx_config = drake.cxx.Config(cxx_config)
  cxx_config += asio_udt.config
  cxx_config.enable_debug_symbols()

  # Boost
  boost = boost or drake.cxx.boost.Boost()
  cxx_config += boost.cfg
  cxx_config += boost.config_signals()
  cxx_config += boost.config_system()
  cxx_config += boost.config_filesystem()
  cxx_config += boost.config_thread()

  # OpenSSL
  openssl = None
  if cxx_toolkit.os == drake.os.linux:
    openssl = drake.cxx.LibraryConfiguration('openssl/opensslconf.h',
                                             prefix = 'dependencies/platforms/linux64/work/')
  elif cxx_toolkit.os == drake.os.macos:
    openssl = drake.cxx.LibraryConfiguration('openssl/opensslconf.h',
                                             prefix = 'dependencies/platforms/macosx64/work/')
  else:
    raise Exception("unsupported os")

  # Includes

  # Elle
  cxx_config.add_local_include_path('elle/reactor/src') # FIXME: circular dependency with reactor
  cxx_config.add_local_include_path('cryptography/sources') # FIXME: circular dependency with crypto
  elle = drake.include('elle', cxx_toolkit, cxx_config)
  elle_lib = drake.copy(elle.lib_dynamic, 'lib', 'elle/lib')
  cxx_config += elle.config

  reactor = drake.include('elle/reactor', cxx_toolkit, cxx_config, elle.config)
  reactor_lib = drake.copy(reactor.lib_dynamic, '', 'elle/reactor')
  cxx_config += reactor.config

  cxx_config.add_local_include_path('.')

  # Cryptography
  cryptography = drake.include('cryptography', cxx_toolkit, openssl.config(), reactor.config, elle.config, boost = boost)
  cryptography_lib = drake.copy(cryptography.lib_dynamic, 'lib', 'cryptography/lib')

  # Qt
  qt = qt or drake.cxx.qt.Qt()
  qt_cxx_config = drake.cxx.Config(cxx_config)
  qt_cxx_config.define('QT_NO_KEYWORDS')
  qt.plug(cxx_toolkit)

  # Fuse
  if enable_horizon:
    cxx_config.define('_FILE_OFFSET_BITS', 64) # FIXME: only needed for horizon
    cxx_config.define('INFINIT_HORIZON')
  cxx_config.define('BOOST_PP_VARIADICS')

  # Lune
  lune_sources = drake.nodes(
    'lune/Configuration.cc',
    'lune/Configuration.hh',
    'lune/Descriptor.cc',
    'lune/Descriptor.hh',
    'lune/Descriptor.hxx',
    'lune/Dictionary.cc',
    'lune/Dictionary.hh',
    'lune/Dictionary.hxx',
    'lune/Identity.cc',
    'lune/Identity.hh',
    'lune/Identity.hxx',
    'lune/Lune.cc',
    'lune/Lune.hh',
    'lune/Map.hh',
    'lune/Map.hxx',
    'lune/Phrase.cc',
    'lune/Phrase.hh',
    'lune/Phrase.hxx',
    'lune/Policy.cc',
    'lune/Policy.hh',
    'lune/Set.cc',
    'lune/Set.hh',
    'lune/Set.hxx',
    'lune/fwd.hh',
    )
  lune_lib = drake.cxx.DynLib('lib/lune', lune_sources,
                              cxx_toolkit, cxx_config)

  # Nucleus
  nucleus_sources = drake.nodes(
    'nucleus/Derivable.hh',
    'nucleus/Derivable.hxx',
    'nucleus/Exception.hh',
    'nucleus/Exception.hxx',
    'nucleus/all.hh',
    'nucleus/factory.cc',
    'nucleus/factory.hh',
    'nucleus/fwd.hh',
    'nucleus/neutron/Access.cc',
    'nucleus/neutron/Access.hh',
    'nucleus/neutron/Access.hxx',
    'nucleus/neutron/Attributes.cc',
    'nucleus/neutron/Attributes.hh',
    'nucleus/neutron/Attributes.hxx',
    'nucleus/neutron/Author.cc',
    'nucleus/neutron/Author.hh',
    'nucleus/neutron/Author.hxx',
    'nucleus/neutron/Catalog.cc',
    'nucleus/neutron/Catalog.hh',
    'nucleus/neutron/Catalog.hxx',
    'nucleus/neutron/Component.cc',
    'nucleus/neutron/Component.hh',
    'nucleus/neutron/Data.cc',
    'nucleus/neutron/Data.hh',
    'nucleus/neutron/Data.hxx',
    'nucleus/neutron/Ensemble.cc',
    'nucleus/neutron/Ensemble.hh',
    'nucleus/neutron/Ensemble.hxx',
    'nucleus/neutron/Entry.cc',
    'nucleus/neutron/Entry.hh',
    'nucleus/neutron/Entry.hxx',
    'nucleus/neutron/Fellow.cc',
    'nucleus/neutron/Fellow.hh',
    'nucleus/neutron/Fellow.hxx',
    'nucleus/neutron/Genre.cc',
    'nucleus/neutron/Genre.hh',
    'nucleus/neutron/Group.cc',
    'nucleus/neutron/Group.hh',
    'nucleus/neutron/Group.hxx',
    'nucleus/neutron/Index.hh',
    'nucleus/neutron/Object.cc',
    'nucleus/neutron/Object.hh',
    'nucleus/neutron/Object.hxx',
    'nucleus/neutron/Offset.hh',
    'nucleus/neutron/Permissions.cc',
    'nucleus/neutron/Permissions.hh',
    'nucleus/neutron/Range.hh',
    'nucleus/neutron/Range.hxx',
    'nucleus/neutron/Record.cc',
    'nucleus/neutron/Record.hh',
    'nucleus/neutron/Record.hxx',
    'nucleus/neutron/Reference.cc',
    'nucleus/neutron/Reference.hh',
    'nucleus/neutron/Reference.hxx',
    'nucleus/neutron/Size.hh',
    'nucleus/neutron/Subject.cc',
    'nucleus/neutron/Subject.hh',
    'nucleus/neutron/Subject.hxx',
    'nucleus/neutron/Token.cc',
    'nucleus/neutron/Token.hh',
    'nucleus/neutron/Token.hxx',
    'nucleus/neutron/Trait.cc',
    'nucleus/neutron/Trait.hh',
    'nucleus/neutron/Trait.hxx',
    'nucleus/neutron/User.hh',
    'nucleus/neutron/all.hh',
    'nucleus/neutron/fwd.hh',
    'nucleus/nucleus.hh',
    'nucleus/proton/Address.cc',
    'nucleus/proton/Address.hh',
    'nucleus/proton/Address.hxx',
    'nucleus/proton/Ambit.hh',
    'nucleus/proton/Ambit.hxx',
    'nucleus/proton/Annals.cc',
    'nucleus/proton/Annals.hh',
    'nucleus/proton/Balancing.hh',
    'nucleus/proton/Base.cc',
    'nucleus/proton/Base.hh',
    'nucleus/proton/Base.hxx',
    'nucleus/proton/Block.cc',
    'nucleus/proton/Block.hh',
    'nucleus/proton/Block.hxx',
    'nucleus/proton/Capacity.hh',
    'nucleus/proton/Clef.cc',
    'nucleus/proton/Clef.hh',
    'nucleus/proton/Clef.hxx',
    'nucleus/proton/ContentHashBlock.cc',
    'nucleus/proton/ContentHashBlock.hh',
    'nucleus/proton/ContentHashBlock.hxx',
    'nucleus/proton/Contention.hh',
    'nucleus/proton/Contents.cc',
    'nucleus/proton/Contents.hh',
    'nucleus/proton/Contents.hxx',
    'nucleus/proton/Door.hh',
    'nucleus/proton/Door.hxx',
    'nucleus/proton/Egg.cc',
    'nucleus/proton/Egg.hh',
    'nucleus/proton/Extent.hh',
    'nucleus/proton/Family.cc',
    'nucleus/proton/Family.hh',
    'nucleus/proton/Flags.cc',
    'nucleus/proton/Flags.hh',
    'nucleus/proton/Footprint.hh',
    'nucleus/proton/Handle.cc',
    'nucleus/proton/Handle.hh',
    'nucleus/proton/Handle.hxx',
    'nucleus/proton/Height.hh',
    'nucleus/proton/History.cc',
    'nucleus/proton/History.hh',
    'nucleus/proton/History.hxx',
    'nucleus/proton/ImmutableBlock.cc',
    'nucleus/proton/ImmutableBlock.hh',
    'nucleus/proton/ImmutableBlock.hxx',
    'nucleus/proton/ImprintBlock.cc',
    'nucleus/proton/ImprintBlock.hh',
    'nucleus/proton/ImprintBlock.hxx',
    'nucleus/proton/Inlet.hh',
    'nucleus/proton/Inlet.hxx',
    'nucleus/proton/Limits.cc',
    'nucleus/proton/Limits.hh',
    'nucleus/proton/Location.cc',
    'nucleus/proton/Location.hh',
    'nucleus/proton/Location.hxx',
    'nucleus/proton/Mode.cc',
    'nucleus/proton/Mode.hh',
    'nucleus/proton/MutableBlock.cc',
    'nucleus/proton/MutableBlock.hh',
    'nucleus/proton/MutableBlock.hxx',
    'nucleus/proton/Nature.cc',
    'nucleus/proton/Nature.hh',
    'nucleus/proton/Nest.cc',
    'nucleus/proton/Nest.hh',
    'nucleus/proton/Network.cc',
    'nucleus/proton/Network.hh',
    'nucleus/proton/Network.hxx',
    'nucleus/proton/Node.cc',
    'nucleus/proton/Node.hh',
    'nucleus/proton/Node.hxx',
    'nucleus/proton/Nodule.hh',
    'nucleus/proton/Nodule.hxx',
    'nucleus/proton/OwnerKeyBlock.cc',
    'nucleus/proton/OwnerKeyBlock.hh',
    'nucleus/proton/OwnerKeyBlock.hxx',
    'nucleus/proton/Porcupine.hh',
    'nucleus/proton/Porcupine.hxx',
    'nucleus/proton/PublicKeyBlock.cc',
    'nucleus/proton/PublicKeyBlock.hh',
    'nucleus/proton/PublicKeyBlock.hxx',
    'nucleus/proton/Quill.hh',
    'nucleus/proton/Quill.hxx',
    'nucleus/proton/Radix.cc',
    'nucleus/proton/Radix.hh',
    'nucleus/proton/Radix.hxx',
    'nucleus/proton/Revision.cc',
    'nucleus/proton/Revision.hh',
    'nucleus/proton/Revision.hxx',
    'nucleus/proton/Root.cc',
    'nucleus/proton/Root.hh',
    'nucleus/proton/Root.hxx',
    'nucleus/proton/Seam.hh',
    'nucleus/proton/Seam.hxx',
    'nucleus/proton/Stamp.cc',
    'nucleus/proton/Stamp.hh',
    'nucleus/proton/Stamp.hxx',
    'nucleus/proton/State.cc',
    'nucleus/proton/State.hh',
    'nucleus/proton/Statistics.cc',
    'nucleus/proton/Statistics.hh',
    'nucleus/proton/Strategy.cc',
    'nucleus/proton/Strategy.hh',
    'nucleus/proton/Tree.hh',
    'nucleus/proton/Tree.hxx',
    'nucleus/proton/Value.cc',
    'nucleus/proton/Value.hh',
    'nucleus/proton/Value.hxx',
    'nucleus/proton/all.hh',
    'nucleus/proton/fwd.hh',
    )
  nucleus_lib = drake.cxx.DynLib('lib/nucleus', nucleus_sources,
                                 cxx_toolkit, cxx_config)

  # Comet
  comet_sources = drake.nodes(
    'comet/RSA.hh',
    'comet/RSA.cc',
    'comet/BN.hh',
    'comet/Comet.hh',
    'comet/RAND.cc',
    'comet/BN.cc',
    'comet/RAND.hh',
    )
  comet_lib = drake.cxx.DynLib('lib/comet', comet_sources,
                               cxx_toolkit, cxx_config)

  # Protocol
  protocol_sources = drake.nodes(
    'protocol/ChanneledStream.hh',
    'protocol/Packet.hh',
    'protocol/RPC.hxx',
    'protocol/Packet.cc',
    'protocol/Stream.hh',
    'protocol/Serializer.hh',
    'protocol/Channel.cc',
    'protocol/RPC.hh',
    'protocol/ChanneledStream.cc',
    'protocol/Stream.cc',
    'protocol/Channel.hh',
    'protocol/Serializer.cc',
    'protocol/RPC.cc',
    'protocol/fwd.hh',
    )
  protocol_lib = drake.cxx.DynLib('lib/protocol', protocol_sources,
                                  cxx_toolkit, cxx_config)

  # RCP caller
  rpc_sources = drake.nodes(
    'protocol/8rpc.cc'
    )
  rpc_cxx_config = drake.cxx.Config(cxx_config)
  rpc_cxx_config.lib_path_runtime('../lib')
  rpc_bin = drake.cxx.Executable('bin/8rpc', rpc_sources + [reactor_lib,
                                                            asio_udt_lib,
                                                            udt_lib, # FIXME
                                                            elle_lib,
                                                            cryptography_lib,
                                                            comet_lib,
                                                            protocol_lib,
                                                            ],
                                 cxx_toolkit, rpc_cxx_config)

  # Plasma
  plasma_sources = drake.nodes(
    # 'plasma/watchdog/Application.hh',
    # 'plasma/watchdog/NetworkManager.hh',
    # 'plasma/watchdog/Client.cc',
    # 'plasma/watchdog/WatchdogInterface.cc',
    # 'plasma/watchdog/Manager.hh',
    # 'plasma/watchdog/Client.hh',
    # 'plasma/watchdog/LocalServer.hh',
    # 'plasma/watchdog/WatchdogInterface.hh',
    # 'plasma/watchdog/Connection.cc',
    # 'plasma/watchdog/InfinitNetwork.cc',
    # 'plasma/watchdog/LocalServer.cc',
    # 'plasma/watchdog/Application.cc',
    # 'plasma/watchdog/main.cc',
    # 'plasma/watchdog/InfinitNetwork.hh',
    # 'plasma/watchdog/Manager.cc',
    # 'plasma/watchdog/Connection.hh',
    # 'plasma/watchdog/NetworkManager.cc',
    # 'plasma/watchdog/ClientActions.cc',
    'plasma/meta/Client.cc',
    'plasma/meta/Client.hh',
    'plasma/plasma.cc',
    'plasma/watchdog/ClientActions.hh',
    )
  plasma_lib = drake.cxx.DynLib('lib/plasma', plasma_sources,
                                cxx_toolkit, cxx_config)

  # Agent
  agent_sources = drake.nodes(
    'agent/Agent.hh',
    'agent/Agent.cc',
    )
  agent_lib = drake.cxx.DynLib('lib/agent', agent_sources,
                               cxx_toolkit, cxx_config)

  # Infinit
  infinit_sources = drake.nodes(
    'Infinit.cc',
    'HoleFactory.cc',
    'common/common.cc',
    )
  infinit_lib = drake.cxx.DynLib('lib/infinit', infinit_sources,
                                 cxx_toolkit, cxx_config)

  # Hole
  hole_sources = drake.nodes(
    'hole/Hole.cc',
    'hole/Hole.hh',
    'hole/Label.cc',
    'hole/Label.hh',
    'hole/Label.hxx',
    'hole/Model.cc',
    'hole/Model.hh',
    'hole/Model.hxx',
    'hole/Openness.cc',
    'hole/Openness.hh',
    'hole/algorithms/assignment/Assignment.hh',
    'hole/fwd.hh',
    'hole/implementations/Implementations.hh',
    # 'hole/implementations/cirkle/Cirkle.cc',
    # 'hole/implementations/cirkle/Cirkle.hh',
    # 'hole/implementations/cirkle/Cluster.cc',
    # 'hole/implementations/cirkle/Cluster.hh',
    # 'hole/implementations/cirkle/Cluster.hxx',
    # 'hole/implementations/cirkle/Implementation.cc',
    # 'hole/implementations/cirkle/Implementation.hh',
    # 'hole/implementations/cirkle/Machine.cc',
    # 'hole/implementations/cirkle/Machine.hh',
    # 'hole/implementations/cirkle/Manifest.hh',
    # 'hole/implementations/cirkle/Neighbour.cc',
    # 'hole/implementations/cirkle/Neighbour.hh',
    # 'hole/implementations/cirkle/Neighbourhood.cc',
    # 'hole/implementations/cirkle/Neighbourhood.hh',
    # 'hole/implementations/cirkle/RoutingTable.cc',
    # 'hole/implementations/cirkle/RoutingTable.hh',
    'hole/implementations/local/Implementation.cc',
    'hole/implementations/local/Implementation.hh',
    'hole/implementations/local/Local.cc',
    'hole/implementations/local/Local.hh',
    'hole/implementations/local/Machine.cc',
    'hole/implementations/local/Machine.hh',
    'hole/implementations/local/fwd.hh',
    'hole/implementations/remote/Client.cc',
    'hole/implementations/remote/Client.hh',
    'hole/implementations/remote/Customer.cc',
    'hole/implementations/remote/Customer.hh',
    'hole/implementations/remote/Implementation.cc',
    'hole/implementations/remote/Implementation.hh',
    'hole/implementations/remote/Machine.cc',
    'hole/implementations/remote/Machine.hh',
    'hole/implementations/remote/Manifest.cc',
    'hole/implementations/remote/Manifest.hh',
    'hole/implementations/remote/Remote.cc',
    'hole/implementations/remote/Remote.hh',
    'hole/implementations/remote/Server.cc',
    'hole/implementations/remote/Server.hh',
    'hole/implementations/remote/fwd.hh',
    'hole/implementations/slug/Host.cc',
    'hole/implementations/slug/Host.hh',
    'hole/implementations/slug/Implementation.cc',
    'hole/implementations/slug/Implementation.hh',
    'hole/implementations/slug/Machine.cc',
    'hole/implementations/slug/Machine.hh',
    'hole/implementations/slug/Manifest.cc',
    'hole/implementations/slug/Manifest.hh',
    'hole/implementations/slug/fwd.hh',
    'hole/storage/Storage.cc',
    'hole/storage/Storage.hh',
    'hole/storage/Directory.cc',
    'hole/storage/Directory.hh',
    )
  hole_lib = drake.cxx.DynLib('lib/hole', hole_sources,
                              cxx_toolkit, cxx_config)

# XXX
#  hole_tests_root = drake.Path('hole/tests')
#  for test in ['slug']:
#    drake.cxx.Executable(hole_tests_root / test,
#                         drake.nodes(hole_tests_root / ('%s.cc' % test)) +
#                         [reactor.lib_dynamic, elle.lib_dynamic, cryptography_lib,
#                          hole_lib, comet_lib, nucleus_lib, protocol_lib],
#                         cxx_toolkit, cxx_config + boost.config_test())

  # Etoile
  etoile_sources = drake.nodes(
    'etoile/Etoile.cc',
    'etoile/Etoile.hh',
    'etoile/abstract/Group.cc',
    'etoile/abstract/Group.hh',
    'etoile/abstract/Group.hxx',
    'etoile/abstract/Object.cc',
    'etoile/abstract/Object.hh',
    'etoile/abstract/Object.hxx',
    'etoile/abstract/fwd.hh',
    'etoile/automaton/Access.cc',
    'etoile/automaton/Access.hh',
    'etoile/automaton/Attributes.cc',
    'etoile/automaton/Attributes.hh',
    'etoile/automaton/Author.cc',
    'etoile/automaton/Author.hh',
    'etoile/automaton/Automaton.hh',
    'etoile/automaton/Contents.hh',
    'etoile/automaton/Contents.hxx',
    'etoile/automaton/Directory.cc',
    'etoile/automaton/Directory.hh',
    'etoile/automaton/Ensemble.cc',
    'etoile/automaton/Ensemble.hh',
    'etoile/automaton/File.cc',
    'etoile/automaton/File.hh',
    'etoile/automaton/Group.cc',
    'etoile/automaton/Group.hh',
    'etoile/automaton/Link.cc',
    'etoile/automaton/Link.hh',
    'etoile/automaton/Object.cc',
    'etoile/automaton/Object.hh',
    'etoile/automaton/Rights.cc',
    'etoile/automaton/Rights.hh',
    'etoile/automaton/Rights.hxx',
    'etoile/depot/Depot.cc',
    'etoile/depot/Depot.hh',
    'etoile/depot/Depot.hxx',
    'etoile/fwd.hh',
    'etoile/gear/Action.cc',
    'etoile/gear/Action.hh',
    'etoile/gear/Action.hxx',
    'etoile/gear/Actor.cc',
    'etoile/gear/Actor.hh',
    'etoile/gear/Chronicle.hh',
    'etoile/gear/Context.cc',
    'etoile/gear/Context.hh',
    'etoile/gear/Directory.cc',
    'etoile/gear/Directory.hh',
    'etoile/gear/File.cc',
    'etoile/gear/File.hh',
    'etoile/gear/Gear.cc',
    'etoile/gear/Gear.hh',
    'etoile/gear/Group.cc',
    'etoile/gear/Group.hh',
    'etoile/gear/Guard.cc',
    'etoile/gear/Guard.hh',
    'etoile/gear/Identifier.cc',
    'etoile/gear/Identifier.hh',
    'etoile/gear/Identifier.hxx',
    'etoile/gear/Link.cc',
    'etoile/gear/Link.hh',
    'etoile/gear/Nature.hh',
    'etoile/gear/Object.cc',
    'etoile/gear/Object.hh',
    'etoile/gear/Operation.hh',
    'etoile/gear/Scope.cc',
    'etoile/gear/Scope.hh',
    'etoile/gear/Scope.hxx',
    'etoile/gear/Transcript.cc',
    'etoile/gear/Transcript.hh',
    'etoile/gear/fwd.hh',
    'etoile/journal/Journal.cc',
    'etoile/journal/Journal.hh',
    'etoile/nest/Nest.cc',
    'etoile/nest/Nest.hh',
    'etoile/nest/Pod.cc',
    'etoile/nest/Pod.hh',
    'etoile/nest/fwd.hh',
    'etoile/path/Chemin.cc',
    'etoile/path/Chemin.hh',
    'etoile/path/Chemin.hxx',
    'etoile/path/Length.hh',
    'etoile/path/Path.cc',
    'etoile/path/Path.hh',
    'etoile/path/Route.cc',
    'etoile/path/Route.hh',
    'etoile/path/Route.hxx',
    'etoile/path/Slab.hh',
    'etoile/path/Slice.hh',
    'etoile/path/Venue.cc',
    'etoile/path/Venue.hh',
    'etoile/path/Venue.hxx',
    'etoile/path/Way.cc',
    'etoile/path/Way.hh',
    'etoile/path/Way.hxx',
    'etoile/path/fwd.hh',
    'etoile/portal/Application.cc',
    'etoile/portal/Application.hh',
    'etoile/portal/Manifest.cc',
    'etoile/portal/Manifest.hh',
    'etoile/portal/Portal.cc',
    'etoile/portal/Portal.hh',
    'etoile/portal/fwd.hh',
    'etoile/shrub/Riffle.cc',
    'etoile/shrub/Riffle.hh',
    'etoile/shrub/Shrub.cc',
    'etoile/shrub/Shrub.hh',
    'etoile/wall/Access.cc',
    'etoile/wall/Access.hh',
    'etoile/wall/Attributes.cc',
    'etoile/wall/Attributes.hh',
    'etoile/wall/Directory.cc',
    'etoile/wall/Directory.hh',
    'etoile/wall/File.cc',
    'etoile/wall/File.hh',
    'etoile/wall/Group.cc',
    'etoile/wall/Group.hh',
    'etoile/wall/Link.cc',
    'etoile/wall/Link.hh',
    'etoile/wall/Object.cc',
    'etoile/wall/Object.hh',
    'etoile/wall/Object.hxx',
    'etoile/wall/Path.cc',
    'etoile/wall/Path.hh',
    'etoile/wall/Wall.hh',
    )
  etoile_lib = drake.cxx.DynLib('lib/etoile', etoile_sources,
                                cxx_toolkit, cxx_config)

  # Horizon
  if enable_horizon:
    horizon_sources = drake.nodes(
      'horizon/Crib.cc',
      'horizon/Crib.hh',
      'horizon/Crux.cc',
      'horizon/Handle.cc',
      'horizon/Handle.hh',
      'horizon/Horizon.cc',
      'horizon/Horizon.hh',
      'horizon/operations.hh',
      )
    if cxx_toolkit.os == drake.os.linux:
      horizon_sources += drake.nodes(
        'horizon/linux/FUSE.cc',
        'horizon/linux/FUSE.hh',
        'horizon/linux/FUker.cc',
        'horizon/linux/FUker.hh',
        'horizon/linux/Linux.cc',
        'horizon/linux/Linux.hh',
        'horizon/linux/fwd.hh',
        )
    elif cxx_toolkit.os == drake.os.macos:
      horizon_sources += drake.nodes(
        'horizon/macosx/Crux.hh',
        'horizon/macosx/Crux.cc',
        'horizon/macosx/FUSE.hh',
        'horizon/macosx/FUSE.cc',
        'horizon/macosx/FUker.hh',
        'horizon/macosx/FUker.cc',
        'horizon/macosx/MacOSX.hh',
        'horizon/macosx/MacOSX.cc',
        'horizon/macosx/fwd.hh',
        )
    else:
      raise Exception('unsupport os')

    horizon_lib = drake.cxx.DynLib('lib/horizon', horizon_sources,
                                   cxx_toolkit, cxx_config)
    horizon_slib = drake.cxx.StaticLib('lib/horizon', horizon_sources,
                                       cxx_toolkit, cxx_config)


  ## ----- ##
  ## Build ##
  ## ----- ##

  build = drake.Rule('build')

  ## -------- ##
  ## Programs ##
  ## -------- ##

  infinit_libs = [
    agent_lib,
    comet_lib,
    etoile_lib,
    hole_lib,
    infinit_lib,
    lune_lib,
    nucleus_lib,
    plasma_lib,
    cryptography_lib,
    protocol_lib,
    reactor_lib,
    elle_lib,
    ]
  if enable_horizon:
    infinit_libs.append(horizon_slib)
  infinit_libs += [asio_udt_lib, udt_lib] # FIXME: no need to depend on UDT

  # 8infinit
  infinit_bin_config = drake.cxx.Config(cxx_config)
  infinit_bin_config += boost.config_thread()
  infinit_bin_config.lib_path_runtime('../lib')
  if enable_horizon:
    infinit_bin_config.lib('fuse')
  infinit_bin = drake.cxx.Executable('bin/8infinit',
                                     drake.nodes('_infinit.cc') + infinit_libs,
                                     cxx_toolkit, infinit_bin_config)
  build << infinit_bin

  # 8hole
  hole_cxx_config = drake.cxx.Config(cxx_config)
  hole_cxx_config.lib('fuse')
  hole_bin = drake.cxx.Executable('bin/8hole',
                                  drake.nodes('hole/_hole.cc') + infinit_libs,
                                  cxx_toolkit, hole_cxx_config)
  build << hole_bin

  # 8group
  group_sources = drake.nodes(
    'satellites/group/Group.cc',
    'satellites/group/Group.hh',
    'satellites/group/Group.hxx',
    )
  group_bin = drake.cxx.Executable('bin/8group',
                                   group_sources + infinit_libs,
                                   cxx_toolkit, infinit_bin_config)
  build << group_bin

  # 8access
  access_sources = drake.nodes(
    'satellites/access/Access.cc',
    'satellites/access/Access.hh',
    'satellites/access/Access.hxx',
    )
  access_bin = drake.cxx.Executable('bin/8access',
                                   access_sources + infinit_libs,
                                   cxx_toolkit, infinit_bin_config)
  build << access_bin

  # 8authority
  authority_sources = drake.nodes(
    'satellites/authority/Authority.cc',
    'satellites/authority/Authority.hh',
    'satellites/authority/Authority.hxx',
    )
  authority_bin = drake.cxx.Executable('bin/8authority',
                                       authority_sources + infinit_libs,
                                       cxx_toolkit, infinit_bin_config)
  build << authority_bin

  # 8user
  user_sources = drake.nodes(
    'satellites/user/User.cc',
    'satellites/user/User.hh',
    'satellites/user/User.hxx',
    )
  user_bin = drake.cxx.Executable('bin/8user',
                                  user_sources + infinit_libs,
                                  cxx_toolkit, infinit_bin_config)
  build << user_bin

  # 8passport
  passport_sources = drake.nodes(
    'satellites/passport/Passport.cc',
    'satellites/passport/Passport.hh',
    'satellites/passport/Passport.hxx',
    )
  passport_bin = drake.cxx.Executable('bin/8passport',
                                      passport_sources + infinit_libs,
                                      cxx_toolkit, infinit_bin_config)
  build << passport_bin

  # 8network
  network_sources = drake.nodes(
    'satellites/network/Network.cc',
    'satellites/network/Network.hh',
    'satellites/network/Network.hxx',
    )
  network_bin = drake.cxx.Executable('bin/8network',
                                     network_sources + infinit_libs,
                                     cxx_toolkit, infinit_bin_config)
  build << network_bin

  # 8transfer
  transfer_sources = drake.nodes(
    'satellites/transfer/Transfer.cc',
    'satellites/transfer/Transfer.hh',
    )
  transfer_bin = drake.cxx.Executable('bin/8transfer',
                                   transfer_sources + infinit_libs,
                                   cxx_toolkit, infinit_bin_config)
  build << transfer_bin

  # 8progress
  progress_sources = drake.nodes(
    'satellites/progress/Progress.cc',
    'satellites/progress/Progress.hh',
    'satellites/progress/Progress.hxx',
    )
  progress_bin = drake.cxx.Executable('bin/8progress',
                                   progress_sources + infinit_libs,
                                   cxx_toolkit, infinit_bin_config)
  build << progress_bin

  # Trophonius

  tropho_cxx_config = drake.cxx.Config(cxx_config)
  tropho_sources = drake.nodes(
    'plasma/trophonius/Client.cc',
    'plasma/trophonius/Client.hh',
    )
  tropho_lib = drake.cxx.DynLib('lib/trophonius',
                             tropho_sources,
                             cxx_toolkit, cxx_config)

  # GAP

  gap_cxx_config = drake.cxx.Config(qt_cxx_config)
  gap_cxx_config.add_system_include_path('/usr/include/python3.2/')
  gap_cxx_config.lib_path_runtime('.')
  gap_sources = drake.nodes(
    'surface/gap/State.cc',
    'surface/gap/State.hh',
    'surface/gap/gap.cc',
    'surface/gap/gap.h',
    'surface/gap/_detail/InfinitInstanceManager.cc',
    'surface/gap/_detail/device.cc',
    'surface/gap/_detail/file.cc',
    'surface/gap/_detail/network.cc',
    'surface/gap/_detail/notification.cc',
    'surface/gap/_detail/process.cc',
    'surface/gap/_detail/swagger.cc',
    'surface/gap/_detail/transaction.cc',
    'surface/gap/_detail/user.cc',
    )
  gap_cxx_config += qt.config()
  gap_cxx_config += qt.cfg_network
  gap_lib = drake.cxx.DynLib('lib/gap',
                             gap_sources + infinit_libs,
                             cxx_toolkit, gap_cxx_config)
  build << gap_lib

  # GAP python

  gap_python_cxx_config = drake.cxx.Config(qt_cxx_config)
  gap_python_cxx_config.add_system_include_path('/usr/include/python3.2/')
  gap_python_sources = drake.nodes(
    'surface/gap/python/pygap.cc',
    # FIXME: for longinus port temporarily
    'common/common.cc',
    )
  gap_python_cxx_config += boost.config_python()
  gap_python_cxx_config.add_system_include_path('/usr/include/python3.2')
  gap_python_cxx_config.lib_path_runtime('..')
  gap_python_lib = drake.cxx.Module('lib/python/_gap',
                                    # FIXME: sooooo many libs ...
                                    gap_python_sources + [gap_lib, tropho_lib] + infinit_libs,
                                    cxx_toolkit, gap_python_cxx_config)
  build << gap_python_lib

  # Watchdog
  watchdog_sources = drake.nodes(
    'plasma/watchdog/Application.cc',
    'plasma/watchdog/Application.hh',
    'plasma/watchdog/Client.cc',
    'plasma/watchdog/Client.hh',
    'plasma/watchdog/ClientActions.cc',
    'plasma/watchdog/ClientActions.hh',
    'plasma/watchdog/Connection.cc',
    'plasma/watchdog/Connection.hh',
    'plasma/watchdog/InfinitNetwork.cc',
    'plasma/watchdog/InfinitNetwork.hh',
    'plasma/watchdog/LocalServer.cc',
    'plasma/watchdog/LocalServer.hh',
    'plasma/watchdog/Manager.cc',
    'plasma/watchdog/Manager.hh',
    'plasma/watchdog/NetworkManager.cc',
    'plasma/watchdog/NetworkManager.hh',
    'plasma/watchdog/WatchdogInterface.cc',
    'plasma/watchdog/WatchdogInterface.hh',
    'plasma/watchdog/main.cc',
    )
  watchdog_cxx_config = drake.cxx.Config(qt_cxx_config)
  # watchdog_cxx_config += boost.config_python()
  watchdog_cxx_config += qt.config()
  watchdog_cxx_config += qt.cfg_network
  watchdog_cxx_config += elle.config
  watchdog_cxx_config.lib_path_runtime('../lib')
  watchdog_bin = drake.cxx.Executable('bin/8watchdog',
                                      watchdog_sources + [tropho_lib] + infinit_libs,
                                      cxx_toolkit, watchdog_cxx_config)

  # Install
  install = drake.Rule('install')
  install << drake.copy(infinit_bin, prefix)
  install << drake.copy(infinit_libs + [udt_lib, asio_udt_lib], prefix)

  # # Tests
  # tests_cxx_config = drake.cxx.Config(cxx_config)
  # tests_cxx_config += boost.config_test()
  # tests = ['tests/unit/protocol/rpc.cc']
  # for test in tests:
  #   bin_path = drake.Path(test)
  #   bin_path.extension = ''
  #   bin = drake.cxx.Executable(bin_path,
  #                              drake.nodes(test) + [

  #       infinit_lib,
  #       elle.lib_dynamic,
  #       etoile_lib,
  #       reactor.lib_dynamic,
  #       cryptography_lib,
  #       protocol_lib,
  #       lune_lib,
  #       nucleus_lib,
  #       comet_lib,
  #       hole_lib,
  #       horizon_lib
  #       ],
  #                              cxx_toolkit, tests_cxx_config)
