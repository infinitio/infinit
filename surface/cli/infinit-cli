#!/usr/bin/env python3
# -*- encoding: utf-8 -*-


"""
Infinit launcher for unices.
"""

import argparse
import cmd
import getpass
import os
import re
import stat
import sys
import glob
import shlex

# Poll thread
import time
import threading


try:
    import readline
except:
    try:
        import pyreadline as readline
    except:
        print('Warning: you should install python readline package.')
try:
    import rlcompleter
    if sys.platform == 'darwin':
        readline.parse_and_bind("bind ^I rl_complete")
    else:
        readline.parse_and_bind("tab: complete")
except:
    pass

INFINIT_DEFAULT_HOME = os.path.join(
    os.path.expanduser('~'), '.infinit'
)
INFINIT_DEFAULT_DOWNLOAD_DIR = os.path.join(
    os.path.expanduser('~'), 'Downloads'
)

INFINIT_HOME = os.environ.get('INFINIT_HOME', INFINIT_DEFAULT_HOME)
INFINIT_KEY_PATH = os.environ.get('INFINIT_KEY_PATH')

if 'darwin' in sys.platform.lower():
    INFINIT_PLATFORM = 'macosx'
elif 'linux' in sys.platform.lower():
    INFINIT_PLATFORM = 'linux'
else:
    raise Exception("Unsupported platform")

if sys.maxsize > 2**32:
    INFINIT_PLATFORM += '64'
else:
    INFINIT_PLATFORM += '32'

MANIFEST_URI = "http://download.development.infinit.io/%s/manifest.xml" % INFINIT_PLATFORM

SHELL_INTRO = """
Welcome to the infinit shell (type help for a list of commands).
"""

EMAIL_REGEXP = re.compile(
    r"(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*"  # dot-atom
    r'|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-011\013\014\016-\177])*"' # quoted-string
    r')@(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?$',
    re.IGNORECASE
)

parser = argparse.ArgumentParser(description="Infinit launcher")

parser.add_argument(
    'action',
    choices=['register', 'start', 'stop', 'shell'],
    nargs='+',
    help="Action done once logged in",
)

parser.add_argument(
    '--update', '-n',
    help="Skip the update process",
    action="store_true",
)

parser.add_argument(
    '--debug', '-d',
    help="Enable debug mode",
    action="store_true",
)

parser.add_argument(
    '--auto-start',
    help="Enable debug mode",
    action="store_true",
)
parser.add_argument(
    '--user',
    help="User name",
    action="store",
    default=None,
)
parser.add_argument(
    '--email',
    help="User email",
    action="store",
    default=None,
)
parser.add_argument(
    '--password',
    help="User password",
    action="store",
    default=None,
)

parser.add_argument(
    '--device',
    help="User password",
    action="store",
    default=None,
)

pollThread = None

def make_simple_argument_parser(prog=None,
                                description=None,
                                add_help=False,
                                args=None):
    parser = argparse.ArgumentParser(prog=prog,
                                     description=description,
                                     add_help=add_help)
    def raise_parser_exception(self, status=None, message=""):
        raise Exception(message)
    parser.exit = raise_parser_exception
    for arg in args:
        flags = arg.pop('flags')
        if not (isinstance(flags, list) or isinstance(flags, tuple)):
            flags = (flags,)
        parser.add_argument(*flags, **arg)
    return parser

def get_candidates_for_path(path, magic):
    path = os.path.expanduser(path)
    path = os.path.expandvars(path)
    save = path
    candidates = []
    if os.path.isdir(path):
        path = path + "*"
        candidates = [p[len(save):] for p in glob.glob(path)]
    # else:
    #     path = path + "*"
    #     _candidates = [p for p in glob.glob(path)]
    #     if len(_candidates) > 0:
    #        candidates = [p[len(os.path.dirname(p)  + magic + os.path.basename(save)):] for p in _candidates]
    #        candidates = [magic + p for p in candidates]
    return candidates

class InfinitShell(cmd.Cmd):
    def __init__(self, state, args):
        self._state = state
        self._args = args
        self._notifs = []
        self._notifs_old = []
        self._attach_callbacks()
        super(InfinitShell, self).__init__()

    def _attach_callbacks(self):
        self._state.transaction_callback(self._incomming_transfer_handler)
        self._state.message_callback(self._message_handler)

    def _check_process_status(self, id_):
        return self._state.process_status(id_)

    @property
    def prompt(self):
      return self._state.email + '(' + str(len(self._notifs)) + ') $ '

    def default(self, line):
        if line == 'EOF':
            print('exit')
            raise KeyboardInterrupt()
        print("Command not found:", line)

    def emptyline(self):
        pass

    def _get_args(self, parser, line):
        try:
            return parser.parse_args(line.strip().split())
        except Exception as e:
            print(str(e).strip())

    ###########################################################################
    # Retreive networks.

    _networks_argument_parser = make_simple_argument_parser(
        prog = "networks",
        description = "Print all networks",
        args = [],
    )

    def do_networks(self, line):
        """Print networks."""
        args = self._get_args(self._networks_argument_parser, line)

        if not args:
            return

        try:
            networks = self._state.networks()
            for network_id in networks:
                print(self._state.network_name(network_id),
                      '(%s)' % network_id)
                mnt = None
                try: mnt = self._state.network_mount_point(network_id)
                except: pass
                print('\t- mount point:', mnt)
        except Exception as e:
            print(e)

    def help_networks(self):
        self._networks_argument_parser.print_help()

    ###########################################################################
    # Create network.

    _create_network_argument_parser = make_simple_argument_parser(
        prog = "create_network",
        description = "Create a new network",
        args = [
            {
                'flags': 'name',
                'help': "The network name",
            },
        ]
    )

    def help_create_network(self):
        self._create_network_argument_parser.print_help()

    def do_create_network(self, line):
        args = self._get_args(self._create_network_argument_parser, line)

        if not args:
            return

        try:
            self._state.create_network(args.name)
        except Exception as e:
            print(e)

    ###########################################################################
    # Refresh networks.

    def do_refresh_networks(self, args):
        """Refresh networks."""
        try:
            self._state.refresh_networks()
        except Exception as e:
            print(e)

    ###########################################################################
    # Log out from infinit.

    def do_logout(self, args):
        try:
            self._state.logout()
        except Exception as e:
            print(e)

    ###########################################################################
    # Search user.
    _search_users_argument_parser = make_simple_argument_parser(
        prog = "search_users",
        description = "Print all users",
        args = [
            {
                'flags':'search',
                'help':'The user email or fullname.'
            }
        ],
    )

    def do_search_users(self, line):
        """Print search_users."""
        args = self._get_args(self._search_users_argument_parser, line)

        if not args:
            return

        try:
            search_ = args.search

            users = self._state.search_users(search_)
            for user_id in users:
                print(user_id, ":", self._state.user_fullname(user_id), "-", self._state.user_email(user_id))
        except Exception as e:
            print(e)

    def help_search_users(self):
        self._search_users_argument_parser.print_help()

    ###########################################################################
    # Get swaggers.

    _swaggers_argument_parser = make_simple_argument_parser(
        prog = "swaggers",
        description = "Print all users",
        args = [],
    )

    def do_swaggers(self, line):
        """Print swaggers."""
        args = self._get_args(self._swaggers_argument_parser, line)

        if not args:
            return

        try:
            users = self._state.get_swaggers()
            for user_id in users:
                print(user_id, ":", self._state.user_fullname(user_id), "-", self._state.user_email(user_id))
        except Exception as e:
            print(e)

    def help_swaggers(self):
        self._swaggers_argument_parser.print_help()

    ###########################################################################
    # Invite a user to a network.

    _invite_argument_parser = make_simple_argument_parser(
        prog = "invite",
        description = "Invite a user to join one of your networks",
        args = [
            {
                'flags': 'user',
                'help': 'email of the user to invite (can also be its id).',
            },
            {
                'flags': 'network',
                'help': 'The network name (or id) you want to share.',
            },
        ],
    )

    def help_invite(self):
        self._invite_argument_parser.print_help()

    def do_invite(self, line):
        args = self._get_args(self._invite_argument_parser, line)

        if not args:
            return

        network_id = None
        for id_ in self._state.networks():
            if id_ == args.network or \
               self._state.network_name(id_) == args.network:
                network_id = id_
                break

        if network_id is None:
            print("Cannot find any network with the name or id '%s'" % args.network)
            return

        try:
            self._state.network_add_user(network_id, args.user)
        except Exception as e:
            print(e)

    def do_create_device(self, args=""):
        """Create local device with specified name or your host name"""
        dev_name = args.strip()
        if not dev_name:
            import socket
            dev_name = socket.gethostname().strip()
        try:
            self._state.set_device_name(dev_name)
        except Exception as e:
            print(e)

    ###########################################################################
    # Send files.
    _sendfiles_argument_parser = make_simple_argument_parser(
        prog = "sendfiles",
        description = "Invite a user to exchange a file. If the user doesn't exist, invite him to infinit.",
        args = [
            {
                'flags': 'user',
                'help': 'email of the user to invite (can also be its id).',
            },
            {
                'flags': 'files',
                'nargs': '+',
#                'action': 'append',
                'help': 'files to send.',
            }
        ],
    )

    def help_sendfiles(self):
        self._sendfiles_argument_parser.print_help()

    def do_sendfiles(self, line):
        args = self._get_args(self._sendfiles_argument_parser, line)

        if not args:
            return

        try:
            recipient = args.user
            files = args.files

            # XXX: use a thread to ask "sendfile" status for time to time.
            # using self._check_process_status(_id) with _id = value returned by sendfile.
            self._state.send_files(recipient, files)

        except Exception as e:
            print(e)

    def complete_sendfiles(self, text, line, begidx, endidx):
        tok = shlex.split(line)
        if len(tok) == 1 and len(text) > 0:
            return [t for t in len(self._state.get_swaggers()) and self._state.get_swaggers() or self._state.search_users(text) if t.startswith(text)]
        if len(tok) > 1:
            return get_candidates_for_path(tok[len(tok) - 1], line[begidx:endidx])

    ###########################################################################
    # Set output dir.

    _set_output_dir_argument_parser = make_simple_argument_parser(
        prog = "set_output_dir",
        description = "Set the output directory where the files are going to be downloaded.",
        args = [
            {
                'flags': 'output_dir',
                'help': 'the directory to put file on.',
            }
        ],
    )

    def help_set_output_dir(self):
        self._set_output_dir_argument_parser.print_help()

    def do_set_output_dir(self, line):
        args = self._get_args(self._set_output_dir_argument_parser, line)

        if not args:
            return

        try:
            output_dir = args.output_dir

            self._state.set_output_dir(output_dir)
        except Exception as e:
            print(e)

    def complete_set_output_dir(self, text, line, begidx, endidx):
        sp = line.split(" ")
        if len(sp) == 2:
            return get_candidates_for_path(line, line[begidx:endidx])


    ###########################################################################
    # Retreive transactions.

    _transactions_argument_parser = make_simple_argument_parser(
        prog = "transactions",
        description = "Print all transactions",
        args = [],
    )

    def do_transactions(self, line):
        """Print transactions."""
        args = self._get_args(self._transactions_argument_parser, line)
        try:
            transactions = self._state.transactions()
            transactions = [(t, self._state.transaction_status(t)) for t in transactions]
            print(", ".join('%s(%s)' % trans for trans in transactions))
        except Exception as e:
            print(e)

    def help_transactions(self):
        self._transactions_argument_parser.print_help()

    ###########################################################################
    # Transaction.

    _transaction_argument_parser = make_simple_argument_parser(
        prog = "transaction",
        description = "Print all human readeable informations relative to a transaction.",
        args = [
            {
                'flags': 'id',
                'help': 'The id of the transaction.',
            }
        ],
    )

    def do_transaction(self, line):
        """Print transaction."""
        args = self._get_args(self._transaction_argument_parser, line)

        if not args:
            return

        try:
            id_ = args.id

            if not self._state.transaction_sender_fullname(id_):
                return

            print("Sender:        ", self._state.transaction_sender_fullname(id_))
            print("First filename:", self._state.transaction_first_filename(id_))
            print("Files count:   ", self._state.transaction_files_count(id_))
            print("Total size:    ", self._state.transaction_total_size(id_))
            print("Network:       ", self._state.transaction_network_id(id_))
            print("Status:        ", self._state.transaction_status(id_))

        except Exception as e:
            print(e)

    def help_transaction(self):
        self._transaction_argument_parser.print_help()

    def complete_transaction(self, text, line, begidx, endidx):
        return [t for t in self._state.transactions() if t.startswith(text)]

    ###########################################################################
    # Update transactions
    _update_transaction_argument_parser = make_simple_argument_parser(
        prog = "update_transaction",
        description = "update a specific transaction.",
        args = [
            {
                'flags': 'transaction_id',
                'help': 'The transaction id to update.',
            },
            {
                'flags': 'status',
                'help': 'The new status',
            }
        ]
    )

    def do_update_transaction(self, line):
        args = self._get_args(self._update_transaction_argument_parser, line)

        if not args:
            return

        try:
            transaction = args.transaction_id;
            status = args.status;

            if status == 'accept':
                status = self._state.TransactionStatus.accepted
            elif status == 'cancel':
                status = self._state.TransactionStatus.canceled
            else:
                print('unknown status')
                return

            self._state.update_transaction(transaction, self._state.TransactionStatus(status))
        except Exception as e:
            print(e)

    def help_update_transaction(self):
        self._update_transaction_argument_parser.print_help()

    def complete_update_transaction(self, text, line, begidx, endidx):
        sp = line.split(" ")
        if len(sp) == 2:
            return [t for t in self._state.transactions() if t.startswith(text)]
        else:
            return [s for s in ['accept', 'cancel'] if s.startswith(text)]

    ###########################################################################
    # Notifications.
    _notifications_argument_parser = make_simple_argument_parser(
        prog = "notifications",
        description = "Display current notifications.",
        args = [
            {
                'flags': 'count',
                'help': 'number of notifications you want to display. Default: 10.',
                'nargs': '?',
                'default': 10,
                'type': int,
            },
            {
               'flags': 'offset',
               'help': 'offset of notifications to display. Default: 0.',
               'nargs': '?',
               'default': 0,
               'type': int,
            }
        ],
    )

    def help_notifications(self):
        self._notifications_argument_parser.print_help()

    def do_notifications(self, line):
        args = self._get_args(self._notifications_argument_parser, line)

        if not args:
            return

        try:
            count = args.count
            offset = args.offset

            for notif in self._notifs:
                print(notif)
            for notif in self._notifs_old:
                print(notif)

            self._notifs_old += self._notifs
            self._notifs = []
            self._state.notifications_read()
        except Exception as e:
            print(e)

    ###########################################################################
    # Default.
    def default(self, line):
        if line == 'EOF':
            print()
            raise KeyboardInterrupt()
        print("Command not found:", line)

    ###########################################################################
    # Callbacks.
    def _incomming_transfer_handler(self, transaction_id, new):
        if new:
            recipient = self._notifs
        else:
            recipient = self._notifs_old

        recipient.append("New transaction %s from %s [(%s file(s)) %s %sB]" % (
                         transaction_id,
                         self._state.transaction_sender_fullname(transaction_id),
                         self._state.transaction_files_count(transaction_id),
                         self._state.transaction_first_filename(transaction_id),
                         self._state.transaction_total_size(transaction_id))
        )

    def _file_transfer_status_handler(self, transaction_id, new):
        if new:
            recipient = self._notifs
        else:
            recipient = self._notifs_old

        recipient.append("Notification %s status changed to %s" % (
                         transaction_id,
                         self._state.TransactionStatus(self._state.transaction_status(transaction_id)))
        )

    def _message_handler(self, message):
        print("Message")

def start_shell(state, args):
    shell = InfinitShell(state, args)

    if not state.has_device:
        if args.action == 'shell':
            print("No local device found, try 'create_device' command")
        else:
            import socket
            default_dev_name = socket.gethostname().strip()
            dev_name = input("Computer name (defaults to '%s'): " % default_dev_name).strip()
            if not dev_name:
                dev_name = default_dev_name
            shell.do_create_device(dev_name)

    if not hasattr(state, 'output_dir') or len(state.output_dir) == 0:
        if args.action == 'shell':
            print("No output dir found, try 'set_output_dir' command")
        else:
            default_output_dir = state.get_output_dir()
            state.output_dir = input("Output dir (defaults to '%s'): " % default_output_dir).strip()
            if not state.output_dir:
                state.output_dir = default_output_dir
            state.set_output_dir(state.output_dir)

    if 'shell' in args.action:
        do_shell = True
        args.action.remove('shell')
    else:
        do_shell = False

    for action in set(args.action):
        getattr(shell, 'do_' + action)('')

    if do_shell:
        shell.cmdloop(SHELL_INTRO)

def re_input(prompt, pattern=".+", regexp=None, errmsg="Input is not valid", default=None):
    if default is not None:
        prompt += " (defaults to %s)" % default
    prompt += ': '
    while True:
        res = input(prompt).strip()
        if not res and default:
            res = default
            break
        if regexp is not None:
            if regexp.match(res):
                break
        elif re.match('^' + pattern + '$', res):
            break
        print(errmsg)
    return res

def register(state, args):
    import socket
    fullname = args.user
    email = args.email
    password = args.password
    dev_name = args.device
    if fullname is not None and email is not None and password is not None:
        # noninteractive register
        state.register(fullname, email, password)
        return
    fullname = None
    email = None
    while True:
        fullname = re_input("Fullname", pattern='[\w ]{3,64}', default=fullname)
        email = re_input("Email", regexp=EMAIL_REGEXP, default=email)
        password = getpass.getpass("password: ")
        password2 = getpass.getpass("confirm password: ")
        if password != password2:
            print("Passwords don't match!")
            continue
        elif len(password) < 4:
            print("Password too short")
            continue
        dev_name = re_input(
          "Computer name",
          pattern="[\w ]{3,64}",
          default=socket.gethostname().strip(),
        )
        try:
          print('Registering...')
          state.register(fullname, email, password)
          print('Relogging in...')
          state.logout()
          state.login(email, password)
          print('Ready')
          global pollThread
          pollThread = PollThread(state)
          pollThread.start()
        except Exception as e:
          print('Exception while registering: ' + str(e))
          pass
        else:
          break

def login(state, email = None):
    while True:
        email = re_input("email", regexp=EMAIL_REGEXP, default=email)
        password = getpass.getpass("password: ").strip()
        if not password:
            print("empty password not allowed")
            continue
        try:
            state.login(email, password)
            state.connect() # connect to trophonius
            global pollThread
            pollThread = PollThread(state)
            pollThread.start()
        except Exception as e:
            print("Cannot login:", e)
        else:
            break

def update_binaries():
    # Prepare directories
    if not os.path.exists(INFINIT_HOME):
        if INFINIT_HOME == INFINIT_DEFAULT_HOME:
            os.makedirs(INFINIT_HOME)
        else:
            raise Exception("The specified home directory does not exists !")

    for dir_ in ['bin', 'lib', 'python']:
        path = os.path.join(INFINIT_HOME, dir_)
        if not os.path.exists(path):
            os.makedirs(path)

    from urllib.request import urlopen
    import xml.etree.cElementTree as et
    import hashlib

    # Download manifest.
    with urlopen(MANIFEST_URI) as req:
        root = et.fromstring(req.read())

    # Extract xml.
    binaries = []
    for el in root:
        binaries.append(dict(el.items()))

    total_size = int(dict(root.items())['size'])

    # Update binaries.
    for binary in binaries:
        url = "http://download.development.infinit.io/%s/%s" % (INFINIT_PLATFORM, binary['path'])
        dst_path = os.path.join(INFINIT_HOME, binary['path'])

        # Check if the binary is up to date.
        if os.path.exists(dst_path):
            md5 = hashlib.md5()
            with open(dst_path, 'rb') as dst:
                print("Check %s" % binary['path'])
                data = dst.read(4096)
                while data:
                    md5.update(data)
                    data = dst.read(4096)
            if md5.hexdigest() == binary['md5sum']:
                continue
        try:
            os.makedirs(os.path.dirname(dst_path))
        except:
            pass

        # Otherwise we download it.
        with open(dst_path, 'wb') as dst:
            with urlopen(url) as src:
                print("Downloading %s" % binary['path'])
                data = src.read(4096)
                while data:
                    dst.write(data)
                    data = src.read(4096)
        os.chmod(dst_path, stat.S_IRUSR | stat.S_IWUSR | stat.S_IEXEC)


def main():
    args = parser.parse_args()

    if args.update:
        update_binaries()

    file_dir = os.path.abspath(os.path.dirname(__file__))
    sys.path = [
        os.path.join(file_dir, '../lib'),
        os.path.join(file_dir, '../lib/python'),
    ] + sys.path

    import gap
    with gap.State(False, INFINIT_DEFAULT_DOWNLOAD_DIR) as state:
        if args.debug:
            state.enable_debug()
        print("actions", args.action)
        if 'register' in args.action:
            print("Registering to infinit:")
            args.action.remove('register')
            register(state, args)
        else:
            if state.logged != True:
                print("Authentication required (if you don't have an account, try -r)")
                login(state)

        start_shell(state, args)

class PollThread (threading.Thread):
    def __init__(self, state):
        super(PollThread, self).__init__()
        self.state = state
        self.running = True

    def run (self):
        while self.running:
            time.sleep(0.5)
            self.state.poll()

    def stop(self):
        self.running = False


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        if pollThread:
            pollThread.stop()
            pollThread.join()
        pass
