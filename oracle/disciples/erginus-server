#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

"""
In Greek mythology, Erginus (Ἐργῖνος) was king of Minyan Orchomenus in Boeotia.

He was the son of Clymenus, his predecessor, and Buzyge (or Budeia); his
brothers were Arrhon, Azeus, Pyleus, and Stratius.

Erginus avenged his father's death at the hands of the Thebans; he made war
against Thebes, inflicting a heavy defeat.

The Thebans were compelled to pay King Erginus a tribute of 100 oxen per year
for twenty years.

However, the tribute ended earlier than Erginus expected, when Heracles
attacked the Minyan emissaries sent to exact the tribute.

This prompted a second war between Orchomenus and Thebes, only this time Thebes
(under the leadership of Heracles) was victorious, and a double tribute was
imposed on the Orchomenians.

Erginus was slain in battle according to the version of the story given by most
ancient writers (e.g., the Bibliotheca, Strabo, Eustathius).

But according to Pausanias, Erginus was spared by Heracles and lived to a ripe
old age, and even fathered two sons (Trophonius and Agamedes) on a younger
woman.
"""

import argparse
import select
import select

import os

from socket import AF_INET, socket, SOCK_STREAM, IPPROTO_TCP
import socket as so

class Client:
    def __init__(self, conn, addr):
        self._conn = conn
        self._addr = addr
        self._file = conn.makefile()
        self._data = str()

    @property
    def conn(self):
        return self._conn

    @property
    def addr(self):
        return self._addr

    @property
    def file(self):
        return self._file

class Proxy:
    def __init__(self, id, endpoint):
        self.server = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
        self.server.setsockopt(so.SOL_SOCKET, so.SO_REUSEADDR, 1)
        self.server.bind(("", 0))
        self.id = id
        (self.server_addr, self.server_port) = self.server.getsockname()
        self.server.listen(5)
        self.tropho = so.create_connection(endpoint)
        self.running = False
        self.clients = list()

    def handle_accept(self, server):
        (conn, addr) = server.accept()
        self.clients.append(Client(conn, addr))
        print("client connected on", conn)


    def handle_read(self, client):
        print("handle read for", client)
        data = client.conn.recv(2**12)
        if data:
            # We forward the data to trophonius
            self.tropho.send(data)
        else:
            # client disconnected
            print(client, "disconnected")
            self.clients.remove(client)

    def handle_tropho(self, tropho):
        print("handle read for tropho")
        data = tropho.recv(2**12)
        if data:
            for client in self.clients:
                client.conn.send(data)
        else:
            print(tropho, "tropho disconnected")
            raise Exception("Connection closed")

    def run(self):
        self.running = True
        home_dir = os.getenv("INFINIT_HOME_DIR", os.path.expanduser("~/.infinit/"))
        ipcfile = open("/".join([home_dir, "users", self.id, "erginus.sock"]), "w")
        print(str(self.server_port), file=ipcfile)
        ipcfile.close()
        while self.running:
            rlist = [self.server, self.tropho] + list(c.conn for c in self.clients)
            wlist = []
            xlist = []
            (rready, wready, xready) = select.select(rlist, wlist, xlist)
            print("rready", rready)
            print("wready", wready)
            print("xready", xready)
            if self.server in rready:
                self.handle_accept(self.server)
            if self.tropho in rready:
                self.handle_tropho(self.tropho)
            for so in list((set(rready) & set(c.conn for c in self.clients)) - set((self.server, self.tropho))):
                for client in (c for c in self.clients if c.conn == so):
                    self.handle_read(client)


def main(id, tropho_endpoint):
    addr, port = tropho_endpoint.split(":")
    port = int(port)
    p = Proxy(id, (addr, port))
    p.run()
    pass

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--trophonius', '-t', help="longinus address",
            default="development.infinit.io:23456")
    parser.add_argument('user', help="user name")
    args = parser.parse_args()
    main(args.user, args.trophonius)
