#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

import os, sys
import time
import subprocess
import argparse
import socket

BIN_DIR = os.path.abspath(os.path.dirname(__file__))
ROOT_DIR = os.path.abspath(os.path.join(BIN_DIR, '..'))
LIB_DIR = os.path.join(BIN_DIR, "..", "lib")

# Export library path to prevent ssl libraries mismatch.
ld_library_path = os.environ.get('LD_LIBRARY_PATH', '').split(':')
ld_library_path.extend([LIB_DIR, '/usr/local/lib'])
os.environ['LD_LIBRARY_PATH'] = ':'.join(ld_library_path)

sys.path.insert(0, os.path.join(LIB_DIR, "python"))

import meta.conf
import apertus.conf

NGINX_BINARY = "/usr/sbin/nginx"
NGINX_USER = os.getenv("USER", "infinit")
SSD = "/sbin/start-stop-daemon"
RUNTIME_DIR = os.path.join(ROOT_DIR, 'runtime')
CACHE_DIR = os.path.join(RUNTIME_DIR, 'cache')
APERTUS_PORT = apertus.conf.PORT
TROPHO_PORT = meta.conf.TROPHONIUS_PORT
TROPHO_CPORT = meta.conf.TROPHONIUS_CONTROL_PORT
META_FCGI_PORT = 9003
META_PORT = meta.conf.META_PORT
META_HOSTNAME = 'localhost'
NGINX_CONF_TEMPLATE = os.path.join(ROOT_DIR, 'prod', 'nginx.conf')


parser = argparse.ArgumentParser(description="Services launcher")

parser.add_argument(
   '--stop',
   default = False,
   action = "store_true",
)

parser.add_argument(
   '--start',
   default = False,
   action = "store_true",
)

parser.add_argument(
    '--meta-port',
    type = int,
    default = META_PORT,
)

parser.add_argument(
    '--meta-host',
    default = META_HOSTNAME,
    help = "Set the correct host for the gateway",
)

parser.add_argument(
    '--trophonius-port',
    type = int,
    default = TROPHO_PORT,
)

parser.add_argument(
    '--trophonius-control-port',
    type = int,
    default = TROPHO_CPORT,
)

parser.add_argument(
    '--apertus-host',
    type = str,
    default = socket.getfqdn(),
)

parser.add_argument(
    '--apertus-port',
    type = int,
    default = APERTUS_PORT,
)

import shlex

lsb_init_script_status = """0	program is running or service is OK
1	program is dead and pid file exists
2	program is dead and lock file exists
3	program is not running
4	program or service status is unknown
5-99	reserved for future LSB use
100-149	reserved for distribution use
150-199	reserved for application use
200-254	reserved
"""

def ssd(command):
    e = run(" ".join([SSD, "-v", "-d", RUNTIME_DIR] + shlex.split(command)))
    if e >= 1 and e <= 4:
      print(lsb_init_script_status.split('\n')[e])
    return e

def run(command):
    env = {
        'LD_LIBRARY_PATH': ':'.join(['/usr/local/lib', LIB_DIR]),
    }
    try:
        return subprocess.check_call(shlex.split(command), env=env)
    except subprocess.CalledProcessError as e:
        return e.returncode
    except Exception as e:
        print(e)


META_BIN = os.path.join(BIN_DIR, 'meta-server')
APERTUS_BIN = os.path.join(BIN_DIR, 'apertus-server')
TROPHONIUS_BIN = os.path.join(BIN_DIR, 'trophonius-server')

def main(argv):
    args = parser.parse_args(argv)

    if args.start:
      start(args)
    elif args.stop:
      stop(args)
    else:
      make_dev(args)

def get_local_ip():
    import socket
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("gmail.com", 80))
    addr = s.getsockname()[0]
    s.close()
    return addr

keys = {
    'meta_bin': META_BIN,
    'meta_port': META_PORT,
    'meta_fport': META_FCGI_PORT,
    'meta_hostname': META_HOSTNAME,
    'meta_pidfile': os.path.join(RUNTIME_DIR, 'meta.pid'),

    'tropho_bin': TROPHONIUS_BIN,
    'tropho_port': TROPHO_PORT,
    'tropho_cport': TROPHO_CPORT,
    'tropho_pidfile': os.path.join(RUNTIME_DIR, 'tropho.pid'),

    'apertus_bin': APERTUS_BIN,
    'apertus_proxy_port': APERTUS_PORT,
    'apertus_host': get_local_ip(),
    'apertus_pidfile0': os.path.join(RUNTIME_DIR, 'apertus0.pid'),
    'apertus_pidfile1': os.path.join(RUNTIME_DIR, 'apertus1.pid'),
    'apertus_pidfile2': os.path.join(RUNTIME_DIR, 'apertus2.pid'),
    'apertus_pidfile_proxy': os.path.join(RUNTIME_DIR, 'apertus-proxy.pid'),
    'www_dir': os.path.join('.', os.path.relpath(RUNTIME_DIR)),
    'nginx_pidfile': os.path.join('.', os.path.relpath(RUNTIME_DIR), 'nginx.pid'),
    'nginx_binary': NGINX_BINARY,
}

def start(args):
    if not os.path.isdir(RUNTIME_DIR):
        os.mkdir(RUNTIME_DIR)
        error_log_path = os.path.join(RUNTIME_DIR, 'error_log')
        local_error_log_path = os.path.join(RUNTIME_DIR, 'localhost.access_log')
        local_access_log_path  = os.path.join(RUNTIME_DIR, 'localhost.error_log')
        for file in (error_log_path, local_error_log_path, local_access_log_path):
          f = open(file, "w+")
          f.close()
    if not os.path.isdir(CACHE_DIR):
        os.mkdir(CACHE_DIR)

    nginx_conf_params = {
        'NGINX_USER': NGINX_USER,
        'META_PORT': keys['meta_port'],
        'META_HOSTNAME': keys['meta_hostname'],
        'META_FCGI_PORT': keys['meta_fport'],
        'CACHE_DIR': os.path.relpath(CACHE_DIR, start = RUNTIME_DIR),
    }
    nginx_conf = os.path.join(RUNTIME_DIR, 'nginx.conf')
    with open(NGINX_CONF_TEMPLATE) as template:
        with open(nginx_conf, 'w') as conf:
            conf.write(template.read() % nginx_conf_params)

    if ssd("-p {apertus_pidfile0} -T".format(**keys)) != 0:
      ssd("-b -p {apertus_pidfile0} -m -S -x {apertus_bin} --\
            --port 0".format(**keys))

    if ssd("-p {apertus_pidfile1} -T".format(**keys)) != 0:
      ssd("-b -p {apertus_pidfile1} -m -S -x {apertus_bin} --\
            --port 0".format(**keys))

    if ssd("-p {apertus_pidfile2} -T".format(**keys)) != 0:
      ssd("-b -p {apertus_pidfile2} -m -S -x {apertus_bin} --\
            --port 0".format(**keys))

    if ssd("-p {apertus_pidfile_proxy} -T".format(**keys)) != 0:
      ssd("-b -p {apertus_pidfile_proxy} -m -S -x {apertus_bin} --\
            --proxy --port {apertus_proxy_port}".format(**keys))

    if ssd("-p {tropho_pidfile} -T".format(**keys)) != 0:
      ssd("-b -p {tropho_pidfile} -m -S -x {tropho_bin} --\
            --port {tropho_port} --control-port {tropho_cport}".format(**keys))

    if ssd("-p {nginx_pidfile} -T".format(**keys)) != 0:
      run(' '.join([
          "spawn-fcgi -P {meta_pidfile} -d ./ -a 127.0.0.1 -p {meta_fport}",
          "--",
          "{meta_bin} --fcgi",
          "--port {meta_port}",
          "--apertus-port {apertus_proxy_port}",
          "--apertus-host {apertus_host}",
      ]).format(**keys))

    if ssd("-p {nginx_pidfile} -T".format(**keys)) != 0:
      run("sudo {nginx_binary} -p {www_dir} -c nginx.conf".format(**keys))

def stop(args):
    ssd("-p {apertus_pidfile0} -K".format(**keys))
    ssd("-p {apertus_pidfile1} -K".format(**keys))
    ssd("-p {apertus_pidfile2} -K".format(**keys))
    ssd("-p {apertus_pidfile_proxy} -K".format(**keys))
    ssd("-p {tropho_pidfile} -K".format(**keys))
    ssd("-p {meta_pidfile} -K".format(**keys))
    run("sudo {nginx_binary} -p {www_dir} -c nginx.conf -s stop".format(**keys))
    import time
    time.sleep(2)
    for pidfile in [v for k, v in keys.items() if 'pidfile' in k]:
      if os.path.isfile(pidfile):
        try:
          pid = int(open(pidfile, "r").read())
          os.kill(pid, 9)
          print("Kill none exited process in", pidfile)
        except OSError as e:
          pass
        except Exception as e:
          print(e)
          raise e

def make_dev(args):
    processes = []
    try:
        processes.append(
            (
                META_BIN,
                subprocess.Popen(
                    [
                        META_BIN,
                        '--meta-port', str(args.meta_port),
                        '--trophonius-control-port', str(args.trophonius_control_port),
                        '--apertus-host', args.apertus_host,
                        '--apertus-port', str(args.apertus_port),
                    ],
                    stdout = open("meta.stdout", "w"),
                    stderr = open("meta.stderr", "w"))
            )
        )

        processes.append(
            (
                TROPHONIUS_BIN,
                subprocess.Popen(
                    [
                        TROPHONIUS_BIN,
                        '--port', str(args.trophonius_port),
                        '--control-port', str(args.trophonius_control_port),
                    ],
                    env = dict(INFINIT_META_PORT=str(args.meta_port), **os.environ),
                    stdout = open("tropho.stdout", "w"),
                    stderr = open("tropho.stderr", "w")
                )
            )
        )

        processes.append(
            (
                APERTUS_BIN,
                subprocess.Popen(
                    [
                        APERTUS_BIN,
                        '--port', str(args.apertus_port),
                        '--proxy',
                    ],
                    stdout = open("apertus-proxy.stdout", "w"),
                    stderr = open("apertus-proxy.stderr", "w")
                )
            )
        )
        processes.append(
            (
                APERTUS_BIN,
                subprocess.Popen(
                    [
                        APERTUS_BIN,
                        '--port', str(0)
                    ],
                    stdout = open("apertus1.stdout", "w"),
                    stderr = open("apertus1.stderr", "w")
                )
            )
        )
        processes.append(
            (
                APERTUS_BIN,
                subprocess.Popen(
                    [
                        APERTUS_BIN,
                        '--port', str(0)
                    ],
                    stdout = open("apertus2.stdout", "w"),
                    stderr = open("apertus2.stderr", "w")
                )
            )
        )
        processes.append(
            (
                APERTUS_BIN,
                subprocess.Popen(
                    [
                        APERTUS_BIN,
                        '--port', str(0)
                    ],
                    stdout = open("apertus3.stdout", "w"),
                    stderr = open("apertus3.stderr", "w")
                )
            )
        )

        print(
            "INFINIT_TROPHONIUS_PORT=%s" % args.trophonius_port,
            "INFINIT_META_PORT=%s" % args.meta_port,
        )

        running = True
        while running:
            for name, p in processes:
                p.poll()
                if p.returncode is not None:
                    raise Exception('%s failed with error code %s' % (name, p.returncode))
                time.sleep(0.1)
    except KeyboardInterrupt:
        print("Exiting")
    finally:
        for name, p in processes:
            try:
                p.terminate()
                time.sleep(1)
            except: pass

        for name, p in processes:
            if p.returncode is None:
                try:
                    p.kill()
                except:
                    pass

if __name__ == '__main__':
    try:
        import sys
        main(sys.argv[1:])
    except Exception as e:
        print('%s: fatal error: %s' % (sys.argv[0], e))
        raise e
