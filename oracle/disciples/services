#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

import os, sys
import time
import subprocess
import argparse

def reset_user_status():
    """XXX We reset all user's status to be "disconnected". We know it's
    true because there is only on trophonius instance at the moment.
    The right way to do it is to disconnect all users (in the database)
    when the trophonius instance goes down.
    """
    import meta.database
    meta.database.users().update({}, {'$set': {'connected': False}})

sys.path.insert(0, os.path.join(os.path.dirname(__file__), "../lib/python"))
import meta.conf

parser = argparse.ArgumentParser(description="Services launcher")

parser.add_argument(
    '--meta-port',
    type = int,
    default = meta.conf.META_PORT,
)

parser.add_argument(
    '--apertus-port',
    type = int,
    default = meta.conf.APERTUS_PORT,
)

parser.add_argument(
    '--trophonius-port',
    type = int,
    default = meta.conf.TROPHONIUS_PORT,
)

parser.add_argument(
    '--trophonius-control-port',
    type = int,
    default = meta.conf.TROPHONIUS_CONTROL_PORT,
)

parser.add_argument(
    '--longinus-port',
    type = int,
    default = meta.conf.LONGINUS_PORT,
)

parser.add_argument(
    '--heartbeat-port',
    type = int,
    default = meta.conf.HEARTBEAT_PORT,
)

parser.add_argument(
    '--stun-port',
    type = int,
    default = meta.conf.STUN_PORT,
)

DIR = os.path.abspath(os.path.dirname(__file__))

META_BIN = os.path.join(DIR, 'meta-server')
APERTUS_BIN = os.path.join(DIR, 'apertus-server')
TROPHONIUS_BIN = os.path.join(DIR, 'trophonius-server')
LONGINUS_BIN = os.path.join(DIR, 'longinus-server')
HEARTBEAT_BIN = os.path.join(DIR, 'heartbeat-server')
STUN_BIN = os.path.join(DIR, 'stun-server')

def main(argv):
    args = parser.parse_args(argv)

    processes = []

    try:
        reset_user_status()
        processes.append(
            (
                META_BIN,
                subprocess.Popen(
                    [
                        META_BIN,
                        '--meta-port', str(args.meta_port),
                        '--trophonius-control-port', str(args.trophonius_control_port),
                        '--apertus-control-port', str(args.apertus_port),
                    ],
                    stdout = open("meta.stdout", "w"),
                    stderr = open("meta.stderr", "w"))
            )
        )

        processes.append(
            (
                LONGINUS_BIN,
                subprocess.Popen(
                    [LONGINUS_BIN, str(args.longinus_port)],
                    stdout = open("longinus.stdout", "w"),
                    stderr = open("longinus.stderr", "w")
                )
            )
        )

        processes.append(
            (
                TROPHONIUS_BIN,
                subprocess.Popen(
                    [
                        TROPHONIUS_BIN,
                        '--port', str(args.trophonius_port),
                        '--control-port', str(args.trophonius_control_port),
                    ],
                    env = dict(INFINIT_META_PORT=str(args.meta_port), **os.environ),
                    stdout = open("tropho.stdout", "w"),
                    stderr = open("tropho.stderr", "w")
                )
            )
        )

        processes.append(
            (
                APERTUS_BIN,
                subprocess.Popen(
                    [APERTUS_BIN, '--port', str(args.apertus_port)],
                    stdout = open("apertus.stdout", "w"),
                    stderr = open("apertus.stderr", "w")
                )
            )
        )

        processes.append(
            (
                HEARTBEAT_BIN,
                subprocess.Popen(
                    [HEARTBEAT_BIN, '--port', str(args.heartbeat_port)],
                    stdout = open("heartbeat.stdout", "w"),
                    stderr = open("heartbeat.stderr", "w")
                )
            )
        )

        processes.append(
            (
                STUN_BIN,
                subprocess.Popen(
                    [
                        STUN_BIN,
                        '--primaryport', str(args.stun_port),
                        '--mode', 'full'
                    ],
                    stdout = open("stunserver.stdout", "w"),
                    stderr = open("stunserver.stderr", "w")
                )
            )
        )

        print(
            "INFINIT_TROPHONIUS_PORT=%s" % args.trophonius_port,
            "INFINIT_META_PORT=%s" % args.meta_port,
            "INFINIT_LONGINUS_PORT=%s" % args.longinus_port,
            "INFINIT_HEARTBEAT_PORT=%s" % args.heartbeat_port,
            "INFINIT_STUN_PORT=%s" % args.stun_port,
        )

        running = True
        while running:
            for name, p in processes:
                p.poll()
                if p.returncode is not None:
                    raise Exception('%s failed with error code %s' % (name, p.returncode))
                time.sleep(0.1)
    except KeyboardInterrupt:
        print("Exiting")
    finally:
        for name, p in processes:
            try:
                p.terminate()
            except: pass

        for name, p in processes:
            if p.returncode is None:
                try:
                    p.kill()
                except:
                    pass

if __name__ == '__main__':
    try:
        import sys
        main(sys.argv[1:])
    except Exception as e:
        print('%s: fatal error: %s' % (sys.argv[0], e))
        sys.exit(1)
