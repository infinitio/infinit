#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

import os, sys
import time
import subprocess
import argparse

sys.path.insert(0, os.path.join(os.path.dirname(__file__), "../lib/python"))
import meta.conf

parser = argparse.ArgumentParser(description="Services launcher")

parser.add_argument(
    '--meta-port',
    type = int,
    default = meta.conf.META_PORT,
)

parser.add_argument(
    '--apertus-port',
    type = int,
    default = meta.conf.APERTUS_PORT,
)

parser.add_argument(
    '--apertus-control-port',
    type = int,
    default = meta.conf.APERTUS_CONTROL_PORT,
)

parser.add_argument(
    '--trophonius-port',
    type = int,
    default = meta.conf.TROPHONIUS_PORT,
)

parser.add_argument(
    '--trophonius-control-port',
    type = int,
    default = meta.conf.TROPHONIUS_CONTROL_PORT,
)

parser.add_argument(
    '--longinus-port',
    type = int,
    default = meta.conf.LONGINUS_PORT,
)

parser.add_argument(
    '--heartbeat-port',
    type = int,
    default = meta.conf.HEARTBEAT_PORT,
)

parser.add_argument(
    '--stun-port',
    type = int,
    default = meta.conf.STUN_PORT,
)

DIR = os.path.abspath(os.path.dirname(__file__))

META_BIN = os.path.join(DIR, 'meta-server')
APERTUS_BIN = os.path.join(DIR, 'apertus-server')
TROPHONIUS_BIN = os.path.join(DIR, 'trophonius-server')
LONGINUS_BIN = os.path.join(DIR, 'longinus-server')
HEARTBEAT_BIN = os.path.join(DIR, 'heartbeat-server')
STUN_BIN = os.path.join(DIR, 'stun-server')

def main(argv):
    args = parser.parse_args(argv)

    processes = []

    try:
        processes.append(subprocess.Popen([
            META_BIN,
            '--meta-port', str(args.meta_port),
            '--trophonius-control-port', str(args.trophonius_control_port),
            '--apertus-control-port', str(args.apertus_control_port),
        ],
        stdout=open("meta.stdout", "w"),
        stderr=open("meta.stderr", "w")
        ))

        processes.append(
            subprocess.Popen([
                LONGINUS_BIN,
                str(args.longinus_port)
            ],
            stdout=open("longinus.stdout", "w"),
            stderr=open("longinus.stderr", "w")) 
            )
        )
        processes.append(
            subprocess.Popen([
                TROPHONIUS_BIN,
                '--port', str(args.trophonius_port),
                '--control-port', str(args.trophonius_control_port),
            ],
            env=dict(INFINIT_META_PORT=str(args.meta_port), **os.environ),
            stdout=open("tropho.stdout", "w"),
            stderr=open("tropho.stderr", "w"))
        )
        processes.append(
            subprocess.Popen([
                APERTUS_BIN,
                '--port', str(args.apertus_port),
                '--control-port', str(args.apertus_control_port)
            ],
            stdout=open("apertus.stdout", "w"),
            stderr=open("apertus.stderr", "w"))
        )
        processes.append(
            subprocess.Popen([
                HEARTBEAT_BIN,
                '--port', str(args.heartbeat_port)
            ],
            stdout=open("heartbeat.stdout", "w"),
            stderr=open("heartbeat.stderr", "w"))
        )
        processes.append(
            subprocess.Popen([
                STUN_BIN,
                '--primaryport', str(args.stun_port),
                '--mode', 'full'
            ],
            stdout=open("stunserver.stdout", "w"),
            stderr=open("stunserver.stderr", "w")) 
        )

        print("INFINIT_TROPHONIUS_PORT=%s" % args.trophonius_port)
        print("INFINIT_META_PORT=%s" % args.meta_port)
        print("INFINIT_LONGINUS_PORT=%s" % args.longinus_port)
        print("INFINIT_HEARTBEAT_PORT=%s" % args.heartbeat_port)
        print("INFINIT_STUN_PORT=%s" % args.stun_port)

        running = True
        while running:
            for p in processes:
                p.poll()
                if p.returncode is not None:
                    running = False
                time.sleep(0.1)
    except KeyboardInterrupt:
        print("Exiting")
    finally:
        for p in processes:
            try:
                p.terminate()
            except: pass

        for p in processes:
            if p.returncode is None:
                try:
                    p.kill()
                except:
                    pass

if __name__ == '__main__':
    import sys
    main(sys.argv[1:])
