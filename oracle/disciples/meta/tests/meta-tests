#!/usr/bin/env python2.7

import hashlib
import meta
import pythia

with meta.Meta(port_file='port_file') as meta:
    session = {}
    client = pythia.Client(session=session)

    email = 'testkaka@infinit.io'
    password = 'kittens'
    password_hash = hashlib.sha256(password).hexdigest()
    fullname = 'Pif Pif'
    activation_code = 'bitebite'

    res = client.post('/user/login', {'email': email,
                                      'password': password_hash,
    })

    if not res['success']:
        res = pythia.Admin().post('/user/register',
                                  {'email': email,
                                   'fullname': fullname,
                                   'password': password_hash,
                                   'activation_code': activation_code,
        })

        if not res['success']:
            raise Exception("Cannot register: " + res['error'])
        res = client.post('/user/login', {'email': email,
                                          'password': password_hash,
        })

        if not res['success']:
            print res
            raise Exception("Cannot login!")
    session['token'] = res['token']
    print "Got token:", res['token']

    account = client.get('/self')
    print "account:", account
    assert account['success'] is True

    # Testing devices
    if not client.get('/devices')['devices']:
        res = client.post('/devices', {
            'name': "New device",
            'addresses': [
                {"ip": "127.0.0.1", 'port':1234},
            ],
        })
        print res
        assert res['success'] is True
        print "added device", res['created_device_id']

    devices = client.get('/devices')['devices']
    assert len(devices) > 0
    print "User devices:", devices
    device = client.get('/device/' + devices[0])
    print "Got device", device

    device['name'] = "THIS IS A NEW NAME"
    res = client.post('/devices', device)

    device = client.get('/device/' + devices[0])
    print "Got updated device", device

    assert device['name'] == "THIS IS A NEW NAME"

    res = client.delete('/device/' + devices[0])
    assert res['success'] is True

    # Testing networks
    if not client.get('/networks'):
        res = client.post('/networks', {'name': "New network"})
        assert res['success'] is True
        print "added network", res['created_network_id']

    networks = client.get('/networks')['networks']
    assert len(networks) > 0
    print "user networks", networks

    # updating network
    network = client.get('/network/' + networks[0])
    network['name'] = "THIS IS A NEW `network` NAME"
    res = client.post('/networks', network)
    if res['success'] is False:
        print "ERROR:", res["error"]
        assert False

    network = client.get('/network/' + networks[0])
    assert network['name'] == "THIS IS A NEW `network` NAME"
    print "updated network", network

    res = client.post('/user/register', {
        'fullname': 'Mister Test friend',
        'email': "friend@test.net",
        'password': password
    })

    assert client.get('/user/logout')['success'] is True
