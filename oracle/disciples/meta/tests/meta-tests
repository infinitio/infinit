#!/usr/bin/env python3

import hashlib
import meta
import pythia
import sys

with meta.Meta(spawn_db = True) as meta:
    session = {}
    print(meta.url)
    client = pythia.Client(session = session,
                           server = meta.url)

    email = 'testkaka@infinit.io'
    password = 'kittens'
    password_hash = hashlib.sha256(password.encode()).hexdigest()
    fullname = 'Pif Pif'
    activation_code = 'bitebite'

    print("==== Creating Users =====")
    res = client.post('/user/login', {'email': email,
                                      'password': password_hash,
    })

    if not res['success']:
        res = pythia.Admin(server = meta.url).post('/user/register',
                                                   {'email': email,
                                                    'fullname': fullname,
                                                    'password': password_hash,
                                                    'activation_code': activation_code,
                                                })

        if not res['success']:
            raise Exception("Cannot register: " + res['error'])
        res = client.post('/user/login', {'email': email,
                                          'password': password_hash,
        })

        if not res['success']:
            print(res)
            raise Exception("Cannot login!")
    session['token'] = res['token']
    print("Got token:", res['token'])

    account = client.get('/self')
    print("account:", account)
    assert account['success'] is True
    print("==========================", end="\n\n")

    # Testing devices
    print("==== Testing Devices =====")
    if not client.get('/devices')['devices']:
        res = client.post('/device/create', {
            'name': "New device",
        })
        print(res)
        assert res['success'] is True
        print("added device", res['created_device_id'])

    devices = client.get('/devices')['devices']
    assert len(devices) > 0
    print("User devices:", devices)
    device = client.get('/device/{}/view'.format(devices[0]))
    print("Got device", device)

    device['name'] = "THIS IS A NEW NAME"
    new_device = client.post('/device/create', device)

    device = client.get('/device/{}/view'.format(new_device["created_device_id"]))
    print("Got updated device", device)
    assert device['name'] == "THIS IS A NEW NAME"

    res = client.post('/device/delete', {"_id": devices[0]})
    assert res['success'] is True
    assert res["deleted_device_id"] == devices[0]
    print("==========================", end="\n\n")

    # Testing networks
    print("==== Testing Network =====")
    if not client.get('/networks')['networks']:
        res = client.post('/network/create', {'name': "New network"})
        assert res['success'] is True
        print("added network", res['created_network_id'])

    networks = client.get('/networks')['networks']
    print("user networks", networks)
    assert len(networks) > 0

    # updating network
    network = client.get('/network/{}/view'.format(networks[0]))
    network['name'] = "THIS IS A NEW `network` NAME"
    res = client.post('/network/update', {"_id": network['_id'], "name": network['name']})
    if res['success'] is False:
        print("ERROR:", res)
        assert False

    # Test for deprecation of the users key.
    res = client.post('/network/create', {"name": "Net Stark", "users": ["idid"]})
    print(res)
    assert res['success'] is False and res['error_details'] == 'The key users is deprecated'

    # Test for deprecation of the devices key.
    res = client.post('/network/create', {"name": "Net Stark", "devices": ["devdev"]})
    print(res)
    assert res['success'] is False and res['error_details'] == 'The key devices is deprecated'


    network = client.get('/network/{}/view'.format(networks[0]))
    print(network)
    assert network['name'] == "THIS IS A NEW `network` NAME"
    print("updated network", network)

    res = client.post('/user/register', {
        'fullname': 'Mister Test friend',
        'email': "friend@test.net",
        'password': password
    })

    assert client.get('/user/logout')['success'] is True
    print("==========================", end="\n\n")
